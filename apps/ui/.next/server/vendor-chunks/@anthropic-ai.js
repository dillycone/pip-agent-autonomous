"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@anthropic-ai";
exports.ids = ["vendor-chunks/@anthropic-ai"];
exports.modules = {

/***/ "(rsc)/../../node_modules/@anthropic-ai/claude-agent-sdk/sdk.mjs":
/*!*****************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/claude-agent-sdk/sdk.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSdkMcpServer: () => (/* binding */ createSdkMcpServer),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   tool: () => (/* binding */ tool)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var readline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! readline */ \"readline\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var process__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! process */ \"process\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! crypto */ \"crypto\");\n//#!/usr/bin/env node\n// (c) Anthropic PBC. All rights reserved. Use is subject to the Legal Agreements outlined here: https://docs.claude.com/en/docs/claude-code/legal-and-compliance.\n\n// Version: 0.1.14\n\n// Want to see the unminified source? We're hiring!\n// https://job-boards.greenhouse.io/anthropic/jobs/4816199008\nvar __create = Object.create;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __toESM = (mod, isNodeMode, target) => {\n  target = mod != null ? __create(__getProtoOf(mod)) : {};\n  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target;\n  for (let key of __getOwnPropNames(mod))\n    if (!__hasOwnProp.call(to, key))\n      __defProp(to, key, {\n        get: () => mod[key],\n        enumerable: true\n      });\n  return to;\n};\nvar __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, {\n      get: all[name],\n      enumerable: true,\n      configurable: true,\n      set: (newValue) => all[name] = () => newValue\n    });\n};\n\n// ../node_modules/uri-js/dist/es5/uri.all.js\nvar require_uri_all = __commonJS((exports, module) => {\n  (function(global2, factory) {\n    typeof exports === \"object\" && typeof module !== \"undefined\" ? factory(exports) : typeof define === \"function\" && define.amd ? define([\"exports\"], factory) : factory(global2.URI = global2.URI || {});\n  })(exports, function(exports2) {\n    function merge() {\n      for (var _len = arguments.length, sets = Array(_len), _key = 0;_key < _len; _key++) {\n        sets[_key] = arguments[_key];\n      }\n      if (sets.length > 1) {\n        sets[0] = sets[0].slice(0, -1);\n        var xl = sets.length - 1;\n        for (var x = 1;x < xl; ++x) {\n          sets[x] = sets[x].slice(1, -1);\n        }\n        sets[xl] = sets[xl].slice(1);\n        return sets.join(\"\");\n      } else {\n        return sets[0];\n      }\n    }\n    function subexp(str) {\n      return \"(?:\" + str + \")\";\n    }\n    function typeOf(o) {\n      return o === undefined ? \"undefined\" : o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase();\n    }\n    function toUpperCase(str) {\n      return str.toUpperCase();\n    }\n    function toArray(obj) {\n      return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];\n    }\n    function assign(target, source) {\n      var obj = target;\n      if (source) {\n        for (var key in source) {\n          obj[key] = source[key];\n        }\n      }\n      return obj;\n    }\n    function buildExps(isIRI2) {\n      var ALPHA$$ = \"[A-Za-z]\", CR$ = \"[\\\\x0D]\", DIGIT$$ = \"[0-9]\", DQUOTE$$ = \"[\\\\x22]\", HEXDIG$$2 = merge(DIGIT$$, \"[A-Fa-f]\"), LF$$ = \"[\\\\x0A]\", SP$$ = \"[\\\\x20]\", PCT_ENCODED$2 = subexp(subexp(\"%[EFef]\" + HEXDIG$$2 + \"%\" + HEXDIG$$2 + HEXDIG$$2 + \"%\" + HEXDIG$$2 + HEXDIG$$2) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$2 + \"%\" + HEXDIG$$2 + HEXDIG$$2) + \"|\" + subexp(\"%\" + HEXDIG$$2 + HEXDIG$$2)), GEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\", SUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\", RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI2 ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\", IPRIVATE$$ = isIRI2 ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\", UNRESERVED$$2 = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$), SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"), USERINFO$ = subexp(subexp(PCT_ENCODED$2 + \"|\" + merge(UNRESERVED$$2, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"), DEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$), DEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$), IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$), H16$ = subexp(HEXDIG$$2 + \"{1,4}\"), LS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$), IPV6ADDRESS1$ = subexp(subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$), IPV6ADDRESS2$ = subexp(\"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$), IPV6ADDRESS3$ = subexp(subexp(H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$), IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$), IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$), IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" + H16$ + \"\\\\:\" + LS32$), IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\" + LS32$), IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\" + H16$), IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"), IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")), ZONEID$ = subexp(subexp(UNRESERVED$$2 + \"|\" + PCT_ENCODED$2) + \"+\"), IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$), IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$2 + \"{2})\") + ZONEID$), IPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$2 + \"+\\\\.\" + merge(UNRESERVED$$2, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"), IP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"), REG_NAME$ = subexp(subexp(PCT_ENCODED$2 + \"|\" + merge(UNRESERVED$$2, SUB_DELIMS$$)) + \"*\"), HOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$), PORT$ = subexp(DIGIT$$ + \"*\"), AUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"), PCHAR$ = subexp(PCT_ENCODED$2 + \"|\" + merge(UNRESERVED$$2, SUB_DELIMS$$, \"[\\\\:\\\\@]\")), SEGMENT$ = subexp(PCHAR$ + \"*\"), SEGMENT_NZ$ = subexp(PCHAR$ + \"+\"), SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$2 + \"|\" + merge(UNRESERVED$$2, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"), PATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"), PATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"), PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$), PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$), PATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\", PATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$), QUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"), FRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"), HIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$), URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"), RELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$), RELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"), URI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$), ABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"), GENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\", RELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\", ABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\", SAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\", AUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\";\n      return {\n        NOT_SCHEME: new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n        NOT_USERINFO: new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$2, SUB_DELIMS$$), \"g\"),\n        NOT_HOST: new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$2, SUB_DELIMS$$), \"g\"),\n        NOT_PATH: new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$2, SUB_DELIMS$$), \"g\"),\n        NOT_PATH_NOSCHEME: new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$2, SUB_DELIMS$$), \"g\"),\n        NOT_QUERY: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$2, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n        NOT_FRAGMENT: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$2, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n        ESCAPE: new RegExp(merge(\"[^]\", UNRESERVED$$2, SUB_DELIMS$$), \"g\"),\n        UNRESERVED: new RegExp(UNRESERVED$$2, \"g\"),\n        OTHER_CHARS: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$2, RESERVED$$), \"g\"),\n        PCT_ENCODED: new RegExp(PCT_ENCODED$2, \"g\"),\n        IPV4ADDRESS: new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n        IPV6ADDRESS: new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$2 + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\")\n      };\n    }\n    var URI_PROTOCOL = buildExps(false);\n    var IRI_PROTOCOL = buildExps(true);\n    var slicedToArray = function() {\n      function sliceIterator(arr, i) {\n        var _arr = [];\n        var _n = true;\n        var _d = false;\n        var _e = undefined;\n        try {\n          for (var _i = arr[Symbol.iterator](), _s;!(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i)\n              break;\n          }\n        } catch (err) {\n          _d = true;\n          _e = err;\n        } finally {\n          try {\n            if (!_n && _i[\"return\"])\n              _i[\"return\"]();\n          } finally {\n            if (_d)\n              throw _e;\n          }\n        }\n        return _arr;\n      }\n      return function(arr, i) {\n        if (Array.isArray(arr)) {\n          return arr;\n        } else if (Symbol.iterator in Object(arr)) {\n          return sliceIterator(arr, i);\n        } else {\n          throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n        }\n      };\n    }();\n    var toConsumableArray = function(arr) {\n      if (Array.isArray(arr)) {\n        for (var i = 0, arr2 = Array(arr.length);i < arr.length; i++)\n          arr2[i] = arr[i];\n        return arr2;\n      } else {\n        return Array.from(arr);\n      }\n    };\n    var maxInt = 2147483647;\n    var base = 36;\n    var tMin = 1;\n    var tMax = 26;\n    var skew = 38;\n    var damp = 700;\n    var initialBias = 72;\n    var initialN = 128;\n    var delimiter = \"-\";\n    var regexPunycode = /^xn--/;\n    var regexNonASCII = /[^\\0-\\x7E]/;\n    var regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g;\n    var errors2 = {\n      overflow: \"Overflow: input needs wider integers to process\",\n      \"not-basic\": \"Illegal input >= 0x80 (not a basic code point)\",\n      \"invalid-input\": \"Invalid input\"\n    };\n    var baseMinusTMin = base - tMin;\n    var floor = Math.floor;\n    var stringFromCharCode = String.fromCharCode;\n    function error$1(type) {\n      throw new RangeError(errors2[type]);\n    }\n    function map(array, fn) {\n      var result = [];\n      var length = array.length;\n      while (length--) {\n        result[length] = fn(array[length]);\n      }\n      return result;\n    }\n    function mapDomain(string, fn) {\n      var parts = string.split(\"@\");\n      var result = \"\";\n      if (parts.length > 1) {\n        result = parts[0] + \"@\";\n        string = parts[1];\n      }\n      string = string.replace(regexSeparators, \".\");\n      var labels = string.split(\".\");\n      var encoded = map(labels, fn).join(\".\");\n      return result + encoded;\n    }\n    function ucs2decode(string) {\n      var output = [];\n      var counter = 0;\n      var length = string.length;\n      while (counter < length) {\n        var value = string.charCodeAt(counter++);\n        if (value >= 55296 && value <= 56319 && counter < length) {\n          var extra = string.charCodeAt(counter++);\n          if ((extra & 64512) == 56320) {\n            output.push(((value & 1023) << 10) + (extra & 1023) + 65536);\n          } else {\n            output.push(value);\n            counter--;\n          }\n        } else {\n          output.push(value);\n        }\n      }\n      return output;\n    }\n    var ucs2encode = function ucs2encode(array) {\n      return String.fromCodePoint.apply(String, toConsumableArray(array));\n    };\n    var basicToDigit = function basicToDigit(codePoint) {\n      if (codePoint - 48 < 10) {\n        return codePoint - 22;\n      }\n      if (codePoint - 65 < 26) {\n        return codePoint - 65;\n      }\n      if (codePoint - 97 < 26) {\n        return codePoint - 97;\n      }\n      return base;\n    };\n    var digitToBasic = function digitToBasic(digit, flag) {\n      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n    };\n    var adapt = function adapt(delta, numPoints, firstTime) {\n      var k = 0;\n      delta = firstTime ? floor(delta / damp) : delta >> 1;\n      delta += floor(delta / numPoints);\n      for (;delta > baseMinusTMin * tMax >> 1; k += base) {\n        delta = floor(delta / baseMinusTMin);\n      }\n      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n    };\n    var decode = function decode(input) {\n      var output = [];\n      var inputLength = input.length;\n      var i = 0;\n      var n = initialN;\n      var bias = initialBias;\n      var basic = input.lastIndexOf(delimiter);\n      if (basic < 0) {\n        basic = 0;\n      }\n      for (var j = 0;j < basic; ++j) {\n        if (input.charCodeAt(j) >= 128) {\n          error$1(\"not-basic\");\n        }\n        output.push(input.charCodeAt(j));\n      }\n      for (var index = basic > 0 ? basic + 1 : 0;index < inputLength; ) {\n        var oldi = i;\n        for (var w = 1, k = base;; k += base) {\n          if (index >= inputLength) {\n            error$1(\"invalid-input\");\n          }\n          var digit = basicToDigit(input.charCodeAt(index++));\n          if (digit >= base || digit > floor((maxInt - i) / w)) {\n            error$1(\"overflow\");\n          }\n          i += digit * w;\n          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n          if (digit < t) {\n            break;\n          }\n          var baseMinusT = base - t;\n          if (w > floor(maxInt / baseMinusT)) {\n            error$1(\"overflow\");\n          }\n          w *= baseMinusT;\n        }\n        var out = output.length + 1;\n        bias = adapt(i - oldi, out, oldi == 0);\n        if (floor(i / out) > maxInt - n) {\n          error$1(\"overflow\");\n        }\n        n += floor(i / out);\n        i %= out;\n        output.splice(i++, 0, n);\n      }\n      return String.fromCodePoint.apply(String, output);\n    };\n    var encode = function encode(input) {\n      var output = [];\n      input = ucs2decode(input);\n      var inputLength = input.length;\n      var n = initialN;\n      var delta = 0;\n      var bias = initialBias;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = input[Symbol.iterator](), _step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _currentValue2 = _step.value;\n          if (_currentValue2 < 128) {\n            output.push(stringFromCharCode(_currentValue2));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      var basicLength = output.length;\n      var handledCPCount = basicLength;\n      if (basicLength) {\n        output.push(delimiter);\n      }\n      while (handledCPCount < inputLength) {\n        var m = maxInt;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n        try {\n          for (var _iterator2 = input[Symbol.iterator](), _step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var currentValue = _step2.value;\n            if (currentValue >= n && currentValue < m) {\n              m = currentValue;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        var handledCPCountPlusOne = handledCPCount + 1;\n        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n          error$1(\"overflow\");\n        }\n        delta += (m - n) * handledCPCountPlusOne;\n        n = m;\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n        try {\n          for (var _iterator3 = input[Symbol.iterator](), _step3;!(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var _currentValue = _step3.value;\n            if (_currentValue < n && ++delta > maxInt) {\n              error$1(\"overflow\");\n            }\n            if (_currentValue == n) {\n              var q = delta;\n              for (var k = base;; k += base) {\n                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n                if (q < t) {\n                  break;\n                }\n                var qMinusT = q - t;\n                var baseMinusT = base - t;\n                output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n                q = floor(qMinusT / baseMinusT);\n              }\n              output.push(stringFromCharCode(digitToBasic(q, 0)));\n              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n              delta = 0;\n              ++handledCPCount;\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n        ++delta;\n        ++n;\n      }\n      return output.join(\"\");\n    };\n    var toUnicode = function toUnicode(input) {\n      return mapDomain(input, function(string) {\n        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n      });\n    };\n    var toASCII = function toASCII(input) {\n      return mapDomain(input, function(string) {\n        return regexNonASCII.test(string) ? \"xn--\" + encode(string) : string;\n      });\n    };\n    var punycode = {\n      version: \"2.1.0\",\n      ucs2: {\n        decode: ucs2decode,\n        encode: ucs2encode\n      },\n      decode,\n      encode,\n      toASCII,\n      toUnicode\n    };\n    var SCHEMES = {};\n    function pctEncChar(chr) {\n      var c = chr.charCodeAt(0);\n      var e = undefined;\n      if (c < 16)\n        e = \"%0\" + c.toString(16).toUpperCase();\n      else if (c < 128)\n        e = \"%\" + c.toString(16).toUpperCase();\n      else if (c < 2048)\n        e = \"%\" + (c >> 6 | 192).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();\n      else\n        e = \"%\" + (c >> 12 | 224).toString(16).toUpperCase() + \"%\" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();\n      return e;\n    }\n    function pctDecChars(str) {\n      var newStr = \"\";\n      var i = 0;\n      var il = str.length;\n      while (i < il) {\n        var c = parseInt(str.substr(i + 1, 2), 16);\n        if (c < 128) {\n          newStr += String.fromCharCode(c);\n          i += 3;\n        } else if (c >= 194 && c < 224) {\n          if (il - i >= 6) {\n            var c2 = parseInt(str.substr(i + 4, 2), 16);\n            newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);\n          } else {\n            newStr += str.substr(i, 6);\n          }\n          i += 6;\n        } else if (c >= 224) {\n          if (il - i >= 9) {\n            var _c = parseInt(str.substr(i + 4, 2), 16);\n            var c3 = parseInt(str.substr(i + 7, 2), 16);\n            newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);\n          } else {\n            newStr += str.substr(i, 9);\n          }\n          i += 9;\n        } else {\n          newStr += str.substr(i, 3);\n          i += 3;\n        }\n      }\n      return newStr;\n    }\n    function _normalizeComponentEncoding(components, protocol) {\n      function decodeUnreserved2(str) {\n        var decStr = pctDecChars(str);\n        return !decStr.match(protocol.UNRESERVED) ? str : decStr;\n      }\n      if (components.scheme)\n        components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n      if (components.userinfo !== undefined)\n        components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n      if (components.host !== undefined)\n        components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n      if (components.path !== undefined)\n        components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n      if (components.query !== undefined)\n        components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n      if (components.fragment !== undefined)\n        components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n      return components;\n    }\n    function _stripLeadingZeros(str) {\n      return str.replace(/^0*(.*)/, \"$1\") || \"0\";\n    }\n    function _normalizeIPv4(host, protocol) {\n      var matches = host.match(protocol.IPV4ADDRESS) || [];\n      var _matches = slicedToArray(matches, 2), address = _matches[1];\n      if (address) {\n        return address.split(\".\").map(_stripLeadingZeros).join(\".\");\n      } else {\n        return host;\n      }\n    }\n    function _normalizeIPv6(host, protocol) {\n      var matches = host.match(protocol.IPV6ADDRESS) || [];\n      var _matches2 = slicedToArray(matches, 3), address = _matches2[1], zone = _matches2[2];\n      if (address) {\n        var _address$toLowerCase$ = address.toLowerCase().split(\"::\").reverse(), _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2), last = _address$toLowerCase$2[0], first = _address$toLowerCase$2[1];\n        var firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n        var lastFields = last.split(\":\").map(_stripLeadingZeros);\n        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n        var fieldCount = isLastFieldIPv4Address ? 7 : 8;\n        var lastFieldsStart = lastFields.length - fieldCount;\n        var fields = Array(fieldCount);\n        for (var x = 0;x < fieldCount; ++x) {\n          fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || \"\";\n        }\n        if (isLastFieldIPv4Address) {\n          fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n        }\n        var allZeroFields = fields.reduce(function(acc, field, index) {\n          if (!field || field === \"0\") {\n            var lastLongest = acc[acc.length - 1];\n            if (lastLongest && lastLongest.index + lastLongest.length === index) {\n              lastLongest.length++;\n            } else {\n              acc.push({ index, length: 1 });\n            }\n          }\n          return acc;\n        }, []);\n        var longestZeroFields = allZeroFields.sort(function(a, b) {\n          return b.length - a.length;\n        })[0];\n        var newHost = undefined;\n        if (longestZeroFields && longestZeroFields.length > 1) {\n          var newFirst = fields.slice(0, longestZeroFields.index);\n          var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n          newHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n        } else {\n          newHost = fields.join(\":\");\n        }\n        if (zone) {\n          newHost += \"%\" + zone;\n        }\n        return newHost;\n      } else {\n        return host;\n      }\n    }\n    var URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\n    var NO_MATCH_IS_UNDEFINED = \"\".match(/(){0}/)[1] === undefined;\n    function parse(uriString) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var components = {};\n      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n      if (options.reference === \"suffix\")\n        uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n      var matches = uriString.match(URI_PARSE);\n      if (matches) {\n        if (NO_MATCH_IS_UNDEFINED) {\n          components.scheme = matches[1];\n          components.userinfo = matches[3];\n          components.host = matches[4];\n          components.port = parseInt(matches[5], 10);\n          components.path = matches[6] || \"\";\n          components.query = matches[7];\n          components.fragment = matches[8];\n          if (isNaN(components.port)) {\n            components.port = matches[5];\n          }\n        } else {\n          components.scheme = matches[1] || undefined;\n          components.userinfo = uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined;\n          components.host = uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined;\n          components.port = parseInt(matches[5], 10);\n          components.path = matches[6] || \"\";\n          components.query = uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined;\n          components.fragment = uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined;\n          if (isNaN(components.port)) {\n            components.port = uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined;\n          }\n        }\n        if (components.host) {\n          components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n        }\n        if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n          components.reference = \"same-document\";\n        } else if (components.scheme === undefined) {\n          components.reference = \"relative\";\n        } else if (components.fragment === undefined) {\n          components.reference = \"absolute\";\n        } else {\n          components.reference = \"uri\";\n        }\n        if (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n          components.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n        }\n        var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n          if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {\n            try {\n              components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n            } catch (e) {\n              components.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n            }\n          }\n          _normalizeComponentEncoding(components, URI_PROTOCOL);\n        } else {\n          _normalizeComponentEncoding(components, protocol);\n        }\n        if (schemeHandler && schemeHandler.parse) {\n          schemeHandler.parse(components, options);\n        }\n      } else {\n        components.error = components.error || \"URI can not be parsed.\";\n      }\n      return components;\n    }\n    function _recomposeAuthority(components, options) {\n      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n      var uriTokens = [];\n      if (components.userinfo !== undefined) {\n        uriTokens.push(components.userinfo);\n        uriTokens.push(\"@\");\n      }\n      if (components.host !== undefined) {\n        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function(_, $1, $2) {\n          return \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\";\n        }));\n      }\n      if (typeof components.port === \"number\" || typeof components.port === \"string\") {\n        uriTokens.push(\":\");\n        uriTokens.push(String(components.port));\n      }\n      return uriTokens.length ? uriTokens.join(\"\") : undefined;\n    }\n    var RDS1 = /^\\.\\.?\\//;\n    var RDS2 = /^\\/\\.(\\/|$)/;\n    var RDS3 = /^\\/\\.\\.(\\/|$)/;\n    var RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\n    function removeDotSegments(input) {\n      var output = [];\n      while (input.length) {\n        if (input.match(RDS1)) {\n          input = input.replace(RDS1, \"\");\n        } else if (input.match(RDS2)) {\n          input = input.replace(RDS2, \"/\");\n        } else if (input.match(RDS3)) {\n          input = input.replace(RDS3, \"/\");\n          output.pop();\n        } else if (input === \".\" || input === \"..\") {\n          input = \"\";\n        } else {\n          var im = input.match(RDS5);\n          if (im) {\n            var s = im[0];\n            input = input.slice(s.length);\n            output.push(s);\n          } else {\n            throw new Error(\"Unexpected dot segment condition\");\n          }\n        }\n      }\n      return output.join(\"\");\n    }\n    function serialize(components) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;\n      var uriTokens = [];\n      var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n      if (schemeHandler && schemeHandler.serialize)\n        schemeHandler.serialize(components, options);\n      if (components.host) {\n        if (protocol.IPV6ADDRESS.test(components.host)) {} else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {\n          try {\n            components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);\n          } catch (e) {\n            components.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n          }\n        }\n      }\n      _normalizeComponentEncoding(components, protocol);\n      if (options.reference !== \"suffix\" && components.scheme) {\n        uriTokens.push(components.scheme);\n        uriTokens.push(\":\");\n      }\n      var authority = _recomposeAuthority(components, options);\n      if (authority !== undefined) {\n        if (options.reference !== \"suffix\") {\n          uriTokens.push(\"//\");\n        }\n        uriTokens.push(authority);\n        if (components.path && components.path.charAt(0) !== \"/\") {\n          uriTokens.push(\"/\");\n        }\n      }\n      if (components.path !== undefined) {\n        var s = components.path;\n        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n          s = removeDotSegments(s);\n        }\n        if (authority === undefined) {\n          s = s.replace(/^\\/\\//, \"/%2F\");\n        }\n        uriTokens.push(s);\n      }\n      if (components.query !== undefined) {\n        uriTokens.push(\"?\");\n        uriTokens.push(components.query);\n      }\n      if (components.fragment !== undefined) {\n        uriTokens.push(\"#\");\n        uriTokens.push(components.fragment);\n      }\n      return uriTokens.join(\"\");\n    }\n    function resolveComponents(base2, relative) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var skipNormalization = arguments[3];\n      var target = {};\n      if (!skipNormalization) {\n        base2 = parse(serialize(base2, options), options);\n        relative = parse(serialize(relative, options), options);\n      }\n      options = options || {};\n      if (!options.tolerant && relative.scheme) {\n        target.scheme = relative.scheme;\n        target.userinfo = relative.userinfo;\n        target.host = relative.host;\n        target.port = relative.port;\n        target.path = removeDotSegments(relative.path || \"\");\n        target.query = relative.query;\n      } else {\n        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n          target.userinfo = relative.userinfo;\n          target.host = relative.host;\n          target.port = relative.port;\n          target.path = removeDotSegments(relative.path || \"\");\n          target.query = relative.query;\n        } else {\n          if (!relative.path) {\n            target.path = base2.path;\n            if (relative.query !== undefined) {\n              target.query = relative.query;\n            } else {\n              target.query = base2.query;\n            }\n          } else {\n            if (relative.path.charAt(0) === \"/\") {\n              target.path = removeDotSegments(relative.path);\n            } else {\n              if ((base2.userinfo !== undefined || base2.host !== undefined || base2.port !== undefined) && !base2.path) {\n                target.path = \"/\" + relative.path;\n              } else if (!base2.path) {\n                target.path = relative.path;\n              } else {\n                target.path = base2.path.slice(0, base2.path.lastIndexOf(\"/\") + 1) + relative.path;\n              }\n              target.path = removeDotSegments(target.path);\n            }\n            target.query = relative.query;\n          }\n          target.userinfo = base2.userinfo;\n          target.host = base2.host;\n          target.port = base2.port;\n        }\n        target.scheme = base2.scheme;\n      }\n      target.fragment = relative.fragment;\n      return target;\n    }\n    function resolve(baseURI, relativeURI, options) {\n      var schemelessOptions = assign({ scheme: \"null\" }, options);\n      return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n    }\n    function normalize(uri, options) {\n      if (typeof uri === \"string\") {\n        uri = serialize(parse(uri, options), options);\n      } else if (typeOf(uri) === \"object\") {\n        uri = parse(serialize(uri, options), options);\n      }\n      return uri;\n    }\n    function equal(uriA, uriB, options) {\n      if (typeof uriA === \"string\") {\n        uriA = serialize(parse(uriA, options), options);\n      } else if (typeOf(uriA) === \"object\") {\n        uriA = serialize(uriA, options);\n      }\n      if (typeof uriB === \"string\") {\n        uriB = serialize(parse(uriB, options), options);\n      } else if (typeOf(uriB) === \"object\") {\n        uriB = serialize(uriB, options);\n      }\n      return uriA === uriB;\n    }\n    function escapeComponent(str, options) {\n      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);\n    }\n    function unescapeComponent(str, options) {\n      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);\n    }\n    var handler = {\n      scheme: \"http\",\n      domainHost: true,\n      parse: function parse(components, options) {\n        if (!components.host) {\n          components.error = components.error || \"HTTP URIs must have a host.\";\n        }\n        return components;\n      },\n      serialize: function serialize(components, options) {\n        var secure = String(components.scheme).toLowerCase() === \"https\";\n        if (components.port === (secure ? 443 : 80) || components.port === \"\") {\n          components.port = undefined;\n        }\n        if (!components.path) {\n          components.path = \"/\";\n        }\n        return components;\n      }\n    };\n    var handler$1 = {\n      scheme: \"https\",\n      domainHost: handler.domainHost,\n      parse: handler.parse,\n      serialize: handler.serialize\n    };\n    function isSecure(wsComponents) {\n      return typeof wsComponents.secure === \"boolean\" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === \"wss\";\n    }\n    var handler$2 = {\n      scheme: \"ws\",\n      domainHost: true,\n      parse: function parse(components, options) {\n        var wsComponents = components;\n        wsComponents.secure = isSecure(wsComponents);\n        wsComponents.resourceName = (wsComponents.path || \"/\") + (wsComponents.query ? \"?\" + wsComponents.query : \"\");\n        wsComponents.path = undefined;\n        wsComponents.query = undefined;\n        return wsComponents;\n      },\n      serialize: function serialize(wsComponents, options) {\n        if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === \"\") {\n          wsComponents.port = undefined;\n        }\n        if (typeof wsComponents.secure === \"boolean\") {\n          wsComponents.scheme = wsComponents.secure ? \"wss\" : \"ws\";\n          wsComponents.secure = undefined;\n        }\n        if (wsComponents.resourceName) {\n          var _wsComponents$resourc = wsComponents.resourceName.split(\"?\"), _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2), path = _wsComponents$resourc2[0], query = _wsComponents$resourc2[1];\n          wsComponents.path = path && path !== \"/\" ? path : undefined;\n          wsComponents.query = query;\n          wsComponents.resourceName = undefined;\n        }\n        wsComponents.fragment = undefined;\n        return wsComponents;\n      }\n    };\n    var handler$3 = {\n      scheme: \"wss\",\n      domainHost: handler$2.domainHost,\n      parse: handler$2.parse,\n      serialize: handler$2.serialize\n    };\n    var O = {};\n    var isIRI = true;\n    var UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\n    var HEXDIG$$ = \"[0-9A-Fa-f]\";\n    var PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$));\n    var ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n    var QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\n    var VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\n    var SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\n    var UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\n    var PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\n    var NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", \"[\\\\\\\"]\", VCHAR$$), \"g\");\n    var NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\n    var NOT_HFVALUE = NOT_HFNAME;\n    function decodeUnreserved(str) {\n      var decStr = pctDecChars(str);\n      return !decStr.match(UNRESERVED) ? str : decStr;\n    }\n    var handler$4 = {\n      scheme: \"mailto\",\n      parse: function parse$$1(components, options) {\n        var mailtoComponents = components;\n        var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(\",\") : [];\n        mailtoComponents.path = undefined;\n        if (mailtoComponents.query) {\n          var unknownHeaders = false;\n          var headers = {};\n          var hfields = mailtoComponents.query.split(\"&\");\n          for (var x = 0, xl = hfields.length;x < xl; ++x) {\n            var hfield = hfields[x].split(\"=\");\n            switch (hfield[0]) {\n              case \"to\":\n                var toAddrs = hfield[1].split(\",\");\n                for (var _x = 0, _xl = toAddrs.length;_x < _xl; ++_x) {\n                  to.push(toAddrs[_x]);\n                }\n                break;\n              case \"subject\":\n                mailtoComponents.subject = unescapeComponent(hfield[1], options);\n                break;\n              case \"body\":\n                mailtoComponents.body = unescapeComponent(hfield[1], options);\n                break;\n              default:\n                unknownHeaders = true;\n                headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n                break;\n            }\n          }\n          if (unknownHeaders)\n            mailtoComponents.headers = headers;\n        }\n        mailtoComponents.query = undefined;\n        for (var _x2 = 0, _xl2 = to.length;_x2 < _xl2; ++_x2) {\n          var addr = to[_x2].split(\"@\");\n          addr[0] = unescapeComponent(addr[0]);\n          if (!options.unicodeSupport) {\n            try {\n              addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n            } catch (e) {\n              mailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n            }\n          } else {\n            addr[1] = unescapeComponent(addr[1], options).toLowerCase();\n          }\n          to[_x2] = addr.join(\"@\");\n        }\n        return mailtoComponents;\n      },\n      serialize: function serialize$$1(mailtoComponents, options) {\n        var components = mailtoComponents;\n        var to = toArray(mailtoComponents.to);\n        if (to) {\n          for (var x = 0, xl = to.length;x < xl; ++x) {\n            var toAddr = String(to[x]);\n            var atIdx = toAddr.lastIndexOf(\"@\");\n            var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n            var domain = toAddr.slice(atIdx + 1);\n            try {\n              domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);\n            } catch (e) {\n              components.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n            }\n            to[x] = localPart + \"@\" + domain;\n          }\n          components.path = to.join(\",\");\n        }\n        var headers = mailtoComponents.headers = mailtoComponents.headers || {};\n        if (mailtoComponents.subject)\n          headers[\"subject\"] = mailtoComponents.subject;\n        if (mailtoComponents.body)\n          headers[\"body\"] = mailtoComponents.body;\n        var fields = [];\n        for (var name in headers) {\n          if (headers[name] !== O[name]) {\n            fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + \"=\" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));\n          }\n        }\n        if (fields.length) {\n          components.query = fields.join(\"&\");\n        }\n        return components;\n      }\n    };\n    var URN_PARSE = /^([^\\:]+)\\:(.*)/;\n    var handler$5 = {\n      scheme: \"urn\",\n      parse: function parse$$1(components, options) {\n        var matches = components.path && components.path.match(URN_PARSE);\n        var urnComponents = components;\n        if (matches) {\n          var scheme = options.scheme || urnComponents.scheme || \"urn\";\n          var nid = matches[1].toLowerCase();\n          var nss = matches[2];\n          var urnScheme = scheme + \":\" + (options.nid || nid);\n          var schemeHandler = SCHEMES[urnScheme];\n          urnComponents.nid = nid;\n          urnComponents.nss = nss;\n          urnComponents.path = undefined;\n          if (schemeHandler) {\n            urnComponents = schemeHandler.parse(urnComponents, options);\n          }\n        } else {\n          urnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n        }\n        return urnComponents;\n      },\n      serialize: function serialize$$1(urnComponents, options) {\n        var scheme = options.scheme || urnComponents.scheme || \"urn\";\n        var nid = urnComponents.nid;\n        var urnScheme = scheme + \":\" + (options.nid || nid);\n        var schemeHandler = SCHEMES[urnScheme];\n        if (schemeHandler) {\n          urnComponents = schemeHandler.serialize(urnComponents, options);\n        }\n        var uriComponents = urnComponents;\n        var nss = urnComponents.nss;\n        uriComponents.path = (nid || options.nid) + \":\" + nss;\n        return uriComponents;\n      }\n    };\n    var UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\n    var handler$6 = {\n      scheme: \"urn:uuid\",\n      parse: function parse(urnComponents, options) {\n        var uuidComponents = urnComponents;\n        uuidComponents.uuid = uuidComponents.nss;\n        uuidComponents.nss = undefined;\n        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n          uuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n        }\n        return uuidComponents;\n      },\n      serialize: function serialize(uuidComponents, options) {\n        var urnComponents = uuidComponents;\n        urnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n        return urnComponents;\n      }\n    };\n    SCHEMES[handler.scheme] = handler;\n    SCHEMES[handler$1.scheme] = handler$1;\n    SCHEMES[handler$2.scheme] = handler$2;\n    SCHEMES[handler$3.scheme] = handler$3;\n    SCHEMES[handler$4.scheme] = handler$4;\n    SCHEMES[handler$5.scheme] = handler$5;\n    SCHEMES[handler$6.scheme] = handler$6;\n    exports2.SCHEMES = SCHEMES;\n    exports2.pctEncChar = pctEncChar;\n    exports2.pctDecChars = pctDecChars;\n    exports2.parse = parse;\n    exports2.removeDotSegments = removeDotSegments;\n    exports2.serialize = serialize;\n    exports2.resolveComponents = resolveComponents;\n    exports2.resolve = resolve;\n    exports2.normalize = normalize;\n    exports2.equal = equal;\n    exports2.escapeComponent = escapeComponent;\n    exports2.unescapeComponent = unescapeComponent;\n    Object.defineProperty(exports2, \"__esModule\", { value: true });\n  });\n});\n\n// ../node_modules/fast-deep-equal/index.js\nvar require_fast_deep_equal = __commonJS((exports, module) => {\n  module.exports = function equal(a, b) {\n    if (a === b)\n      return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n      if (a.constructor !== b.constructor)\n        return false;\n      var length, i, keys;\n      if (Array.isArray(a)) {\n        length = a.length;\n        if (length != b.length)\n          return false;\n        for (i = length;i-- !== 0; )\n          if (!equal(a[i], b[i]))\n            return false;\n        return true;\n      }\n      if (a.constructor === RegExp)\n        return a.source === b.source && a.flags === b.flags;\n      if (a.valueOf !== Object.prototype.valueOf)\n        return a.valueOf() === b.valueOf();\n      if (a.toString !== Object.prototype.toString)\n        return a.toString() === b.toString();\n      keys = Object.keys(a);\n      length = keys.length;\n      if (length !== Object.keys(b).length)\n        return false;\n      for (i = length;i-- !== 0; )\n        if (!Object.prototype.hasOwnProperty.call(b, keys[i]))\n          return false;\n      for (i = length;i-- !== 0; ) {\n        var key = keys[i];\n        if (!equal(a[key], b[key]))\n          return false;\n      }\n      return true;\n    }\n    return a !== a && b !== b;\n  };\n});\n\n// ../node_modules/ajv/lib/compile/ucs2length.js\nvar require_ucs2length = __commonJS((exports, module) => {\n  module.exports = function ucs2length(str) {\n    var length = 0, len = str.length, pos = 0, value;\n    while (pos < len) {\n      length++;\n      value = str.charCodeAt(pos++);\n      if (value >= 55296 && value <= 56319 && pos < len) {\n        value = str.charCodeAt(pos);\n        if ((value & 64512) == 56320)\n          pos++;\n      }\n    }\n    return length;\n  };\n});\n\n// ../node_modules/ajv/lib/compile/util.js\nvar require_util = __commonJS((exports, module) => {\n  module.exports = {\n    copy,\n    checkDataType,\n    checkDataTypes,\n    coerceToTypes,\n    toHash,\n    getProperty,\n    escapeQuotes,\n    equal: require_fast_deep_equal(),\n    ucs2length: require_ucs2length(),\n    varOccurences,\n    varReplace,\n    schemaHasRules,\n    schemaHasRulesExcept,\n    schemaUnknownRules,\n    toQuotedString,\n    getPathExpr,\n    getPath,\n    getData,\n    unescapeFragment,\n    unescapeJsonPointer,\n    escapeFragment,\n    escapeJsonPointer\n  };\n  function copy(o, to) {\n    to = to || {};\n    for (var key in o)\n      to[key] = o[key];\n    return to;\n  }\n  function checkDataType(dataType, data, strictNumbers, negate) {\n    var EQUAL = negate ? \" !== \" : \" === \", AND = negate ? \" || \" : \" && \", OK2 = negate ? \"!\" : \"\", NOT = negate ? \"\" : \"!\";\n    switch (dataType) {\n      case \"null\":\n        return data + EQUAL + \"null\";\n      case \"array\":\n        return OK2 + \"Array.isArray(\" + data + \")\";\n      case \"object\":\n        return \"(\" + OK2 + data + AND + \"typeof \" + data + EQUAL + '\"object\"' + AND + NOT + \"Array.isArray(\" + data + \"))\";\n      case \"integer\":\n        return \"(typeof \" + data + EQUAL + '\"number\"' + AND + NOT + \"(\" + data + \" % 1)\" + AND + data + EQUAL + data + (strictNumbers ? AND + OK2 + \"isFinite(\" + data + \")\" : \"\") + \")\";\n      case \"number\":\n        return \"(typeof \" + data + EQUAL + '\"' + dataType + '\"' + (strictNumbers ? AND + OK2 + \"isFinite(\" + data + \")\" : \"\") + \")\";\n      default:\n        return \"typeof \" + data + EQUAL + '\"' + dataType + '\"';\n    }\n  }\n  function checkDataTypes(dataTypes, data, strictNumbers) {\n    switch (dataTypes.length) {\n      case 1:\n        return checkDataType(dataTypes[0], data, strictNumbers, true);\n      default:\n        var code = \"\";\n        var types2 = toHash(dataTypes);\n        if (types2.array && types2.object) {\n          code = types2.null ? \"(\" : \"(!\" + data + \" || \";\n          code += \"typeof \" + data + ' !== \"object\")';\n          delete types2.null;\n          delete types2.array;\n          delete types2.object;\n        }\n        if (types2.number)\n          delete types2.integer;\n        for (var t in types2)\n          code += (code ? \" && \" : \"\") + checkDataType(t, data, strictNumbers, true);\n        return code;\n    }\n  }\n  var COERCE_TO_TYPES = toHash([\"string\", \"number\", \"integer\", \"boolean\", \"null\"]);\n  function coerceToTypes(optionCoerceTypes, dataTypes) {\n    if (Array.isArray(dataTypes)) {\n      var types2 = [];\n      for (var i = 0;i < dataTypes.length; i++) {\n        var t = dataTypes[i];\n        if (COERCE_TO_TYPES[t])\n          types2[types2.length] = t;\n        else if (optionCoerceTypes === \"array\" && t === \"array\")\n          types2[types2.length] = t;\n      }\n      if (types2.length)\n        return types2;\n    } else if (COERCE_TO_TYPES[dataTypes]) {\n      return [dataTypes];\n    } else if (optionCoerceTypes === \"array\" && dataTypes === \"array\") {\n      return [\"array\"];\n    }\n  }\n  function toHash(arr) {\n    var hash = {};\n    for (var i = 0;i < arr.length; i++)\n      hash[arr[i]] = true;\n    return hash;\n  }\n  var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\n  var SINGLE_QUOTE = /'|\\\\/g;\n  function getProperty(key) {\n    return typeof key == \"number\" ? \"[\" + key + \"]\" : IDENTIFIER.test(key) ? \".\" + key : \"['\" + escapeQuotes(key) + \"']\";\n  }\n  function escapeQuotes(str) {\n    return str.replace(SINGLE_QUOTE, \"\\\\$&\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\f/g, \"\\\\f\").replace(/\\t/g, \"\\\\t\");\n  }\n  function varOccurences(str, dataVar) {\n    dataVar += \"[^0-9]\";\n    var matches = str.match(new RegExp(dataVar, \"g\"));\n    return matches ? matches.length : 0;\n  }\n  function varReplace(str, dataVar, expr) {\n    dataVar += \"([^0-9])\";\n    expr = expr.replace(/\\$/g, \"$$$$\");\n    return str.replace(new RegExp(dataVar, \"g\"), expr + \"$1\");\n  }\n  function schemaHasRules(schema, rules) {\n    if (typeof schema == \"boolean\")\n      return !schema;\n    for (var key in schema)\n      if (rules[key])\n        return true;\n  }\n  function schemaHasRulesExcept(schema, rules, exceptKeyword) {\n    if (typeof schema == \"boolean\")\n      return !schema && exceptKeyword != \"not\";\n    for (var key in schema)\n      if (key != exceptKeyword && rules[key])\n        return true;\n  }\n  function schemaUnknownRules(schema, rules) {\n    if (typeof schema == \"boolean\")\n      return;\n    for (var key in schema)\n      if (!rules[key])\n        return key;\n  }\n  function toQuotedString(str) {\n    return \"'\" + escapeQuotes(str) + \"'\";\n  }\n  function getPathExpr(currentPath, expr, jsonPointers, isNumber) {\n    var path = jsonPointers ? \"'/' + \" + expr + (isNumber ? \"\" : \".replace(/~/g, '~0').replace(/\\\\//g, '~1')\") : isNumber ? \"'[' + \" + expr + \" + ']'\" : \"'[\\\\'' + \" + expr + \" + '\\\\']'\";\n    return joinPaths(currentPath, path);\n  }\n  function getPath(currentPath, prop, jsonPointers) {\n    var path = jsonPointers ? toQuotedString(\"/\" + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));\n    return joinPaths(currentPath, path);\n  }\n  var JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/;\n  var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/;\n  function getData($data, lvl, paths) {\n    var up, jsonPointer, data, matches;\n    if ($data === \"\")\n      return \"rootData\";\n    if ($data[0] == \"/\") {\n      if (!JSON_POINTER.test($data))\n        throw new Error(\"Invalid JSON-pointer: \" + $data);\n      jsonPointer = $data;\n      data = \"rootData\";\n    } else {\n      matches = $data.match(RELATIVE_JSON_POINTER);\n      if (!matches)\n        throw new Error(\"Invalid JSON-pointer: \" + $data);\n      up = +matches[1];\n      jsonPointer = matches[2];\n      if (jsonPointer == \"#\") {\n        if (up >= lvl)\n          throw new Error(\"Cannot access property/index \" + up + \" levels up, current level is \" + lvl);\n        return paths[lvl - up];\n      }\n      if (up > lvl)\n        throw new Error(\"Cannot access data \" + up + \" levels up, current level is \" + lvl);\n      data = \"data\" + (lvl - up || \"\");\n      if (!jsonPointer)\n        return data;\n    }\n    var expr = data;\n    var segments = jsonPointer.split(\"/\");\n    for (var i = 0;i < segments.length; i++) {\n      var segment = segments[i];\n      if (segment) {\n        data += getProperty(unescapeJsonPointer(segment));\n        expr += \" && \" + data;\n      }\n    }\n    return expr;\n  }\n  function joinPaths(a, b) {\n    if (a == '\"\"')\n      return b;\n    return (a + \" + \" + b).replace(/([^\\\\])' \\+ '/g, \"$1\");\n  }\n  function unescapeFragment(str) {\n    return unescapeJsonPointer(decodeURIComponent(str));\n  }\n  function escapeFragment(str) {\n    return encodeURIComponent(escapeJsonPointer(str));\n  }\n  function escapeJsonPointer(str) {\n    return str.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n  }\n  function unescapeJsonPointer(str) {\n    return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n  }\n});\n\n// ../node_modules/ajv/lib/compile/schema_obj.js\nvar require_schema_obj = __commonJS((exports, module) => {\n  var util3 = require_util();\n  module.exports = SchemaObject;\n  function SchemaObject(obj) {\n    util3.copy(obj, this);\n  }\n});\n\n// ../node_modules/json-schema-traverse/index.js\nvar require_json_schema_traverse = __commonJS((exports, module) => {\n  var traverse = module.exports = function(schema, opts, cb) {\n    if (typeof opts == \"function\") {\n      cb = opts;\n      opts = {};\n    }\n    cb = opts.cb || cb;\n    var pre = typeof cb == \"function\" ? cb : cb.pre || function() {};\n    var post = cb.post || function() {};\n    _traverse(opts, pre, post, schema, \"\", schema);\n  };\n  traverse.keywords = {\n    additionalItems: true,\n    items: true,\n    contains: true,\n    additionalProperties: true,\n    propertyNames: true,\n    not: true\n  };\n  traverse.arrayKeywords = {\n    items: true,\n    allOf: true,\n    anyOf: true,\n    oneOf: true\n  };\n  traverse.propsKeywords = {\n    definitions: true,\n    properties: true,\n    patternProperties: true,\n    dependencies: true\n  };\n  traverse.skipKeywords = {\n    default: true,\n    enum: true,\n    const: true,\n    required: true,\n    maximum: true,\n    minimum: true,\n    exclusiveMaximum: true,\n    exclusiveMinimum: true,\n    multipleOf: true,\n    maxLength: true,\n    minLength: true,\n    pattern: true,\n    format: true,\n    maxItems: true,\n    minItems: true,\n    uniqueItems: true,\n    maxProperties: true,\n    minProperties: true\n  };\n  function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n    if (schema && typeof schema == \"object\" && !Array.isArray(schema)) {\n      pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n      for (var key in schema) {\n        var sch = schema[key];\n        if (Array.isArray(sch)) {\n          if (key in traverse.arrayKeywords) {\n            for (var i = 0;i < sch.length; i++)\n              _traverse(opts, pre, post, sch[i], jsonPtr + \"/\" + key + \"/\" + i, rootSchema, jsonPtr, key, schema, i);\n          }\n        } else if (key in traverse.propsKeywords) {\n          if (sch && typeof sch == \"object\") {\n            for (var prop in sch)\n              _traverse(opts, pre, post, sch[prop], jsonPtr + \"/\" + key + \"/\" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);\n          }\n        } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {\n          _traverse(opts, pre, post, sch, jsonPtr + \"/\" + key, rootSchema, jsonPtr, key, schema);\n        }\n      }\n      post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n    }\n  }\n  function escapeJsonPtr(str) {\n    return str.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n  }\n});\n\n// ../node_modules/ajv/lib/compile/resolve.js\nvar require_resolve = __commonJS((exports, module) => {\n  var URI = require_uri_all();\n  var equal = require_fast_deep_equal();\n  var util3 = require_util();\n  var SchemaObject = require_schema_obj();\n  var traverse = require_json_schema_traverse();\n  module.exports = resolve;\n  resolve.normalizeId = normalizeId;\n  resolve.fullPath = getFullPath;\n  resolve.url = resolveUrl;\n  resolve.ids = resolveIds;\n  resolve.inlineRef = inlineRef;\n  resolve.schema = resolveSchema;\n  function resolve(compile, root2, ref) {\n    var refVal = this._refs[ref];\n    if (typeof refVal == \"string\") {\n      if (this._refs[refVal])\n        refVal = this._refs[refVal];\n      else\n        return resolve.call(this, compile, root2, refVal);\n    }\n    refVal = refVal || this._schemas[ref];\n    if (refVal instanceof SchemaObject) {\n      return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);\n    }\n    var res = resolveSchema.call(this, root2, ref);\n    var schema, v, baseId;\n    if (res) {\n      schema = res.schema;\n      root2 = res.root;\n      baseId = res.baseId;\n    }\n    if (schema instanceof SchemaObject) {\n      v = schema.validate || compile.call(this, schema.schema, root2, undefined, baseId);\n    } else if (schema !== undefined) {\n      v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root2, undefined, baseId);\n    }\n    return v;\n  }\n  function resolveSchema(root2, ref) {\n    var p = URI.parse(ref), refPath = _getFullPath(p), baseId = getFullPath(this._getId(root2.schema));\n    if (Object.keys(root2.schema).length === 0 || refPath !== baseId) {\n      var id = normalizeId(refPath);\n      var refVal = this._refs[id];\n      if (typeof refVal == \"string\") {\n        return resolveRecursive.call(this, root2, refVal, p);\n      } else if (refVal instanceof SchemaObject) {\n        if (!refVal.validate)\n          this._compile(refVal);\n        root2 = refVal;\n      } else {\n        refVal = this._schemas[id];\n        if (refVal instanceof SchemaObject) {\n          if (!refVal.validate)\n            this._compile(refVal);\n          if (id == normalizeId(ref))\n            return { schema: refVal, root: root2, baseId };\n          root2 = refVal;\n        } else {\n          return;\n        }\n      }\n      if (!root2.schema)\n        return;\n      baseId = getFullPath(this._getId(root2.schema));\n    }\n    return getJsonPointer.call(this, p, baseId, root2.schema, root2);\n  }\n  function resolveRecursive(root2, ref, parsedRef) {\n    var res = resolveSchema.call(this, root2, ref);\n    if (res) {\n      var schema = res.schema;\n      var baseId = res.baseId;\n      root2 = res.root;\n      var id = this._getId(schema);\n      if (id)\n        baseId = resolveUrl(baseId, id);\n      return getJsonPointer.call(this, parsedRef, baseId, schema, root2);\n    }\n  }\n  var PREVENT_SCOPE_CHANGE = util3.toHash([\"properties\", \"patternProperties\", \"enum\", \"dependencies\", \"definitions\"]);\n  function getJsonPointer(parsedRef, baseId, schema, root2) {\n    parsedRef.fragment = parsedRef.fragment || \"\";\n    if (parsedRef.fragment.slice(0, 1) != \"/\")\n      return;\n    var parts = parsedRef.fragment.split(\"/\");\n    for (var i = 1;i < parts.length; i++) {\n      var part = parts[i];\n      if (part) {\n        part = util3.unescapeFragment(part);\n        schema = schema[part];\n        if (schema === undefined)\n          break;\n        var id;\n        if (!PREVENT_SCOPE_CHANGE[part]) {\n          id = this._getId(schema);\n          if (id)\n            baseId = resolveUrl(baseId, id);\n          if (schema.$ref) {\n            var $ref = resolveUrl(baseId, schema.$ref);\n            var res = resolveSchema.call(this, root2, $ref);\n            if (res) {\n              schema = res.schema;\n              root2 = res.root;\n              baseId = res.baseId;\n            }\n          }\n        }\n      }\n    }\n    if (schema !== undefined && schema !== root2.schema)\n      return { schema, root: root2, baseId };\n  }\n  var SIMPLE_INLINED = util3.toHash([\n    \"type\",\n    \"format\",\n    \"pattern\",\n    \"maxLength\",\n    \"minLength\",\n    \"maxProperties\",\n    \"minProperties\",\n    \"maxItems\",\n    \"minItems\",\n    \"maximum\",\n    \"minimum\",\n    \"uniqueItems\",\n    \"multipleOf\",\n    \"required\",\n    \"enum\"\n  ]);\n  function inlineRef(schema, limit) {\n    if (limit === false)\n      return false;\n    if (limit === undefined || limit === true)\n      return checkNoRef(schema);\n    else if (limit)\n      return countKeys(schema) <= limit;\n  }\n  function checkNoRef(schema) {\n    var item;\n    if (Array.isArray(schema)) {\n      for (var i = 0;i < schema.length; i++) {\n        item = schema[i];\n        if (typeof item == \"object\" && !checkNoRef(item))\n          return false;\n      }\n    } else {\n      for (var key in schema) {\n        if (key == \"$ref\")\n          return false;\n        item = schema[key];\n        if (typeof item == \"object\" && !checkNoRef(item))\n          return false;\n      }\n    }\n    return true;\n  }\n  function countKeys(schema) {\n    var count = 0, item;\n    if (Array.isArray(schema)) {\n      for (var i = 0;i < schema.length; i++) {\n        item = schema[i];\n        if (typeof item == \"object\")\n          count += countKeys(item);\n        if (count == Infinity)\n          return Infinity;\n      }\n    } else {\n      for (var key in schema) {\n        if (key == \"$ref\")\n          return Infinity;\n        if (SIMPLE_INLINED[key]) {\n          count++;\n        } else {\n          item = schema[key];\n          if (typeof item == \"object\")\n            count += countKeys(item) + 1;\n          if (count == Infinity)\n            return Infinity;\n        }\n      }\n    }\n    return count;\n  }\n  function getFullPath(id, normalize) {\n    if (normalize !== false)\n      id = normalizeId(id);\n    var p = URI.parse(id);\n    return _getFullPath(p);\n  }\n  function _getFullPath(p) {\n    return URI.serialize(p).split(\"#\")[0] + \"#\";\n  }\n  var TRAILING_SLASH_HASH = /#\\/?$/;\n  function normalizeId(id) {\n    return id ? id.replace(TRAILING_SLASH_HASH, \"\") : \"\";\n  }\n  function resolveUrl(baseId, id) {\n    id = normalizeId(id);\n    return URI.resolve(baseId, id);\n  }\n  function resolveIds(schema) {\n    var schemaId = normalizeId(this._getId(schema));\n    var baseIds = { \"\": schemaId };\n    var fullPaths = { \"\": getFullPath(schemaId, false) };\n    var localRefs = {};\n    var self2 = this;\n    traverse(schema, { allKeys: true }, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n      if (jsonPtr === \"\")\n        return;\n      var id = self2._getId(sch);\n      var baseId = baseIds[parentJsonPtr];\n      var fullPath = fullPaths[parentJsonPtr] + \"/\" + parentKeyword;\n      if (keyIndex !== undefined)\n        fullPath += \"/\" + (typeof keyIndex == \"number\" ? keyIndex : util3.escapeFragment(keyIndex));\n      if (typeof id == \"string\") {\n        id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);\n        var refVal = self2._refs[id];\n        if (typeof refVal == \"string\")\n          refVal = self2._refs[refVal];\n        if (refVal && refVal.schema) {\n          if (!equal(sch, refVal.schema))\n            throw new Error('id \"' + id + '\" resolves to more than one schema');\n        } else if (id != normalizeId(fullPath)) {\n          if (id[0] == \"#\") {\n            if (localRefs[id] && !equal(sch, localRefs[id]))\n              throw new Error('id \"' + id + '\" resolves to more than one schema');\n            localRefs[id] = sch;\n          } else {\n            self2._refs[id] = fullPath;\n          }\n        }\n      }\n      baseIds[jsonPtr] = baseId;\n      fullPaths[jsonPtr] = fullPath;\n    });\n    return localRefs;\n  }\n});\n\n// ../node_modules/ajv/lib/compile/error_classes.js\nvar require_error_classes = __commonJS((exports, module) => {\n  var resolve = require_resolve();\n  module.exports = {\n    Validation: errorSubclass(ValidationError),\n    MissingRef: errorSubclass(MissingRefError)\n  };\n  function ValidationError(errors2) {\n    this.message = \"validation failed\";\n    this.errors = errors2;\n    this.ajv = this.validation = true;\n  }\n  MissingRefError.message = function(baseId, ref) {\n    return \"can't resolve reference \" + ref + \" from id \" + baseId;\n  };\n  function MissingRefError(baseId, ref, message) {\n    this.message = message || MissingRefError.message(baseId, ref);\n    this.missingRef = resolve.url(baseId, ref);\n    this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));\n  }\n  function errorSubclass(Subclass) {\n    Subclass.prototype = Object.create(Error.prototype);\n    Subclass.prototype.constructor = Subclass;\n    return Subclass;\n  }\n});\n\n// ../node_modules/fast-json-stable-stringify/index.js\nvar require_fast_json_stable_stringify = __commonJS((exports, module) => {\n  module.exports = function(data, opts) {\n    if (!opts)\n      opts = {};\n    if (typeof opts === \"function\")\n      opts = { cmp: opts };\n    var cycles = typeof opts.cycles === \"boolean\" ? opts.cycles : false;\n    var cmp = opts.cmp && function(f) {\n      return function(node) {\n        return function(a, b) {\n          var aobj = { key: a, value: node[a] };\n          var bobj = { key: b, value: node[b] };\n          return f(aobj, bobj);\n        };\n      };\n    }(opts.cmp);\n    var seen = [];\n    return function stringify(node) {\n      if (node && node.toJSON && typeof node.toJSON === \"function\") {\n        node = node.toJSON();\n      }\n      if (node === undefined)\n        return;\n      if (typeof node == \"number\")\n        return isFinite(node) ? \"\" + node : \"null\";\n      if (typeof node !== \"object\")\n        return JSON.stringify(node);\n      var i, out;\n      if (Array.isArray(node)) {\n        out = \"[\";\n        for (i = 0;i < node.length; i++) {\n          if (i)\n            out += \",\";\n          out += stringify(node[i]) || \"null\";\n        }\n        return out + \"]\";\n      }\n      if (node === null)\n        return \"null\";\n      if (seen.indexOf(node) !== -1) {\n        if (cycles)\n          return JSON.stringify(\"__cycle__\");\n        throw new TypeError(\"Converting circular structure to JSON\");\n      }\n      var seenIndex = seen.push(node) - 1;\n      var keys = Object.keys(node).sort(cmp && cmp(node));\n      out = \"\";\n      for (i = 0;i < keys.length; i++) {\n        var key = keys[i];\n        var value = stringify(node[key]);\n        if (!value)\n          continue;\n        if (out)\n          out += \",\";\n        out += JSON.stringify(key) + \":\" + value;\n      }\n      seen.splice(seenIndex, 1);\n      return \"{\" + out + \"}\";\n    }(data);\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/validate.js\nvar require_validate = __commonJS((exports, module) => {\n  module.exports = function generate_validate(it, $keyword, $ruleType) {\n    var out = \"\";\n    var $async = it.schema.$async === true, $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, \"$ref\"), $id = it.self._getId(it.schema);\n    if (it.opts.strictKeywords) {\n      var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);\n      if ($unknownKwd) {\n        var $keywordsMsg = \"unknown keyword: \" + $unknownKwd;\n        if (it.opts.strictKeywords === \"log\")\n          it.logger.warn($keywordsMsg);\n        else\n          throw new Error($keywordsMsg);\n      }\n    }\n    if (it.isTop) {\n      out += \" var validate = \";\n      if ($async) {\n        it.async = true;\n        out += \"async \";\n      }\n      out += \"function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; \";\n      if ($id && (it.opts.sourceCode || it.opts.processCode)) {\n        out += \" \" + (\"/*# sourceURL=\" + $id + \" */\") + \" \";\n      }\n    }\n    if (typeof it.schema == \"boolean\" || !($refKeywords || it.schema.$ref)) {\n      var $keyword = \"false schema\";\n      var $lvl = it.level;\n      var $dataLvl = it.dataLevel;\n      var $schema = it.schema[$keyword];\n      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n      var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n      var $breakOnError = !it.opts.allErrors;\n      var $errorKeyword;\n      var $data = \"data\" + ($dataLvl || \"\");\n      var $valid = \"valid\" + $lvl;\n      if (it.schema === false) {\n        if (it.isTop) {\n          $breakOnError = true;\n        } else {\n          out += \" var \" + $valid + \" = false; \";\n        }\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = \"\";\n        if (it.createErrors !== false) {\n          out += \" { keyword: '\" + ($errorKeyword || \"false schema\") + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: {} \";\n          if (it.opts.messages !== false) {\n            out += \" , message: 'boolean schema is false' \";\n          }\n          if (it.opts.verbose) {\n            out += \" , schema: false , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n          }\n          out += \" } \";\n        } else {\n          out += \" {} \";\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          if (it.async) {\n            out += \" throw new ValidationError([\" + __err + \"]); \";\n          } else {\n            out += \" validate.errors = [\" + __err + \"]; return false; \";\n          }\n        } else {\n          out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n        }\n      } else {\n        if (it.isTop) {\n          if ($async) {\n            out += \" return data; \";\n          } else {\n            out += \" validate.errors = null; return true; \";\n          }\n        } else {\n          out += \" var \" + $valid + \" = true; \";\n        }\n      }\n      if (it.isTop) {\n        out += \" }; return validate; \";\n      }\n      return out;\n    }\n    if (it.isTop) {\n      var $top = it.isTop, $lvl = it.level = 0, $dataLvl = it.dataLevel = 0, $data = \"data\";\n      it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));\n      it.baseId = it.baseId || it.rootId;\n      delete it.isTop;\n      it.dataPathArr = [\"\"];\n      if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {\n        var $defaultMsg = \"default is ignored in the schema root\";\n        if (it.opts.strictDefaults === \"log\")\n          it.logger.warn($defaultMsg);\n        else\n          throw new Error($defaultMsg);\n      }\n      out += \" var vErrors = null; \";\n      out += \" var errors = 0;     \";\n      out += \" if (rootData === undefined) rootData = data; \";\n    } else {\n      var { level: $lvl, dataLevel: $dataLvl } = it, $data = \"data\" + ($dataLvl || \"\");\n      if ($id)\n        it.baseId = it.resolve.url(it.baseId, $id);\n      if ($async && !it.async)\n        throw new Error(\"async schema in sync schema\");\n      out += \" var errs_\" + $lvl + \" = errors;\";\n    }\n    var $valid = \"valid\" + $lvl, $breakOnError = !it.opts.allErrors, $closingBraces1 = \"\", $closingBraces2 = \"\";\n    var $errorKeyword;\n    var $typeSchema = it.schema.type, $typeIsArray = Array.isArray($typeSchema);\n    if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {\n      if ($typeIsArray) {\n        if ($typeSchema.indexOf(\"null\") == -1)\n          $typeSchema = $typeSchema.concat(\"null\");\n      } else if ($typeSchema != \"null\") {\n        $typeSchema = [$typeSchema, \"null\"];\n        $typeIsArray = true;\n      }\n    }\n    if ($typeIsArray && $typeSchema.length == 1) {\n      $typeSchema = $typeSchema[0];\n      $typeIsArray = false;\n    }\n    if (it.schema.$ref && $refKeywords) {\n      if (it.opts.extendRefs == \"fail\") {\n        throw new Error('$ref: validation keywords used in schema at path \"' + it.errSchemaPath + '\" (see option extendRefs)');\n      } else if (it.opts.extendRefs !== true) {\n        $refKeywords = false;\n        it.logger.warn('$ref: keywords ignored in schema at path \"' + it.errSchemaPath + '\"');\n      }\n    }\n    if (it.schema.$comment && it.opts.$comment) {\n      out += \" \" + it.RULES.all.$comment.code(it, \"$comment\");\n    }\n    if ($typeSchema) {\n      if (it.opts.coerceTypes) {\n        var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);\n      }\n      var $rulesGroup = it.RULES.types[$typeSchema];\n      if ($coerceToTypes || $typeIsArray || $rulesGroup === true || $rulesGroup && !$shouldUseGroup($rulesGroup)) {\n        var $schemaPath = it.schemaPath + \".type\", $errSchemaPath = it.errSchemaPath + \"/type\";\n        var $schemaPath = it.schemaPath + \".type\", $errSchemaPath = it.errSchemaPath + \"/type\", $method = $typeIsArray ? \"checkDataTypes\" : \"checkDataType\";\n        out += \" if (\" + it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true) + \") { \";\n        if ($coerceToTypes) {\n          var $dataType = \"dataType\" + $lvl, $coerced = \"coerced\" + $lvl;\n          out += \" var \" + $dataType + \" = typeof \" + $data + \"; var \" + $coerced + \" = undefined; \";\n          if (it.opts.coerceTypes == \"array\") {\n            out += \" if (\" + $dataType + \" == 'object' && Array.isArray(\" + $data + \") && \" + $data + \".length == 1) { \" + $data + \" = \" + $data + \"[0]; \" + $dataType + \" = typeof \" + $data + \"; if (\" + it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers) + \") \" + $coerced + \" = \" + $data + \"; } \";\n          }\n          out += \" if (\" + $coerced + \" !== undefined) ; \";\n          var arr1 = $coerceToTypes;\n          if (arr1) {\n            var $type, $i = -1, l1 = arr1.length - 1;\n            while ($i < l1) {\n              $type = arr1[$i += 1];\n              if ($type == \"string\") {\n                out += \" else if (\" + $dataType + \" == 'number' || \" + $dataType + \" == 'boolean') \" + $coerced + \" = '' + \" + $data + \"; else if (\" + $data + \" === null) \" + $coerced + \" = ''; \";\n              } else if ($type == \"number\" || $type == \"integer\") {\n                out += \" else if (\" + $dataType + \" == 'boolean' || \" + $data + \" === null || (\" + $dataType + \" == 'string' && \" + $data + \" && \" + $data + \" == +\" + $data + \" \";\n                if ($type == \"integer\") {\n                  out += \" && !(\" + $data + \" % 1)\";\n                }\n                out += \")) \" + $coerced + \" = +\" + $data + \"; \";\n              } else if ($type == \"boolean\") {\n                out += \" else if (\" + $data + \" === 'false' || \" + $data + \" === 0 || \" + $data + \" === null) \" + $coerced + \" = false; else if (\" + $data + \" === 'true' || \" + $data + \" === 1) \" + $coerced + \" = true; \";\n              } else if ($type == \"null\") {\n                out += \" else if (\" + $data + \" === '' || \" + $data + \" === 0 || \" + $data + \" === false) \" + $coerced + \" = null; \";\n              } else if (it.opts.coerceTypes == \"array\" && $type == \"array\") {\n                out += \" else if (\" + $dataType + \" == 'string' || \" + $dataType + \" == 'number' || \" + $dataType + \" == 'boolean' || \" + $data + \" == null) \" + $coerced + \" = [\" + $data + \"]; \";\n              }\n            }\n          }\n          out += \" else {   \";\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = \"\";\n          if (it.createErrors !== false) {\n            out += \" { keyword: '\" + ($errorKeyword || \"type\") + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { type: '\";\n            if ($typeIsArray) {\n              out += \"\" + $typeSchema.join(\",\");\n            } else {\n              out += \"\" + $typeSchema;\n            }\n            out += \"' } \";\n            if (it.opts.messages !== false) {\n              out += \" , message: 'should be \";\n              if ($typeIsArray) {\n                out += \"\" + $typeSchema.join(\",\");\n              } else {\n                out += \"\" + $typeSchema;\n              }\n              out += \"' \";\n            }\n            if (it.opts.verbose) {\n              out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n            }\n            out += \" } \";\n          } else {\n            out += \" {} \";\n          }\n          var __err = out;\n          out = $$outStack.pop();\n          if (!it.compositeRule && $breakOnError) {\n            if (it.async) {\n              out += \" throw new ValidationError([\" + __err + \"]); \";\n            } else {\n              out += \" validate.errors = [\" + __err + \"]; return false; \";\n            }\n          } else {\n            out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n          }\n          out += \" } if (\" + $coerced + \" !== undefined) {  \";\n          var $parentData = $dataLvl ? \"data\" + ($dataLvl - 1 || \"\") : \"parentData\", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : \"parentDataProperty\";\n          out += \" \" + $data + \" = \" + $coerced + \"; \";\n          if (!$dataLvl) {\n            out += \"if (\" + $parentData + \" !== undefined)\";\n          }\n          out += \" \" + $parentData + \"[\" + $parentDataProperty + \"] = \" + $coerced + \"; } \";\n        } else {\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = \"\";\n          if (it.createErrors !== false) {\n            out += \" { keyword: '\" + ($errorKeyword || \"type\") + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { type: '\";\n            if ($typeIsArray) {\n              out += \"\" + $typeSchema.join(\",\");\n            } else {\n              out += \"\" + $typeSchema;\n            }\n            out += \"' } \";\n            if (it.opts.messages !== false) {\n              out += \" , message: 'should be \";\n              if ($typeIsArray) {\n                out += \"\" + $typeSchema.join(\",\");\n              } else {\n                out += \"\" + $typeSchema;\n              }\n              out += \"' \";\n            }\n            if (it.opts.verbose) {\n              out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n            }\n            out += \" } \";\n          } else {\n            out += \" {} \";\n          }\n          var __err = out;\n          out = $$outStack.pop();\n          if (!it.compositeRule && $breakOnError) {\n            if (it.async) {\n              out += \" throw new ValidationError([\" + __err + \"]); \";\n            } else {\n              out += \" validate.errors = [\" + __err + \"]; return false; \";\n            }\n          } else {\n            out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n          }\n        }\n        out += \" } \";\n      }\n    }\n    if (it.schema.$ref && !$refKeywords) {\n      out += \" \" + it.RULES.all.$ref.code(it, \"$ref\") + \" \";\n      if ($breakOnError) {\n        out += \" } if (errors === \";\n        if ($top) {\n          out += \"0\";\n        } else {\n          out += \"errs_\" + $lvl;\n        }\n        out += \") { \";\n        $closingBraces2 += \"}\";\n      }\n    } else {\n      var arr2 = it.RULES;\n      if (arr2) {\n        var $rulesGroup, i2 = -1, l2 = arr2.length - 1;\n        while (i2 < l2) {\n          $rulesGroup = arr2[i2 += 1];\n          if ($shouldUseGroup($rulesGroup)) {\n            if ($rulesGroup.type) {\n              out += \" if (\" + it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers) + \") { \";\n            }\n            if (it.opts.useDefaults) {\n              if ($rulesGroup.type == \"object\" && it.schema.properties) {\n                var $schema = it.schema.properties, $schemaKeys = Object.keys($schema);\n                var arr3 = $schemaKeys;\n                if (arr3) {\n                  var $propertyKey, i3 = -1, l3 = arr3.length - 1;\n                  while (i3 < l3) {\n                    $propertyKey = arr3[i3 += 1];\n                    var $sch = $schema[$propertyKey];\n                    if ($sch.default !== undefined) {\n                      var $passData = $data + it.util.getProperty($propertyKey);\n                      if (it.compositeRule) {\n                        if (it.opts.strictDefaults) {\n                          var $defaultMsg = \"default is ignored for: \" + $passData;\n                          if (it.opts.strictDefaults === \"log\")\n                            it.logger.warn($defaultMsg);\n                          else\n                            throw new Error($defaultMsg);\n                        }\n                      } else {\n                        out += \" if (\" + $passData + \" === undefined \";\n                        if (it.opts.useDefaults == \"empty\") {\n                          out += \" || \" + $passData + \" === null || \" + $passData + \" === '' \";\n                        }\n                        out += \" ) \" + $passData + \" = \";\n                        if (it.opts.useDefaults == \"shared\") {\n                          out += \" \" + it.useDefault($sch.default) + \" \";\n                        } else {\n                          out += \" \" + JSON.stringify($sch.default) + \" \";\n                        }\n                        out += \"; \";\n                      }\n                    }\n                  }\n                }\n              } else if ($rulesGroup.type == \"array\" && Array.isArray(it.schema.items)) {\n                var arr4 = it.schema.items;\n                if (arr4) {\n                  var $sch, $i = -1, l4 = arr4.length - 1;\n                  while ($i < l4) {\n                    $sch = arr4[$i += 1];\n                    if ($sch.default !== undefined) {\n                      var $passData = $data + \"[\" + $i + \"]\";\n                      if (it.compositeRule) {\n                        if (it.opts.strictDefaults) {\n                          var $defaultMsg = \"default is ignored for: \" + $passData;\n                          if (it.opts.strictDefaults === \"log\")\n                            it.logger.warn($defaultMsg);\n                          else\n                            throw new Error($defaultMsg);\n                        }\n                      } else {\n                        out += \" if (\" + $passData + \" === undefined \";\n                        if (it.opts.useDefaults == \"empty\") {\n                          out += \" || \" + $passData + \" === null || \" + $passData + \" === '' \";\n                        }\n                        out += \" ) \" + $passData + \" = \";\n                        if (it.opts.useDefaults == \"shared\") {\n                          out += \" \" + it.useDefault($sch.default) + \" \";\n                        } else {\n                          out += \" \" + JSON.stringify($sch.default) + \" \";\n                        }\n                        out += \"; \";\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            var arr5 = $rulesGroup.rules;\n            if (arr5) {\n              var $rule, i5 = -1, l5 = arr5.length - 1;\n              while (i5 < l5) {\n                $rule = arr5[i5 += 1];\n                if ($shouldUseRule($rule)) {\n                  var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);\n                  if ($code) {\n                    out += \" \" + $code + \" \";\n                    if ($breakOnError) {\n                      $closingBraces1 += \"}\";\n                    }\n                  }\n                }\n              }\n            }\n            if ($breakOnError) {\n              out += \" \" + $closingBraces1 + \" \";\n              $closingBraces1 = \"\";\n            }\n            if ($rulesGroup.type) {\n              out += \" } \";\n              if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {\n                out += \" else { \";\n                var $schemaPath = it.schemaPath + \".type\", $errSchemaPath = it.errSchemaPath + \"/type\";\n                var $$outStack = $$outStack || [];\n                $$outStack.push(out);\n                out = \"\";\n                if (it.createErrors !== false) {\n                  out += \" { keyword: '\" + ($errorKeyword || \"type\") + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { type: '\";\n                  if ($typeIsArray) {\n                    out += \"\" + $typeSchema.join(\",\");\n                  } else {\n                    out += \"\" + $typeSchema;\n                  }\n                  out += \"' } \";\n                  if (it.opts.messages !== false) {\n                    out += \" , message: 'should be \";\n                    if ($typeIsArray) {\n                      out += \"\" + $typeSchema.join(\",\");\n                    } else {\n                      out += \"\" + $typeSchema;\n                    }\n                    out += \"' \";\n                  }\n                  if (it.opts.verbose) {\n                    out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n                  }\n                  out += \" } \";\n                } else {\n                  out += \" {} \";\n                }\n                var __err = out;\n                out = $$outStack.pop();\n                if (!it.compositeRule && $breakOnError) {\n                  if (it.async) {\n                    out += \" throw new ValidationError([\" + __err + \"]); \";\n                  } else {\n                    out += \" validate.errors = [\" + __err + \"]; return false; \";\n                  }\n                } else {\n                  out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n                }\n                out += \" } \";\n              }\n            }\n            if ($breakOnError) {\n              out += \" if (errors === \";\n              if ($top) {\n                out += \"0\";\n              } else {\n                out += \"errs_\" + $lvl;\n              }\n              out += \") { \";\n              $closingBraces2 += \"}\";\n            }\n          }\n        }\n      }\n    }\n    if ($breakOnError) {\n      out += \" \" + $closingBraces2 + \" \";\n    }\n    if ($top) {\n      if ($async) {\n        out += \" if (errors === 0) return data;           \";\n        out += \" else throw new ValidationError(vErrors); \";\n      } else {\n        out += \" validate.errors = vErrors; \";\n        out += \" return errors === 0;       \";\n      }\n      out += \" }; return validate;\";\n    } else {\n      out += \" var \" + $valid + \" = errors === errs_\" + $lvl + \";\";\n    }\n    function $shouldUseGroup($rulesGroup2) {\n      var rules = $rulesGroup2.rules;\n      for (var i = 0;i < rules.length; i++)\n        if ($shouldUseRule(rules[i]))\n          return true;\n    }\n    function $shouldUseRule($rule2) {\n      return it.schema[$rule2.keyword] !== undefined || $rule2.implements && $ruleImplementsSomeKeyword($rule2);\n    }\n    function $ruleImplementsSomeKeyword($rule2) {\n      var impl = $rule2.implements;\n      for (var i = 0;i < impl.length; i++)\n        if (it.schema[impl[i]] !== undefined)\n          return true;\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/compile/index.js\nvar require_compile = __commonJS((exports, module) => {\n  var resolve = require_resolve();\n  var util3 = require_util();\n  var errorClasses = require_error_classes();\n  var stableStringify = require_fast_json_stable_stringify();\n  var validateGenerator = require_validate();\n  var ucs2length = util3.ucs2length;\n  var equal = require_fast_deep_equal();\n  var ValidationError = errorClasses.Validation;\n  module.exports = compile;\n  function compile(schema, root2, localRefs, baseId) {\n    var self2 = this, opts = this._opts, refVal = [undefined], refs = {}, patterns = [], patternsHash = {}, defaults = [], defaultsHash = {}, customRules = [];\n    root2 = root2 || { schema, refVal, refs };\n    var c = checkCompiling.call(this, schema, root2, baseId);\n    var compilation = this._compilations[c.index];\n    if (c.compiling)\n      return compilation.callValidate = callValidate;\n    var formats = this._formats;\n    var RULES = this.RULES;\n    try {\n      var v = localCompile(schema, root2, localRefs, baseId);\n      compilation.validate = v;\n      var cv = compilation.callValidate;\n      if (cv) {\n        cv.schema = v.schema;\n        cv.errors = null;\n        cv.refs = v.refs;\n        cv.refVal = v.refVal;\n        cv.root = v.root;\n        cv.$async = v.$async;\n        if (opts.sourceCode)\n          cv.source = v.source;\n      }\n      return v;\n    } finally {\n      endCompiling.call(this, schema, root2, baseId);\n    }\n    function callValidate() {\n      var validate = compilation.validate;\n      var result = validate.apply(this, arguments);\n      callValidate.errors = validate.errors;\n      return result;\n    }\n    function localCompile(_schema, _root, localRefs2, baseId2) {\n      var isRoot = !_root || _root && _root.schema == _schema;\n      if (_root.schema != root2.schema)\n        return compile.call(self2, _schema, _root, localRefs2, baseId2);\n      var $async = _schema.$async === true;\n      var sourceCode = validateGenerator({\n        isTop: true,\n        schema: _schema,\n        isRoot,\n        baseId: baseId2,\n        root: _root,\n        schemaPath: \"\",\n        errSchemaPath: \"#\",\n        errorPath: '\"\"',\n        MissingRefError: errorClasses.MissingRef,\n        RULES,\n        validate: validateGenerator,\n        util: util3,\n        resolve,\n        resolveRef,\n        usePattern,\n        useDefault,\n        useCustomRule,\n        opts,\n        formats,\n        logger: self2.logger,\n        self: self2\n      });\n      sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode) + sourceCode;\n      if (opts.processCode)\n        sourceCode = opts.processCode(sourceCode, _schema);\n      var validate;\n      try {\n        var makeValidate = new Function(\"self\", \"RULES\", \"formats\", \"root\", \"refVal\", \"defaults\", \"customRules\", \"equal\", \"ucs2length\", \"ValidationError\", sourceCode);\n        validate = makeValidate(self2, RULES, formats, root2, refVal, defaults, customRules, equal, ucs2length, ValidationError);\n        refVal[0] = validate;\n      } catch (e) {\n        self2.logger.error(\"Error compiling schema, function code:\", sourceCode);\n        throw e;\n      }\n      validate.schema = _schema;\n      validate.errors = null;\n      validate.refs = refs;\n      validate.refVal = refVal;\n      validate.root = isRoot ? validate : _root;\n      if ($async)\n        validate.$async = true;\n      if (opts.sourceCode === true) {\n        validate.source = {\n          code: sourceCode,\n          patterns,\n          defaults\n        };\n      }\n      return validate;\n    }\n    function resolveRef(baseId2, ref, isRoot) {\n      ref = resolve.url(baseId2, ref);\n      var refIndex = refs[ref];\n      var _refVal, refCode;\n      if (refIndex !== undefined) {\n        _refVal = refVal[refIndex];\n        refCode = \"refVal[\" + refIndex + \"]\";\n        return resolvedRef(_refVal, refCode);\n      }\n      if (!isRoot && root2.refs) {\n        var rootRefId = root2.refs[ref];\n        if (rootRefId !== undefined) {\n          _refVal = root2.refVal[rootRefId];\n          refCode = addLocalRef(ref, _refVal);\n          return resolvedRef(_refVal, refCode);\n        }\n      }\n      refCode = addLocalRef(ref);\n      var v2 = resolve.call(self2, localCompile, root2, ref);\n      if (v2 === undefined) {\n        var localSchema = localRefs && localRefs[ref];\n        if (localSchema) {\n          v2 = resolve.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile.call(self2, localSchema, root2, localRefs, baseId2);\n        }\n      }\n      if (v2 === undefined) {\n        removeLocalRef(ref);\n      } else {\n        replaceLocalRef(ref, v2);\n        return resolvedRef(v2, refCode);\n      }\n    }\n    function addLocalRef(ref, v2) {\n      var refId = refVal.length;\n      refVal[refId] = v2;\n      refs[ref] = refId;\n      return \"refVal\" + refId;\n    }\n    function removeLocalRef(ref) {\n      delete refs[ref];\n    }\n    function replaceLocalRef(ref, v2) {\n      var refId = refs[ref];\n      refVal[refId] = v2;\n    }\n    function resolvedRef(refVal2, code) {\n      return typeof refVal2 == \"object\" || typeof refVal2 == \"boolean\" ? { code, schema: refVal2, inline: true } : { code, $async: refVal2 && !!refVal2.$async };\n    }\n    function usePattern(regexStr) {\n      var index = patternsHash[regexStr];\n      if (index === undefined) {\n        index = patternsHash[regexStr] = patterns.length;\n        patterns[index] = regexStr;\n      }\n      return \"pattern\" + index;\n    }\n    function useDefault(value) {\n      switch (typeof value) {\n        case \"boolean\":\n        case \"number\":\n          return \"\" + value;\n        case \"string\":\n          return util3.toQuotedString(value);\n        case \"object\":\n          if (value === null)\n            return \"null\";\n          var valueStr = stableStringify(value);\n          var index = defaultsHash[valueStr];\n          if (index === undefined) {\n            index = defaultsHash[valueStr] = defaults.length;\n            defaults[index] = value;\n          }\n          return \"default\" + index;\n      }\n    }\n    function useCustomRule(rule, schema2, parentSchema, it) {\n      if (self2._opts.validateSchema !== false) {\n        var deps = rule.definition.dependencies;\n        if (deps && !deps.every(function(keyword) {\n          return Object.prototype.hasOwnProperty.call(parentSchema, keyword);\n        }))\n          throw new Error(\"parent schema must have all required keywords: \" + deps.join(\",\"));\n        var validateSchema = rule.definition.validateSchema;\n        if (validateSchema) {\n          var valid = validateSchema(schema2);\n          if (!valid) {\n            var message = \"keyword schema is invalid: \" + self2.errorsText(validateSchema.errors);\n            if (self2._opts.validateSchema == \"log\")\n              self2.logger.error(message);\n            else\n              throw new Error(message);\n          }\n        }\n      }\n      var compile2 = rule.definition.compile, inline = rule.definition.inline, macro = rule.definition.macro;\n      var validate;\n      if (compile2) {\n        validate = compile2.call(self2, schema2, parentSchema, it);\n      } else if (macro) {\n        validate = macro.call(self2, schema2, parentSchema, it);\n        if (opts.validateSchema !== false)\n          self2.validateSchema(validate, true);\n      } else if (inline) {\n        validate = inline.call(self2, it, rule.keyword, schema2, parentSchema);\n      } else {\n        validate = rule.definition.validate;\n        if (!validate)\n          return;\n      }\n      if (validate === undefined)\n        throw new Error('custom keyword \"' + rule.keyword + '\"failed to compile');\n      var index = customRules.length;\n      customRules[index] = validate;\n      return {\n        code: \"customRule\" + index,\n        validate\n      };\n    }\n  }\n  function checkCompiling(schema, root2, baseId) {\n    var index = compIndex.call(this, schema, root2, baseId);\n    if (index >= 0)\n      return { index, compiling: true };\n    index = this._compilations.length;\n    this._compilations[index] = {\n      schema,\n      root: root2,\n      baseId\n    };\n    return { index, compiling: false };\n  }\n  function endCompiling(schema, root2, baseId) {\n    var i = compIndex.call(this, schema, root2, baseId);\n    if (i >= 0)\n      this._compilations.splice(i, 1);\n  }\n  function compIndex(schema, root2, baseId) {\n    for (var i = 0;i < this._compilations.length; i++) {\n      var c = this._compilations[i];\n      if (c.schema == schema && c.root == root2 && c.baseId == baseId)\n        return i;\n    }\n    return -1;\n  }\n  function patternCode(i, patterns) {\n    return \"var pattern\" + i + \" = new RegExp(\" + util3.toQuotedString(patterns[i]) + \");\";\n  }\n  function defaultCode(i) {\n    return \"var default\" + i + \" = defaults[\" + i + \"];\";\n  }\n  function refValCode(i, refVal) {\n    return refVal[i] === undefined ? \"\" : \"var refVal\" + i + \" = refVal[\" + i + \"];\";\n  }\n  function customRuleCode(i) {\n    return \"var customRule\" + i + \" = customRules[\" + i + \"];\";\n  }\n  function vars(arr, statement) {\n    if (!arr.length)\n      return \"\";\n    var code = \"\";\n    for (var i = 0;i < arr.length; i++)\n      code += statement(i, arr);\n    return code;\n  }\n});\n\n// ../node_modules/ajv/lib/cache.js\nvar require_cache = __commonJS((exports, module) => {\n  var Cache = module.exports = function Cache() {\n    this._cache = {};\n  };\n  Cache.prototype.put = function Cache_put(key, value) {\n    this._cache[key] = value;\n  };\n  Cache.prototype.get = function Cache_get(key) {\n    return this._cache[key];\n  };\n  Cache.prototype.del = function Cache_del(key) {\n    delete this._cache[key];\n  };\n  Cache.prototype.clear = function Cache_clear() {\n    this._cache = {};\n  };\n});\n\n// ../node_modules/ajv/lib/compile/formats.js\nvar require_formats = __commonJS((exports, module) => {\n  var util3 = require_util();\n  var DATE = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/;\n  var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  var TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d(?::?\\d\\d)?)?$/i;\n  var HOSTNAME = /^(?=.{1,253}\\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\\.?$/i;\n  var URI = /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\n  var URIREF = /^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'\"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\n  var URITEMPLATE = /^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i;\n  var URL2 = /^(?:(?:http[s\\u017F]?|ftp):\\/\\/)(?:(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+(?::(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?@)?(?:(?!10(?:\\.[0-9]{1,3}){3})(?!127(?:\\.[0-9]{1,3}){3})(?!169\\.254(?:\\.[0-9]{1,3}){2})(?!192\\.168(?:\\.[0-9]{1,3}){2})(?!172\\.(?:1[6-9]|2[0-9]|3[01])(?:\\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-)*(?:[0-9a-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)(?:\\.(?:(?:[0-9a-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-)*(?:[0-9a-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)*(?:\\.(?:(?:[a-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\\/(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?$/i;\n  var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;\n  var JSON_POINTER = /^(?:\\/(?:[^~/]|~0|~1)*)*$/;\n  var JSON_POINTER_URI_FRAGMENT = /^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;\n  var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/;\n  module.exports = formats;\n  function formats(mode) {\n    mode = mode == \"full\" ? \"full\" : \"fast\";\n    return util3.copy(formats[mode]);\n  }\n  formats.fast = {\n    date: /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/,\n    time: /^(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)?$/i,\n    \"date-time\": /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s](?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)$/i,\n    uri: /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/)?[^\\s]*$/i,\n    \"uri-reference\": /^(?:(?:[a-z][a-z0-9+\\-.]*:)?\\/?\\/)?(?:[^\\\\\\s#][^\\s#]*)?(?:#[^\\\\\\s]*)?$/i,\n    \"uri-template\": URITEMPLATE,\n    url: URL2,\n    email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,\n    hostname: HOSTNAME,\n    ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\n    ipv6: /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\n    regex,\n    uuid: UUID,\n    \"json-pointer\": JSON_POINTER,\n    \"json-pointer-uri-fragment\": JSON_POINTER_URI_FRAGMENT,\n    \"relative-json-pointer\": RELATIVE_JSON_POINTER\n  };\n  formats.full = {\n    date,\n    time,\n    \"date-time\": date_time,\n    uri,\n    \"uri-reference\": URIREF,\n    \"uri-template\": URITEMPLATE,\n    url: URL2,\n    email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,\n    hostname: HOSTNAME,\n    ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\n    ipv6: /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\n    regex,\n    uuid: UUID,\n    \"json-pointer\": JSON_POINTER,\n    \"json-pointer-uri-fragment\": JSON_POINTER_URI_FRAGMENT,\n    \"relative-json-pointer\": RELATIVE_JSON_POINTER\n  };\n  function isLeapYear(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  }\n  function date(str) {\n    var matches = str.match(DATE);\n    if (!matches)\n      return false;\n    var year = +matches[1];\n    var month = +matches[2];\n    var day = +matches[3];\n    return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);\n  }\n  function time(str, full) {\n    var matches = str.match(TIME);\n    if (!matches)\n      return false;\n    var hour = matches[1];\n    var minute = matches[2];\n    var second = matches[3];\n    var timeZone = matches[5];\n    return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);\n  }\n  var DATE_TIME_SEPARATOR = /t|\\s/i;\n  function date_time(str) {\n    var dateTime = str.split(DATE_TIME_SEPARATOR);\n    return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);\n  }\n  var NOT_URI_FRAGMENT = /\\/|:/;\n  function uri(str) {\n    return NOT_URI_FRAGMENT.test(str) && URI.test(str);\n  }\n  var Z_ANCHOR = /[^\\\\]\\\\Z/;\n  function regex(str) {\n    if (Z_ANCHOR.test(str))\n      return false;\n    try {\n      new RegExp(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n\n// ../node_modules/ajv/lib/dotjs/ref.js\nvar require_ref = __commonJS((exports, module) => {\n  module.exports = function generate_ref(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $valid = \"valid\" + $lvl;\n    var $async, $refCode;\n    if ($schema == \"#\" || $schema == \"#/\") {\n      if (it.isRoot) {\n        $async = it.async;\n        $refCode = \"validate\";\n      } else {\n        $async = it.root.schema.$async === true;\n        $refCode = \"root.refVal[0]\";\n      }\n    } else {\n      var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);\n      if ($refVal === undefined) {\n        var $message = it.MissingRefError.message(it.baseId, $schema);\n        if (it.opts.missingRefs == \"fail\") {\n          it.logger.error($message);\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = \"\";\n          if (it.createErrors !== false) {\n            out += \" { keyword: '\" + \"$ref\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { ref: '\" + it.util.escapeQuotes($schema) + \"' } \";\n            if (it.opts.messages !== false) {\n              out += \" , message: 'can\\\\'t resolve reference \" + it.util.escapeQuotes($schema) + \"' \";\n            }\n            if (it.opts.verbose) {\n              out += \" , schema: \" + it.util.toQuotedString($schema) + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n            }\n            out += \" } \";\n          } else {\n            out += \" {} \";\n          }\n          var __err = out;\n          out = $$outStack.pop();\n          if (!it.compositeRule && $breakOnError) {\n            if (it.async) {\n              out += \" throw new ValidationError([\" + __err + \"]); \";\n            } else {\n              out += \" validate.errors = [\" + __err + \"]; return false; \";\n            }\n          } else {\n            out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n          }\n          if ($breakOnError) {\n            out += \" if (false) { \";\n          }\n        } else if (it.opts.missingRefs == \"ignore\") {\n          it.logger.warn($message);\n          if ($breakOnError) {\n            out += \" if (true) { \";\n          }\n        } else {\n          throw new it.MissingRefError(it.baseId, $schema, $message);\n        }\n      } else if ($refVal.inline) {\n        var $it = it.util.copy(it);\n        $it.level++;\n        var $nextValid = \"valid\" + $it.level;\n        $it.schema = $refVal.schema;\n        $it.schemaPath = \"\";\n        $it.errSchemaPath = $schema;\n        var $code = it.validate($it).replace(/validate\\.schema/g, $refVal.code);\n        out += \" \" + $code + \" \";\n        if ($breakOnError) {\n          out += \" if (\" + $nextValid + \") { \";\n        }\n      } else {\n        $async = $refVal.$async === true || it.async && $refVal.$async !== false;\n        $refCode = $refVal.code;\n      }\n    }\n    if ($refCode) {\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = \"\";\n      if (it.opts.passContext) {\n        out += \" \" + $refCode + \".call(this, \";\n      } else {\n        out += \" \" + $refCode + \"( \";\n      }\n      out += \" \" + $data + \", (dataPath || '')\";\n      if (it.errorPath != '\"\"') {\n        out += \" + \" + it.errorPath;\n      }\n      var $parentData = $dataLvl ? \"data\" + ($dataLvl - 1 || \"\") : \"parentData\", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : \"parentDataProperty\";\n      out += \" , \" + $parentData + \" , \" + $parentDataProperty + \", rootData)  \";\n      var __callValidate = out;\n      out = $$outStack.pop();\n      if ($async) {\n        if (!it.async)\n          throw new Error(\"async schema referenced by sync schema\");\n        if ($breakOnError) {\n          out += \" var \" + $valid + \"; \";\n        }\n        out += \" try { await \" + __callValidate + \"; \";\n        if ($breakOnError) {\n          out += \" \" + $valid + \" = true; \";\n        }\n        out += \" } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; \";\n        if ($breakOnError) {\n          out += \" \" + $valid + \" = false; \";\n        }\n        out += \" } \";\n        if ($breakOnError) {\n          out += \" if (\" + $valid + \") { \";\n        }\n      } else {\n        out += \" if (!\" + __callValidate + \") { if (vErrors === null) vErrors = \" + $refCode + \".errors; else vErrors = vErrors.concat(\" + $refCode + \".errors); errors = vErrors.length; } \";\n        if ($breakOnError) {\n          out += \" else { \";\n        }\n      }\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/allOf.js\nvar require_allOf = __commonJS((exports, module) => {\n  module.exports = function generate_allOf(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $it = it.util.copy(it);\n    var $closingBraces = \"\";\n    $it.level++;\n    var $nextValid = \"valid\" + $it.level;\n    var $currentBaseId = $it.baseId, $allSchemasEmpty = true;\n    var arr1 = $schema;\n    if (arr1) {\n      var $sch, $i = -1, l1 = arr1.length - 1;\n      while ($i < l1) {\n        $sch = arr1[$i += 1];\n        if (it.opts.strictKeywords ? typeof $sch == \"object\" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {\n          $allSchemasEmpty = false;\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + \"[\" + $i + \"]\";\n          $it.errSchemaPath = $errSchemaPath + \"/\" + $i;\n          out += \"  \" + it.validate($it) + \" \";\n          $it.baseId = $currentBaseId;\n          if ($breakOnError) {\n            out += \" if (\" + $nextValid + \") { \";\n            $closingBraces += \"}\";\n          }\n        }\n      }\n    }\n    if ($breakOnError) {\n      if ($allSchemasEmpty) {\n        out += \" if (true) { \";\n      } else {\n        out += \" \" + $closingBraces.slice(0, -1) + \" \";\n      }\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/anyOf.js\nvar require_anyOf = __commonJS((exports, module) => {\n  module.exports = function generate_anyOf(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $valid = \"valid\" + $lvl;\n    var $errs = \"errs__\" + $lvl;\n    var $it = it.util.copy(it);\n    var $closingBraces = \"\";\n    $it.level++;\n    var $nextValid = \"valid\" + $it.level;\n    var $noEmptySchema = $schema.every(function($sch2) {\n      return it.opts.strictKeywords ? typeof $sch2 == \"object\" && Object.keys($sch2).length > 0 || $sch2 === false : it.util.schemaHasRules($sch2, it.RULES.all);\n    });\n    if ($noEmptySchema) {\n      var $currentBaseId = $it.baseId;\n      out += \" var \" + $errs + \" = errors; var \" + $valid + \" = false;  \";\n      var $wasComposite = it.compositeRule;\n      it.compositeRule = $it.compositeRule = true;\n      var arr1 = $schema;\n      if (arr1) {\n        var $sch, $i = -1, l1 = arr1.length - 1;\n        while ($i < l1) {\n          $sch = arr1[$i += 1];\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + \"[\" + $i + \"]\";\n          $it.errSchemaPath = $errSchemaPath + \"/\" + $i;\n          out += \"  \" + it.validate($it) + \" \";\n          $it.baseId = $currentBaseId;\n          out += \" \" + $valid + \" = \" + $valid + \" || \" + $nextValid + \"; if (!\" + $valid + \") { \";\n          $closingBraces += \"}\";\n        }\n      }\n      it.compositeRule = $it.compositeRule = $wasComposite;\n      out += \" \" + $closingBraces + \" if (!\" + $valid + \") {   var err =   \";\n      if (it.createErrors !== false) {\n        out += \" { keyword: '\" + \"anyOf\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: {} \";\n        if (it.opts.messages !== false) {\n          out += \" , message: 'should match some schema in anyOf' \";\n        }\n        if (it.opts.verbose) {\n          out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n        }\n        out += \" } \";\n      } else {\n        out += \" {} \";\n      }\n      out += \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n      if (!it.compositeRule && $breakOnError) {\n        if (it.async) {\n          out += \" throw new ValidationError(vErrors); \";\n        } else {\n          out += \" validate.errors = vErrors; return false; \";\n        }\n      }\n      out += \" } else {  errors = \" + $errs + \"; if (vErrors !== null) { if (\" + $errs + \") vErrors.length = \" + $errs + \"; else vErrors = null; } \";\n      if (it.opts.allErrors) {\n        out += \" } \";\n      }\n    } else {\n      if ($breakOnError) {\n        out += \" if (true) { \";\n      }\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/comment.js\nvar require_comment = __commonJS((exports, module) => {\n  module.exports = function generate_comment(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $schema = it.schema[$keyword];\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $comment = it.util.toQuotedString($schema);\n    if (it.opts.$comment === true) {\n      out += \" console.log(\" + $comment + \");\";\n    } else if (typeof it.opts.$comment == \"function\") {\n      out += \" self._opts.$comment(\" + $comment + \", \" + it.util.toQuotedString($errSchemaPath) + \", validate.root.schema);\";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/const.js\nvar require_const = __commonJS((exports, module) => {\n  module.exports = function generate_const(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $valid = \"valid\" + $lvl;\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    if (!$isData) {\n      out += \" var schema\" + $lvl + \" = validate.schema\" + $schemaPath + \";\";\n    }\n    out += \"var \" + $valid + \" = equal(\" + $data + \", schema\" + $lvl + \"); if (!\" + $valid + \") {   \";\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = \"\";\n    if (it.createErrors !== false) {\n      out += \" { keyword: '\" + \"const\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { allowedValue: schema\" + $lvl + \" } \";\n      if (it.opts.messages !== false) {\n        out += \" , message: 'should be equal to constant' \";\n      }\n      if (it.opts.verbose) {\n        out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n      }\n      out += \" } \";\n    } else {\n      out += \" {} \";\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      if (it.async) {\n        out += \" throw new ValidationError([\" + __err + \"]); \";\n      } else {\n        out += \" validate.errors = [\" + __err + \"]; return false; \";\n      }\n    } else {\n      out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n    }\n    out += \" }\";\n    if ($breakOnError) {\n      out += \" else { \";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/contains.js\nvar require_contains = __commonJS((exports, module) => {\n  module.exports = function generate_contains(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $valid = \"valid\" + $lvl;\n    var $errs = \"errs__\" + $lvl;\n    var $it = it.util.copy(it);\n    var $closingBraces = \"\";\n    $it.level++;\n    var $nextValid = \"valid\" + $it.level;\n    var $idx = \"i\" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = \"data\" + $dataNxt, $currentBaseId = it.baseId, $nonEmptySchema = it.opts.strictKeywords ? typeof $schema == \"object\" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all);\n    out += \"var \" + $errs + \" = errors;var \" + $valid + \";\";\n    if ($nonEmptySchema) {\n      var $wasComposite = it.compositeRule;\n      it.compositeRule = $it.compositeRule = true;\n      $it.schema = $schema;\n      $it.schemaPath = $schemaPath;\n      $it.errSchemaPath = $errSchemaPath;\n      out += \" var \" + $nextValid + \" = false; for (var \" + $idx + \" = 0; \" + $idx + \" < \" + $data + \".length; \" + $idx + \"++) { \";\n      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n      var $passData = $data + \"[\" + $idx + \"]\";\n      $it.dataPathArr[$dataNxt] = $idx;\n      var $code = it.validate($it);\n      $it.baseId = $currentBaseId;\n      if (it.util.varOccurences($code, $nextData) < 2) {\n        out += \" \" + it.util.varReplace($code, $nextData, $passData) + \" \";\n      } else {\n        out += \" var \" + $nextData + \" = \" + $passData + \"; \" + $code + \" \";\n      }\n      out += \" if (\" + $nextValid + \") break; }  \";\n      it.compositeRule = $it.compositeRule = $wasComposite;\n      out += \" \" + $closingBraces + \" if (!\" + $nextValid + \") {\";\n    } else {\n      out += \" if (\" + $data + \".length == 0) {\";\n    }\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = \"\";\n    if (it.createErrors !== false) {\n      out += \" { keyword: '\" + \"contains\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: {} \";\n      if (it.opts.messages !== false) {\n        out += \" , message: 'should contain a valid item' \";\n      }\n      if (it.opts.verbose) {\n        out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n      }\n      out += \" } \";\n    } else {\n      out += \" {} \";\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      if (it.async) {\n        out += \" throw new ValidationError([\" + __err + \"]); \";\n      } else {\n        out += \" validate.errors = [\" + __err + \"]; return false; \";\n      }\n    } else {\n      out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n    }\n    out += \" } else { \";\n    if ($nonEmptySchema) {\n      out += \"  errors = \" + $errs + \"; if (vErrors !== null) { if (\" + $errs + \") vErrors.length = \" + $errs + \"; else vErrors = null; } \";\n    }\n    if (it.opts.allErrors) {\n      out += \" } \";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/dependencies.js\nvar require_dependencies = __commonJS((exports, module) => {\n  module.exports = function generate_dependencies(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $errs = \"errs__\" + $lvl;\n    var $it = it.util.copy(it);\n    var $closingBraces = \"\";\n    $it.level++;\n    var $nextValid = \"valid\" + $it.level;\n    var $schemaDeps = {}, $propertyDeps = {}, $ownProperties = it.opts.ownProperties;\n    for ($property in $schema) {\n      if ($property == \"__proto__\")\n        continue;\n      var $sch = $schema[$property];\n      var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;\n      $deps[$property] = $sch;\n    }\n    out += \"var \" + $errs + \" = errors;\";\n    var $currentErrorPath = it.errorPath;\n    out += \"var missing\" + $lvl + \";\";\n    for (var $property in $propertyDeps) {\n      $deps = $propertyDeps[$property];\n      if ($deps.length) {\n        out += \" if ( \" + $data + it.util.getProperty($property) + \" !== undefined \";\n        if ($ownProperties) {\n          out += \" && Object.prototype.hasOwnProperty.call(\" + $data + \", '\" + it.util.escapeQuotes($property) + \"') \";\n        }\n        if ($breakOnError) {\n          out += \" && ( \";\n          var arr1 = $deps;\n          if (arr1) {\n            var $propertyKey, $i = -1, l1 = arr1.length - 1;\n            while ($i < l1) {\n              $propertyKey = arr1[$i += 1];\n              if ($i) {\n                out += \" || \";\n              }\n              var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;\n              out += \" ( ( \" + $useData + \" === undefined \";\n              if ($ownProperties) {\n                out += \" || ! Object.prototype.hasOwnProperty.call(\" + $data + \", '\" + it.util.escapeQuotes($propertyKey) + \"') \";\n              }\n              out += \") && (missing\" + $lvl + \" = \" + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + \") ) \";\n            }\n          }\n          out += \")) {  \";\n          var $propertyPath = \"missing\" + $lvl, $missingProperty = \"' + \" + $propertyPath + \" + '\";\n          if (it.opts._errorDataPathProperty) {\n            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + \" + \" + $propertyPath;\n          }\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = \"\";\n          if (it.createErrors !== false) {\n            out += \" { keyword: '\" + \"dependencies\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { property: '\" + it.util.escapeQuotes($property) + \"', missingProperty: '\" + $missingProperty + \"', depsCount: \" + $deps.length + \", deps: '\" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\", \")) + \"' } \";\n            if (it.opts.messages !== false) {\n              out += \" , message: 'should have \";\n              if ($deps.length == 1) {\n                out += \"property \" + it.util.escapeQuotes($deps[0]);\n              } else {\n                out += \"properties \" + it.util.escapeQuotes($deps.join(\", \"));\n              }\n              out += \" when property \" + it.util.escapeQuotes($property) + \" is present' \";\n            }\n            if (it.opts.verbose) {\n              out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n            }\n            out += \" } \";\n          } else {\n            out += \" {} \";\n          }\n          var __err = out;\n          out = $$outStack.pop();\n          if (!it.compositeRule && $breakOnError) {\n            if (it.async) {\n              out += \" throw new ValidationError([\" + __err + \"]); \";\n            } else {\n              out += \" validate.errors = [\" + __err + \"]; return false; \";\n            }\n          } else {\n            out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n          }\n        } else {\n          out += \" ) { \";\n          var arr2 = $deps;\n          if (arr2) {\n            var $propertyKey, i2 = -1, l2 = arr2.length - 1;\n            while (i2 < l2) {\n              $propertyKey = arr2[i2 += 1];\n              var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;\n              if (it.opts._errorDataPathProperty) {\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n              }\n              out += \" if ( \" + $useData + \" === undefined \";\n              if ($ownProperties) {\n                out += \" || ! Object.prototype.hasOwnProperty.call(\" + $data + \", '\" + it.util.escapeQuotes($propertyKey) + \"') \";\n              }\n              out += \") {  var err =   \";\n              if (it.createErrors !== false) {\n                out += \" { keyword: '\" + \"dependencies\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { property: '\" + it.util.escapeQuotes($property) + \"', missingProperty: '\" + $missingProperty + \"', depsCount: \" + $deps.length + \", deps: '\" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\", \")) + \"' } \";\n                if (it.opts.messages !== false) {\n                  out += \" , message: 'should have \";\n                  if ($deps.length == 1) {\n                    out += \"property \" + it.util.escapeQuotes($deps[0]);\n                  } else {\n                    out += \"properties \" + it.util.escapeQuotes($deps.join(\", \"));\n                  }\n                  out += \" when property \" + it.util.escapeQuotes($property) + \" is present' \";\n                }\n                if (it.opts.verbose) {\n                  out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n                }\n                out += \" } \";\n              } else {\n                out += \" {} \";\n              }\n              out += \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } \";\n            }\n          }\n        }\n        out += \" }   \";\n        if ($breakOnError) {\n          $closingBraces += \"}\";\n          out += \" else { \";\n        }\n      }\n    }\n    it.errorPath = $currentErrorPath;\n    var $currentBaseId = $it.baseId;\n    for (var $property in $schemaDeps) {\n      var $sch = $schemaDeps[$property];\n      if (it.opts.strictKeywords ? typeof $sch == \"object\" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {\n        out += \" \" + $nextValid + \" = true; if ( \" + $data + it.util.getProperty($property) + \" !== undefined \";\n        if ($ownProperties) {\n          out += \" && Object.prototype.hasOwnProperty.call(\" + $data + \", '\" + it.util.escapeQuotes($property) + \"') \";\n        }\n        out += \") { \";\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + it.util.getProperty($property);\n        $it.errSchemaPath = $errSchemaPath + \"/\" + it.util.escapeFragment($property);\n        out += \"  \" + it.validate($it) + \" \";\n        $it.baseId = $currentBaseId;\n        out += \" }  \";\n        if ($breakOnError) {\n          out += \" if (\" + $nextValid + \") { \";\n          $closingBraces += \"}\";\n        }\n      }\n    }\n    if ($breakOnError) {\n      out += \"   \" + $closingBraces + \" if (\" + $errs + \" == errors) {\";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/enum.js\nvar require_enum = __commonJS((exports, module) => {\n  module.exports = function generate_enum(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $valid = \"valid\" + $lvl;\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    var $i = \"i\" + $lvl, $vSchema = \"schema\" + $lvl;\n    if (!$isData) {\n      out += \" var \" + $vSchema + \" = validate.schema\" + $schemaPath + \";\";\n    }\n    out += \"var \" + $valid + \";\";\n    if ($isData) {\n      out += \" if (schema\" + $lvl + \" === undefined) \" + $valid + \" = true; else if (!Array.isArray(schema\" + $lvl + \")) \" + $valid + \" = false; else {\";\n    }\n    out += \"\" + $valid + \" = false;for (var \" + $i + \"=0; \" + $i + \"<\" + $vSchema + \".length; \" + $i + \"++) if (equal(\" + $data + \", \" + $vSchema + \"[\" + $i + \"])) { \" + $valid + \" = true; break; }\";\n    if ($isData) {\n      out += \"  }  \";\n    }\n    out += \" if (!\" + $valid + \") {   \";\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = \"\";\n    if (it.createErrors !== false) {\n      out += \" { keyword: '\" + \"enum\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { allowedValues: schema\" + $lvl + \" } \";\n      if (it.opts.messages !== false) {\n        out += \" , message: 'should be equal to one of the allowed values' \";\n      }\n      if (it.opts.verbose) {\n        out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n      }\n      out += \" } \";\n    } else {\n      out += \" {} \";\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      if (it.async) {\n        out += \" throw new ValidationError([\" + __err + \"]); \";\n      } else {\n        out += \" validate.errors = [\" + __err + \"]; return false; \";\n      }\n    } else {\n      out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n    }\n    out += \" }\";\n    if ($breakOnError) {\n      out += \" else { \";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/format.js\nvar require_format = __commonJS((exports, module) => {\n  module.exports = function generate_format(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    if (it.opts.format === false) {\n      if ($breakOnError) {\n        out += \" if (true) { \";\n      }\n      return out;\n    }\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    var $unknownFormats = it.opts.unknownFormats, $allowUnknown = Array.isArray($unknownFormats);\n    if ($isData) {\n      var $format = \"format\" + $lvl, $isObject = \"isObject\" + $lvl, $formatType = \"formatType\" + $lvl;\n      out += \" var \" + $format + \" = formats[\" + $schemaValue + \"]; var \" + $isObject + \" = typeof \" + $format + \" == 'object' && !(\" + $format + \" instanceof RegExp) && \" + $format + \".validate; var \" + $formatType + \" = \" + $isObject + \" && \" + $format + \".type || 'string'; if (\" + $isObject + \") { \";\n      if (it.async) {\n        out += \" var async\" + $lvl + \" = \" + $format + \".async; \";\n      }\n      out += \" \" + $format + \" = \" + $format + \".validate; } if (  \";\n      if ($isData) {\n        out += \" (\" + $schemaValue + \" !== undefined && typeof \" + $schemaValue + \" != 'string') || \";\n      }\n      out += \" (\";\n      if ($unknownFormats != \"ignore\") {\n        out += \" (\" + $schemaValue + \" && !\" + $format + \" \";\n        if ($allowUnknown) {\n          out += \" && self._opts.unknownFormats.indexOf(\" + $schemaValue + \") == -1 \";\n        }\n        out += \") || \";\n      }\n      out += \" (\" + $format + \" && \" + $formatType + \" == '\" + $ruleType + \"' && !(typeof \" + $format + \" == 'function' ? \";\n      if (it.async) {\n        out += \" (async\" + $lvl + \" ? await \" + $format + \"(\" + $data + \") : \" + $format + \"(\" + $data + \")) \";\n      } else {\n        out += \" \" + $format + \"(\" + $data + \") \";\n      }\n      out += \" : \" + $format + \".test(\" + $data + \"))))) {\";\n    } else {\n      var $format = it.formats[$schema];\n      if (!$format) {\n        if ($unknownFormats == \"ignore\") {\n          it.logger.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"');\n          if ($breakOnError) {\n            out += \" if (true) { \";\n          }\n          return out;\n        } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {\n          if ($breakOnError) {\n            out += \" if (true) { \";\n          }\n          return out;\n        } else {\n          throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"');\n        }\n      }\n      var $isObject = typeof $format == \"object\" && !($format instanceof RegExp) && $format.validate;\n      var $formatType = $isObject && $format.type || \"string\";\n      if ($isObject) {\n        var $async = $format.async === true;\n        $format = $format.validate;\n      }\n      if ($formatType != $ruleType) {\n        if ($breakOnError) {\n          out += \" if (true) { \";\n        }\n        return out;\n      }\n      if ($async) {\n        if (!it.async)\n          throw new Error(\"async format in sync schema\");\n        var $formatRef = \"formats\" + it.util.getProperty($schema) + \".validate\";\n        out += \" if (!(await \" + $formatRef + \"(\" + $data + \"))) { \";\n      } else {\n        out += \" if (! \";\n        var $formatRef = \"formats\" + it.util.getProperty($schema);\n        if ($isObject)\n          $formatRef += \".validate\";\n        if (typeof $format == \"function\") {\n          out += \" \" + $formatRef + \"(\" + $data + \") \";\n        } else {\n          out += \" \" + $formatRef + \".test(\" + $data + \") \";\n        }\n        out += \") { \";\n      }\n    }\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = \"\";\n    if (it.createErrors !== false) {\n      out += \" { keyword: '\" + \"format\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { format:  \";\n      if ($isData) {\n        out += \"\" + $schemaValue;\n      } else {\n        out += \"\" + it.util.toQuotedString($schema);\n      }\n      out += \"  } \";\n      if (it.opts.messages !== false) {\n        out += ` , message: 'should match format \"`;\n        if ($isData) {\n          out += \"' + \" + $schemaValue + \" + '\";\n        } else {\n          out += \"\" + it.util.escapeQuotes($schema);\n        }\n        out += `\"' `;\n      }\n      if (it.opts.verbose) {\n        out += \" , schema:  \";\n        if ($isData) {\n          out += \"validate.schema\" + $schemaPath;\n        } else {\n          out += \"\" + it.util.toQuotedString($schema);\n        }\n        out += \"         , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n      }\n      out += \" } \";\n    } else {\n      out += \" {} \";\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      if (it.async) {\n        out += \" throw new ValidationError([\" + __err + \"]); \";\n      } else {\n        out += \" validate.errors = [\" + __err + \"]; return false; \";\n      }\n    } else {\n      out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n    }\n    out += \" } \";\n    if ($breakOnError) {\n      out += \" else { \";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/if.js\nvar require_if = __commonJS((exports, module) => {\n  module.exports = function generate_if(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $valid = \"valid\" + $lvl;\n    var $errs = \"errs__\" + $lvl;\n    var $it = it.util.copy(it);\n    $it.level++;\n    var $nextValid = \"valid\" + $it.level;\n    var $thenSch = it.schema[\"then\"], $elseSch = it.schema[\"else\"], $thenPresent = $thenSch !== undefined && (it.opts.strictKeywords ? typeof $thenSch == \"object\" && Object.keys($thenSch).length > 0 || $thenSch === false : it.util.schemaHasRules($thenSch, it.RULES.all)), $elsePresent = $elseSch !== undefined && (it.opts.strictKeywords ? typeof $elseSch == \"object\" && Object.keys($elseSch).length > 0 || $elseSch === false : it.util.schemaHasRules($elseSch, it.RULES.all)), $currentBaseId = $it.baseId;\n    if ($thenPresent || $elsePresent) {\n      var $ifClause;\n      $it.createErrors = false;\n      $it.schema = $schema;\n      $it.schemaPath = $schemaPath;\n      $it.errSchemaPath = $errSchemaPath;\n      out += \" var \" + $errs + \" = errors; var \" + $valid + \" = true;  \";\n      var $wasComposite = it.compositeRule;\n      it.compositeRule = $it.compositeRule = true;\n      out += \"  \" + it.validate($it) + \" \";\n      $it.baseId = $currentBaseId;\n      $it.createErrors = true;\n      out += \"  errors = \" + $errs + \"; if (vErrors !== null) { if (\" + $errs + \") vErrors.length = \" + $errs + \"; else vErrors = null; }  \";\n      it.compositeRule = $it.compositeRule = $wasComposite;\n      if ($thenPresent) {\n        out += \" if (\" + $nextValid + \") {  \";\n        $it.schema = it.schema[\"then\"];\n        $it.schemaPath = it.schemaPath + \".then\";\n        $it.errSchemaPath = it.errSchemaPath + \"/then\";\n        out += \"  \" + it.validate($it) + \" \";\n        $it.baseId = $currentBaseId;\n        out += \" \" + $valid + \" = \" + $nextValid + \"; \";\n        if ($thenPresent && $elsePresent) {\n          $ifClause = \"ifClause\" + $lvl;\n          out += \" var \" + $ifClause + \" = 'then'; \";\n        } else {\n          $ifClause = \"'then'\";\n        }\n        out += \" } \";\n        if ($elsePresent) {\n          out += \" else { \";\n        }\n      } else {\n        out += \" if (!\" + $nextValid + \") { \";\n      }\n      if ($elsePresent) {\n        $it.schema = it.schema[\"else\"];\n        $it.schemaPath = it.schemaPath + \".else\";\n        $it.errSchemaPath = it.errSchemaPath + \"/else\";\n        out += \"  \" + it.validate($it) + \" \";\n        $it.baseId = $currentBaseId;\n        out += \" \" + $valid + \" = \" + $nextValid + \"; \";\n        if ($thenPresent && $elsePresent) {\n          $ifClause = \"ifClause\" + $lvl;\n          out += \" var \" + $ifClause + \" = 'else'; \";\n        } else {\n          $ifClause = \"'else'\";\n        }\n        out += \" } \";\n      }\n      out += \" if (!\" + $valid + \") {   var err =   \";\n      if (it.createErrors !== false) {\n        out += \" { keyword: '\" + \"if\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { failingKeyword: \" + $ifClause + \" } \";\n        if (it.opts.messages !== false) {\n          out += ` , message: 'should match \"' + ` + $ifClause + ` + '\" schema' `;\n        }\n        if (it.opts.verbose) {\n          out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n        }\n        out += \" } \";\n      } else {\n        out += \" {} \";\n      }\n      out += \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n      if (!it.compositeRule && $breakOnError) {\n        if (it.async) {\n          out += \" throw new ValidationError(vErrors); \";\n        } else {\n          out += \" validate.errors = vErrors; return false; \";\n        }\n      }\n      out += \" }   \";\n      if ($breakOnError) {\n        out += \" else { \";\n      }\n    } else {\n      if ($breakOnError) {\n        out += \" if (true) { \";\n      }\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/items.js\nvar require_items = __commonJS((exports, module) => {\n  module.exports = function generate_items(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $valid = \"valid\" + $lvl;\n    var $errs = \"errs__\" + $lvl;\n    var $it = it.util.copy(it);\n    var $closingBraces = \"\";\n    $it.level++;\n    var $nextValid = \"valid\" + $it.level;\n    var $idx = \"i\" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = \"data\" + $dataNxt, $currentBaseId = it.baseId;\n    out += \"var \" + $errs + \" = errors;var \" + $valid + \";\";\n    if (Array.isArray($schema)) {\n      var $additionalItems = it.schema.additionalItems;\n      if ($additionalItems === false) {\n        out += \" \" + $valid + \" = \" + $data + \".length <= \" + $schema.length + \"; \";\n        var $currErrSchemaPath = $errSchemaPath;\n        $errSchemaPath = it.errSchemaPath + \"/additionalItems\";\n        out += \"  if (!\" + $valid + \") {   \";\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = \"\";\n        if (it.createErrors !== false) {\n          out += \" { keyword: '\" + \"additionalItems\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { limit: \" + $schema.length + \" } \";\n          if (it.opts.messages !== false) {\n            out += \" , message: 'should NOT have more than \" + $schema.length + \" items' \";\n          }\n          if (it.opts.verbose) {\n            out += \" , schema: false , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n          }\n          out += \" } \";\n        } else {\n          out += \" {} \";\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          if (it.async) {\n            out += \" throw new ValidationError([\" + __err + \"]); \";\n          } else {\n            out += \" validate.errors = [\" + __err + \"]; return false; \";\n          }\n        } else {\n          out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n        }\n        out += \" } \";\n        $errSchemaPath = $currErrSchemaPath;\n        if ($breakOnError) {\n          $closingBraces += \"}\";\n          out += \" else { \";\n        }\n      }\n      var arr1 = $schema;\n      if (arr1) {\n        var $sch, $i = -1, l1 = arr1.length - 1;\n        while ($i < l1) {\n          $sch = arr1[$i += 1];\n          if (it.opts.strictKeywords ? typeof $sch == \"object\" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {\n            out += \" \" + $nextValid + \" = true; if (\" + $data + \".length > \" + $i + \") { \";\n            var $passData = $data + \"[\" + $i + \"]\";\n            $it.schema = $sch;\n            $it.schemaPath = $schemaPath + \"[\" + $i + \"]\";\n            $it.errSchemaPath = $errSchemaPath + \"/\" + $i;\n            $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);\n            $it.dataPathArr[$dataNxt] = $i;\n            var $code = it.validate($it);\n            $it.baseId = $currentBaseId;\n            if (it.util.varOccurences($code, $nextData) < 2) {\n              out += \" \" + it.util.varReplace($code, $nextData, $passData) + \" \";\n            } else {\n              out += \" var \" + $nextData + \" = \" + $passData + \"; \" + $code + \" \";\n            }\n            out += \" }  \";\n            if ($breakOnError) {\n              out += \" if (\" + $nextValid + \") { \";\n              $closingBraces += \"}\";\n            }\n          }\n        }\n      }\n      if (typeof $additionalItems == \"object\" && (it.opts.strictKeywords ? typeof $additionalItems == \"object\" && Object.keys($additionalItems).length > 0 || $additionalItems === false : it.util.schemaHasRules($additionalItems, it.RULES.all))) {\n        $it.schema = $additionalItems;\n        $it.schemaPath = it.schemaPath + \".additionalItems\";\n        $it.errSchemaPath = it.errSchemaPath + \"/additionalItems\";\n        out += \" \" + $nextValid + \" = true; if (\" + $data + \".length > \" + $schema.length + \") {  for (var \" + $idx + \" = \" + $schema.length + \"; \" + $idx + \" < \" + $data + \".length; \" + $idx + \"++) { \";\n        $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n        var $passData = $data + \"[\" + $idx + \"]\";\n        $it.dataPathArr[$dataNxt] = $idx;\n        var $code = it.validate($it);\n        $it.baseId = $currentBaseId;\n        if (it.util.varOccurences($code, $nextData) < 2) {\n          out += \" \" + it.util.varReplace($code, $nextData, $passData) + \" \";\n        } else {\n          out += \" var \" + $nextData + \" = \" + $passData + \"; \" + $code + \" \";\n        }\n        if ($breakOnError) {\n          out += \" if (!\" + $nextValid + \") break; \";\n        }\n        out += \" } }  \";\n        if ($breakOnError) {\n          out += \" if (\" + $nextValid + \") { \";\n          $closingBraces += \"}\";\n        }\n      }\n    } else if (it.opts.strictKeywords ? typeof $schema == \"object\" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {\n      $it.schema = $schema;\n      $it.schemaPath = $schemaPath;\n      $it.errSchemaPath = $errSchemaPath;\n      out += \"  for (var \" + $idx + \" = \" + 0 + \"; \" + $idx + \" < \" + $data + \".length; \" + $idx + \"++) { \";\n      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n      var $passData = $data + \"[\" + $idx + \"]\";\n      $it.dataPathArr[$dataNxt] = $idx;\n      var $code = it.validate($it);\n      $it.baseId = $currentBaseId;\n      if (it.util.varOccurences($code, $nextData) < 2) {\n        out += \" \" + it.util.varReplace($code, $nextData, $passData) + \" \";\n      } else {\n        out += \" var \" + $nextData + \" = \" + $passData + \"; \" + $code + \" \";\n      }\n      if ($breakOnError) {\n        out += \" if (!\" + $nextValid + \") break; \";\n      }\n      out += \" }\";\n    }\n    if ($breakOnError) {\n      out += \" \" + $closingBraces + \" if (\" + $errs + \" == errors) {\";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/_limit.js\nvar require__limit = __commonJS((exports, module) => {\n  module.exports = function generate__limit(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $errorKeyword;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    var $isMax = $keyword == \"maximum\", $exclusiveKeyword = $isMax ? \"exclusiveMaximum\" : \"exclusiveMinimum\", $schemaExcl = it.schema[$exclusiveKeyword], $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data, $op = $isMax ? \"<\" : \">\", $notOp = $isMax ? \">\" : \"<\", $errorKeyword = undefined;\n    if (!($isData || typeof $schema == \"number\" || $schema === undefined)) {\n      throw new Error($keyword + \" must be number\");\n    }\n    if (!($isDataExcl || $schemaExcl === undefined || typeof $schemaExcl == \"number\" || typeof $schemaExcl == \"boolean\")) {\n      throw new Error($exclusiveKeyword + \" must be number or boolean\");\n    }\n    if ($isDataExcl) {\n      var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr), $exclusive = \"exclusive\" + $lvl, $exclType = \"exclType\" + $lvl, $exclIsNumber = \"exclIsNumber\" + $lvl, $opExpr = \"op\" + $lvl, $opStr = \"' + \" + $opExpr + \" + '\";\n      out += \" var schemaExcl\" + $lvl + \" = \" + $schemaValueExcl + \"; \";\n      $schemaValueExcl = \"schemaExcl\" + $lvl;\n      out += \" var \" + $exclusive + \"; var \" + $exclType + \" = typeof \" + $schemaValueExcl + \"; if (\" + $exclType + \" != 'boolean' && \" + $exclType + \" != 'undefined' && \" + $exclType + \" != 'number') { \";\n      var $errorKeyword = $exclusiveKeyword;\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = \"\";\n      if (it.createErrors !== false) {\n        out += \" { keyword: '\" + ($errorKeyword || \"_exclusiveLimit\") + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: {} \";\n        if (it.opts.messages !== false) {\n          out += \" , message: '\" + $exclusiveKeyword + \" should be boolean' \";\n        }\n        if (it.opts.verbose) {\n          out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n        }\n        out += \" } \";\n      } else {\n        out += \" {} \";\n      }\n      var __err = out;\n      out = $$outStack.pop();\n      if (!it.compositeRule && $breakOnError) {\n        if (it.async) {\n          out += \" throw new ValidationError([\" + __err + \"]); \";\n        } else {\n          out += \" validate.errors = [\" + __err + \"]; return false; \";\n        }\n      } else {\n        out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n      }\n      out += \" } else if ( \";\n      if ($isData) {\n        out += \" (\" + $schemaValue + \" !== undefined && typeof \" + $schemaValue + \" != 'number') || \";\n      }\n      out += \" \" + $exclType + \" == 'number' ? ( (\" + $exclusive + \" = \" + $schemaValue + \" === undefined || \" + $schemaValueExcl + \" \" + $op + \"= \" + $schemaValue + \") ? \" + $data + \" \" + $notOp + \"= \" + $schemaValueExcl + \" : \" + $data + \" \" + $notOp + \" \" + $schemaValue + \" ) : ( (\" + $exclusive + \" = \" + $schemaValueExcl + \" === true) ? \" + $data + \" \" + $notOp + \"= \" + $schemaValue + \" : \" + $data + \" \" + $notOp + \" \" + $schemaValue + \" ) || \" + $data + \" !== \" + $data + \") { var op\" + $lvl + \" = \" + $exclusive + \" ? '\" + $op + \"' : '\" + $op + \"='; \";\n      if ($schema === undefined) {\n        $errorKeyword = $exclusiveKeyword;\n        $errSchemaPath = it.errSchemaPath + \"/\" + $exclusiveKeyword;\n        $schemaValue = $schemaValueExcl;\n        $isData = $isDataExcl;\n      }\n    } else {\n      var $exclIsNumber = typeof $schemaExcl == \"number\", $opStr = $op;\n      if ($exclIsNumber && $isData) {\n        var $opExpr = \"'\" + $opStr + \"'\";\n        out += \" if ( \";\n        if ($isData) {\n          out += \" (\" + $schemaValue + \" !== undefined && typeof \" + $schemaValue + \" != 'number') || \";\n        }\n        out += \" ( \" + $schemaValue + \" === undefined || \" + $schemaExcl + \" \" + $op + \"= \" + $schemaValue + \" ? \" + $data + \" \" + $notOp + \"= \" + $schemaExcl + \" : \" + $data + \" \" + $notOp + \" \" + $schemaValue + \" ) || \" + $data + \" !== \" + $data + \") { \";\n      } else {\n        if ($exclIsNumber && $schema === undefined) {\n          $exclusive = true;\n          $errorKeyword = $exclusiveKeyword;\n          $errSchemaPath = it.errSchemaPath + \"/\" + $exclusiveKeyword;\n          $schemaValue = $schemaExcl;\n          $notOp += \"=\";\n        } else {\n          if ($exclIsNumber)\n            $schemaValue = Math[$isMax ? \"min\" : \"max\"]($schemaExcl, $schema);\n          if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {\n            $exclusive = true;\n            $errorKeyword = $exclusiveKeyword;\n            $errSchemaPath = it.errSchemaPath + \"/\" + $exclusiveKeyword;\n            $notOp += \"=\";\n          } else {\n            $exclusive = false;\n            $opStr += \"=\";\n          }\n        }\n        var $opExpr = \"'\" + $opStr + \"'\";\n        out += \" if ( \";\n        if ($isData) {\n          out += \" (\" + $schemaValue + \" !== undefined && typeof \" + $schemaValue + \" != 'number') || \";\n        }\n        out += \" \" + $data + \" \" + $notOp + \" \" + $schemaValue + \" || \" + $data + \" !== \" + $data + \") { \";\n      }\n    }\n    $errorKeyword = $errorKeyword || $keyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = \"\";\n    if (it.createErrors !== false) {\n      out += \" { keyword: '\" + ($errorKeyword || \"_limit\") + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { comparison: \" + $opExpr + \", limit: \" + $schemaValue + \", exclusive: \" + $exclusive + \" } \";\n      if (it.opts.messages !== false) {\n        out += \" , message: 'should be \" + $opStr + \" \";\n        if ($isData) {\n          out += \"' + \" + $schemaValue;\n        } else {\n          out += \"\" + $schemaValue + \"'\";\n        }\n      }\n      if (it.opts.verbose) {\n        out += \" , schema:  \";\n        if ($isData) {\n          out += \"validate.schema\" + $schemaPath;\n        } else {\n          out += \"\" + $schema;\n        }\n        out += \"         , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n      }\n      out += \" } \";\n    } else {\n      out += \" {} \";\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      if (it.async) {\n        out += \" throw new ValidationError([\" + __err + \"]); \";\n      } else {\n        out += \" validate.errors = [\" + __err + \"]; return false; \";\n      }\n    } else {\n      out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n    }\n    out += \" } \";\n    if ($breakOnError) {\n      out += \" else { \";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/_limitItems.js\nvar require__limitItems = __commonJS((exports, module) => {\n  module.exports = function generate__limitItems(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $errorKeyword;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    if (!($isData || typeof $schema == \"number\")) {\n      throw new Error($keyword + \" must be number\");\n    }\n    var $op = $keyword == \"maxItems\" ? \">\" : \"<\";\n    out += \"if ( \";\n    if ($isData) {\n      out += \" (\" + $schemaValue + \" !== undefined && typeof \" + $schemaValue + \" != 'number') || \";\n    }\n    out += \" \" + $data + \".length \" + $op + \" \" + $schemaValue + \") { \";\n    var $errorKeyword = $keyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = \"\";\n    if (it.createErrors !== false) {\n      out += \" { keyword: '\" + ($errorKeyword || \"_limitItems\") + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { limit: \" + $schemaValue + \" } \";\n      if (it.opts.messages !== false) {\n        out += \" , message: 'should NOT have \";\n        if ($keyword == \"maxItems\") {\n          out += \"more\";\n        } else {\n          out += \"fewer\";\n        }\n        out += \" than \";\n        if ($isData) {\n          out += \"' + \" + $schemaValue + \" + '\";\n        } else {\n          out += \"\" + $schema;\n        }\n        out += \" items' \";\n      }\n      if (it.opts.verbose) {\n        out += \" , schema:  \";\n        if ($isData) {\n          out += \"validate.schema\" + $schemaPath;\n        } else {\n          out += \"\" + $schema;\n        }\n        out += \"         , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n      }\n      out += \" } \";\n    } else {\n      out += \" {} \";\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      if (it.async) {\n        out += \" throw new ValidationError([\" + __err + \"]); \";\n      } else {\n        out += \" validate.errors = [\" + __err + \"]; return false; \";\n      }\n    } else {\n      out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n    }\n    out += \"} \";\n    if ($breakOnError) {\n      out += \" else { \";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/_limitLength.js\nvar require__limitLength = __commonJS((exports, module) => {\n  module.exports = function generate__limitLength(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $errorKeyword;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    if (!($isData || typeof $schema == \"number\")) {\n      throw new Error($keyword + \" must be number\");\n    }\n    var $op = $keyword == \"maxLength\" ? \">\" : \"<\";\n    out += \"if ( \";\n    if ($isData) {\n      out += \" (\" + $schemaValue + \" !== undefined && typeof \" + $schemaValue + \" != 'number') || \";\n    }\n    if (it.opts.unicode === false) {\n      out += \" \" + $data + \".length \";\n    } else {\n      out += \" ucs2length(\" + $data + \") \";\n    }\n    out += \" \" + $op + \" \" + $schemaValue + \") { \";\n    var $errorKeyword = $keyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = \"\";\n    if (it.createErrors !== false) {\n      out += \" { keyword: '\" + ($errorKeyword || \"_limitLength\") + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { limit: \" + $schemaValue + \" } \";\n      if (it.opts.messages !== false) {\n        out += \" , message: 'should NOT be \";\n        if ($keyword == \"maxLength\") {\n          out += \"longer\";\n        } else {\n          out += \"shorter\";\n        }\n        out += \" than \";\n        if ($isData) {\n          out += \"' + \" + $schemaValue + \" + '\";\n        } else {\n          out += \"\" + $schema;\n        }\n        out += \" characters' \";\n      }\n      if (it.opts.verbose) {\n        out += \" , schema:  \";\n        if ($isData) {\n          out += \"validate.schema\" + $schemaPath;\n        } else {\n          out += \"\" + $schema;\n        }\n        out += \"         , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n      }\n      out += \" } \";\n    } else {\n      out += \" {} \";\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      if (it.async) {\n        out += \" throw new ValidationError([\" + __err + \"]); \";\n      } else {\n        out += \" validate.errors = [\" + __err + \"]; return false; \";\n      }\n    } else {\n      out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n    }\n    out += \"} \";\n    if ($breakOnError) {\n      out += \" else { \";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/_limitProperties.js\nvar require__limitProperties = __commonJS((exports, module) => {\n  module.exports = function generate__limitProperties(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $errorKeyword;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    if (!($isData || typeof $schema == \"number\")) {\n      throw new Error($keyword + \" must be number\");\n    }\n    var $op = $keyword == \"maxProperties\" ? \">\" : \"<\";\n    out += \"if ( \";\n    if ($isData) {\n      out += \" (\" + $schemaValue + \" !== undefined && typeof \" + $schemaValue + \" != 'number') || \";\n    }\n    out += \" Object.keys(\" + $data + \").length \" + $op + \" \" + $schemaValue + \") { \";\n    var $errorKeyword = $keyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = \"\";\n    if (it.createErrors !== false) {\n      out += \" { keyword: '\" + ($errorKeyword || \"_limitProperties\") + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { limit: \" + $schemaValue + \" } \";\n      if (it.opts.messages !== false) {\n        out += \" , message: 'should NOT have \";\n        if ($keyword == \"maxProperties\") {\n          out += \"more\";\n        } else {\n          out += \"fewer\";\n        }\n        out += \" than \";\n        if ($isData) {\n          out += \"' + \" + $schemaValue + \" + '\";\n        } else {\n          out += \"\" + $schema;\n        }\n        out += \" properties' \";\n      }\n      if (it.opts.verbose) {\n        out += \" , schema:  \";\n        if ($isData) {\n          out += \"validate.schema\" + $schemaPath;\n        } else {\n          out += \"\" + $schema;\n        }\n        out += \"         , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n      }\n      out += \" } \";\n    } else {\n      out += \" {} \";\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      if (it.async) {\n        out += \" throw new ValidationError([\" + __err + \"]); \";\n      } else {\n        out += \" validate.errors = [\" + __err + \"]; return false; \";\n      }\n    } else {\n      out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n    }\n    out += \"} \";\n    if ($breakOnError) {\n      out += \" else { \";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/multipleOf.js\nvar require_multipleOf = __commonJS((exports, module) => {\n  module.exports = function generate_multipleOf(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    if (!($isData || typeof $schema == \"number\")) {\n      throw new Error($keyword + \" must be number\");\n    }\n    out += \"var division\" + $lvl + \";if (\";\n    if ($isData) {\n      out += \" \" + $schemaValue + \" !== undefined && ( typeof \" + $schemaValue + \" != 'number' || \";\n    }\n    out += \" (division\" + $lvl + \" = \" + $data + \" / \" + $schemaValue + \", \";\n    if (it.opts.multipleOfPrecision) {\n      out += \" Math.abs(Math.round(division\" + $lvl + \") - division\" + $lvl + \") > 1e-\" + it.opts.multipleOfPrecision + \" \";\n    } else {\n      out += \" division\" + $lvl + \" !== parseInt(division\" + $lvl + \") \";\n    }\n    out += \" ) \";\n    if ($isData) {\n      out += \"  )  \";\n    }\n    out += \" ) {   \";\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = \"\";\n    if (it.createErrors !== false) {\n      out += \" { keyword: '\" + \"multipleOf\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { multipleOf: \" + $schemaValue + \" } \";\n      if (it.opts.messages !== false) {\n        out += \" , message: 'should be multiple of \";\n        if ($isData) {\n          out += \"' + \" + $schemaValue;\n        } else {\n          out += \"\" + $schemaValue + \"'\";\n        }\n      }\n      if (it.opts.verbose) {\n        out += \" , schema:  \";\n        if ($isData) {\n          out += \"validate.schema\" + $schemaPath;\n        } else {\n          out += \"\" + $schema;\n        }\n        out += \"         , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n      }\n      out += \" } \";\n    } else {\n      out += \" {} \";\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      if (it.async) {\n        out += \" throw new ValidationError([\" + __err + \"]); \";\n      } else {\n        out += \" validate.errors = [\" + __err + \"]; return false; \";\n      }\n    } else {\n      out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n    }\n    out += \"} \";\n    if ($breakOnError) {\n      out += \" else { \";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/not.js\nvar require_not = __commonJS((exports, module) => {\n  module.exports = function generate_not(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $errs = \"errs__\" + $lvl;\n    var $it = it.util.copy(it);\n    $it.level++;\n    var $nextValid = \"valid\" + $it.level;\n    if (it.opts.strictKeywords ? typeof $schema == \"object\" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {\n      $it.schema = $schema;\n      $it.schemaPath = $schemaPath;\n      $it.errSchemaPath = $errSchemaPath;\n      out += \" var \" + $errs + \" = errors;  \";\n      var $wasComposite = it.compositeRule;\n      it.compositeRule = $it.compositeRule = true;\n      $it.createErrors = false;\n      var $allErrorsOption;\n      if ($it.opts.allErrors) {\n        $allErrorsOption = $it.opts.allErrors;\n        $it.opts.allErrors = false;\n      }\n      out += \" \" + it.validate($it) + \" \";\n      $it.createErrors = true;\n      if ($allErrorsOption)\n        $it.opts.allErrors = $allErrorsOption;\n      it.compositeRule = $it.compositeRule = $wasComposite;\n      out += \" if (\" + $nextValid + \") {   \";\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = \"\";\n      if (it.createErrors !== false) {\n        out += \" { keyword: '\" + \"not\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: {} \";\n        if (it.opts.messages !== false) {\n          out += \" , message: 'should NOT be valid' \";\n        }\n        if (it.opts.verbose) {\n          out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n        }\n        out += \" } \";\n      } else {\n        out += \" {} \";\n      }\n      var __err = out;\n      out = $$outStack.pop();\n      if (!it.compositeRule && $breakOnError) {\n        if (it.async) {\n          out += \" throw new ValidationError([\" + __err + \"]); \";\n        } else {\n          out += \" validate.errors = [\" + __err + \"]; return false; \";\n        }\n      } else {\n        out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n      }\n      out += \" } else {  errors = \" + $errs + \"; if (vErrors !== null) { if (\" + $errs + \") vErrors.length = \" + $errs + \"; else vErrors = null; } \";\n      if (it.opts.allErrors) {\n        out += \" } \";\n      }\n    } else {\n      out += \"  var err =   \";\n      if (it.createErrors !== false) {\n        out += \" { keyword: '\" + \"not\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: {} \";\n        if (it.opts.messages !== false) {\n          out += \" , message: 'should NOT be valid' \";\n        }\n        if (it.opts.verbose) {\n          out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n        }\n        out += \" } \";\n      } else {\n        out += \" {} \";\n      }\n      out += \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n      if ($breakOnError) {\n        out += \" if (false) { \";\n      }\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/oneOf.js\nvar require_oneOf = __commonJS((exports, module) => {\n  module.exports = function generate_oneOf(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $valid = \"valid\" + $lvl;\n    var $errs = \"errs__\" + $lvl;\n    var $it = it.util.copy(it);\n    var $closingBraces = \"\";\n    $it.level++;\n    var $nextValid = \"valid\" + $it.level;\n    var $currentBaseId = $it.baseId, $prevValid = \"prevValid\" + $lvl, $passingSchemas = \"passingSchemas\" + $lvl;\n    out += \"var \" + $errs + \" = errors , \" + $prevValid + \" = false , \" + $valid + \" = false , \" + $passingSchemas + \" = null; \";\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    var arr1 = $schema;\n    if (arr1) {\n      var $sch, $i = -1, l1 = arr1.length - 1;\n      while ($i < l1) {\n        $sch = arr1[$i += 1];\n        if (it.opts.strictKeywords ? typeof $sch == \"object\" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + \"[\" + $i + \"]\";\n          $it.errSchemaPath = $errSchemaPath + \"/\" + $i;\n          out += \"  \" + it.validate($it) + \" \";\n          $it.baseId = $currentBaseId;\n        } else {\n          out += \" var \" + $nextValid + \" = true; \";\n        }\n        if ($i) {\n          out += \" if (\" + $nextValid + \" && \" + $prevValid + \") { \" + $valid + \" = false; \" + $passingSchemas + \" = [\" + $passingSchemas + \", \" + $i + \"]; } else { \";\n          $closingBraces += \"}\";\n        }\n        out += \" if (\" + $nextValid + \") { \" + $valid + \" = \" + $prevValid + \" = true; \" + $passingSchemas + \" = \" + $i + \"; }\";\n      }\n    }\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += \"\" + $closingBraces + \"if (!\" + $valid + \") {   var err =   \";\n    if (it.createErrors !== false) {\n      out += \" { keyword: '\" + \"oneOf\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { passingSchemas: \" + $passingSchemas + \" } \";\n      if (it.opts.messages !== false) {\n        out += \" , message: 'should match exactly one schema in oneOf' \";\n      }\n      if (it.opts.verbose) {\n        out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n      }\n      out += \" } \";\n    } else {\n      out += \" {} \";\n    }\n    out += \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n    if (!it.compositeRule && $breakOnError) {\n      if (it.async) {\n        out += \" throw new ValidationError(vErrors); \";\n      } else {\n        out += \" validate.errors = vErrors; return false; \";\n      }\n    }\n    out += \"} else {  errors = \" + $errs + \"; if (vErrors !== null) { if (\" + $errs + \") vErrors.length = \" + $errs + \"; else vErrors = null; }\";\n    if (it.opts.allErrors) {\n      out += \" } \";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/pattern.js\nvar require_pattern = __commonJS((exports, module) => {\n  module.exports = function generate_pattern(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    var $regexp = $isData ? \"(new RegExp(\" + $schemaValue + \"))\" : it.usePattern($schema);\n    out += \"if ( \";\n    if ($isData) {\n      out += \" (\" + $schemaValue + \" !== undefined && typeof \" + $schemaValue + \" != 'string') || \";\n    }\n    out += \" !\" + $regexp + \".test(\" + $data + \") ) {   \";\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = \"\";\n    if (it.createErrors !== false) {\n      out += \" { keyword: '\" + \"pattern\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { pattern:  \";\n      if ($isData) {\n        out += \"\" + $schemaValue;\n      } else {\n        out += \"\" + it.util.toQuotedString($schema);\n      }\n      out += \"  } \";\n      if (it.opts.messages !== false) {\n        out += ` , message: 'should match pattern \"`;\n        if ($isData) {\n          out += \"' + \" + $schemaValue + \" + '\";\n        } else {\n          out += \"\" + it.util.escapeQuotes($schema);\n        }\n        out += `\"' `;\n      }\n      if (it.opts.verbose) {\n        out += \" , schema:  \";\n        if ($isData) {\n          out += \"validate.schema\" + $schemaPath;\n        } else {\n          out += \"\" + it.util.toQuotedString($schema);\n        }\n        out += \"         , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n      }\n      out += \" } \";\n    } else {\n      out += \" {} \";\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      if (it.async) {\n        out += \" throw new ValidationError([\" + __err + \"]); \";\n      } else {\n        out += \" validate.errors = [\" + __err + \"]; return false; \";\n      }\n    } else {\n      out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n    }\n    out += \"} \";\n    if ($breakOnError) {\n      out += \" else { \";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/properties.js\nvar require_properties = __commonJS((exports, module) => {\n  module.exports = function generate_properties(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $errs = \"errs__\" + $lvl;\n    var $it = it.util.copy(it);\n    var $closingBraces = \"\";\n    $it.level++;\n    var $nextValid = \"valid\" + $it.level;\n    var $key = \"key\" + $lvl, $idx = \"idx\" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = \"data\" + $dataNxt, $dataProperties = \"dataProperties\" + $lvl;\n    var $schemaKeys = Object.keys($schema || {}).filter(notProto), $pProperties = it.schema.patternProperties || {}, $pPropertyKeys = Object.keys($pProperties).filter(notProto), $aProperties = it.schema.additionalProperties, $someProperties = $schemaKeys.length || $pPropertyKeys.length, $noAdditional = $aProperties === false, $additionalIsSchema = typeof $aProperties == \"object\" && Object.keys($aProperties).length, $removeAdditional = it.opts.removeAdditional, $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;\n    var $required = it.schema.required;\n    if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {\n      var $requiredHash = it.util.toHash($required);\n    }\n    function notProto(p) {\n      return p !== \"__proto__\";\n    }\n    out += \"var \" + $errs + \" = errors;var \" + $nextValid + \" = true;\";\n    if ($ownProperties) {\n      out += \" var \" + $dataProperties + \" = undefined;\";\n    }\n    if ($checkAdditional) {\n      if ($ownProperties) {\n        out += \" \" + $dataProperties + \" = \" + $dataProperties + \" || Object.keys(\" + $data + \"); for (var \" + $idx + \"=0; \" + $idx + \"<\" + $dataProperties + \".length; \" + $idx + \"++) { var \" + $key + \" = \" + $dataProperties + \"[\" + $idx + \"]; \";\n      } else {\n        out += \" for (var \" + $key + \" in \" + $data + \") { \";\n      }\n      if ($someProperties) {\n        out += \" var isAdditional\" + $lvl + \" = !(false \";\n        if ($schemaKeys.length) {\n          if ($schemaKeys.length > 8) {\n            out += \" || validate.schema\" + $schemaPath + \".hasOwnProperty(\" + $key + \") \";\n          } else {\n            var arr1 = $schemaKeys;\n            if (arr1) {\n              var $propertyKey, i1 = -1, l1 = arr1.length - 1;\n              while (i1 < l1) {\n                $propertyKey = arr1[i1 += 1];\n                out += \" || \" + $key + \" == \" + it.util.toQuotedString($propertyKey) + \" \";\n              }\n            }\n          }\n        }\n        if ($pPropertyKeys.length) {\n          var arr2 = $pPropertyKeys;\n          if (arr2) {\n            var $pProperty, $i = -1, l2 = arr2.length - 1;\n            while ($i < l2) {\n              $pProperty = arr2[$i += 1];\n              out += \" || \" + it.usePattern($pProperty) + \".test(\" + $key + \") \";\n            }\n          }\n        }\n        out += \" ); if (isAdditional\" + $lvl + \") { \";\n      }\n      if ($removeAdditional == \"all\") {\n        out += \" delete \" + $data + \"[\" + $key + \"]; \";\n      } else {\n        var $currentErrorPath = it.errorPath;\n        var $additionalProperty = \"' + \" + $key + \" + '\";\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n        }\n        if ($noAdditional) {\n          if ($removeAdditional) {\n            out += \" delete \" + $data + \"[\" + $key + \"]; \";\n          } else {\n            out += \" \" + $nextValid + \" = false; \";\n            var $currErrSchemaPath = $errSchemaPath;\n            $errSchemaPath = it.errSchemaPath + \"/additionalProperties\";\n            var $$outStack = $$outStack || [];\n            $$outStack.push(out);\n            out = \"\";\n            if (it.createErrors !== false) {\n              out += \" { keyword: '\" + \"additionalProperties\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { additionalProperty: '\" + $additionalProperty + \"' } \";\n              if (it.opts.messages !== false) {\n                out += \" , message: '\";\n                if (it.opts._errorDataPathProperty) {\n                  out += \"is an invalid additional property\";\n                } else {\n                  out += \"should NOT have additional properties\";\n                }\n                out += \"' \";\n              }\n              if (it.opts.verbose) {\n                out += \" , schema: false , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n              }\n              out += \" } \";\n            } else {\n              out += \" {} \";\n            }\n            var __err = out;\n            out = $$outStack.pop();\n            if (!it.compositeRule && $breakOnError) {\n              if (it.async) {\n                out += \" throw new ValidationError([\" + __err + \"]); \";\n              } else {\n                out += \" validate.errors = [\" + __err + \"]; return false; \";\n              }\n            } else {\n              out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n            }\n            $errSchemaPath = $currErrSchemaPath;\n            if ($breakOnError) {\n              out += \" break; \";\n            }\n          }\n        } else if ($additionalIsSchema) {\n          if ($removeAdditional == \"failing\") {\n            out += \" var \" + $errs + \" = errors;  \";\n            var $wasComposite = it.compositeRule;\n            it.compositeRule = $it.compositeRule = true;\n            $it.schema = $aProperties;\n            $it.schemaPath = it.schemaPath + \".additionalProperties\";\n            $it.errSchemaPath = it.errSchemaPath + \"/additionalProperties\";\n            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n            var $passData = $data + \"[\" + $key + \"]\";\n            $it.dataPathArr[$dataNxt] = $key;\n            var $code = it.validate($it);\n            $it.baseId = $currentBaseId;\n            if (it.util.varOccurences($code, $nextData) < 2) {\n              out += \" \" + it.util.varReplace($code, $nextData, $passData) + \" \";\n            } else {\n              out += \" var \" + $nextData + \" = \" + $passData + \"; \" + $code + \" \";\n            }\n            out += \" if (!\" + $nextValid + \") { errors = \" + $errs + \"; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete \" + $data + \"[\" + $key + \"]; }  \";\n            it.compositeRule = $it.compositeRule = $wasComposite;\n          } else {\n            $it.schema = $aProperties;\n            $it.schemaPath = it.schemaPath + \".additionalProperties\";\n            $it.errSchemaPath = it.errSchemaPath + \"/additionalProperties\";\n            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n            var $passData = $data + \"[\" + $key + \"]\";\n            $it.dataPathArr[$dataNxt] = $key;\n            var $code = it.validate($it);\n            $it.baseId = $currentBaseId;\n            if (it.util.varOccurences($code, $nextData) < 2) {\n              out += \" \" + it.util.varReplace($code, $nextData, $passData) + \" \";\n            } else {\n              out += \" var \" + $nextData + \" = \" + $passData + \"; \" + $code + \" \";\n            }\n            if ($breakOnError) {\n              out += \" if (!\" + $nextValid + \") break; \";\n            }\n          }\n        }\n        it.errorPath = $currentErrorPath;\n      }\n      if ($someProperties) {\n        out += \" } \";\n      }\n      out += \" }  \";\n      if ($breakOnError) {\n        out += \" if (\" + $nextValid + \") { \";\n        $closingBraces += \"}\";\n      }\n    }\n    var $useDefaults = it.opts.useDefaults && !it.compositeRule;\n    if ($schemaKeys.length) {\n      var arr3 = $schemaKeys;\n      if (arr3) {\n        var $propertyKey, i3 = -1, l3 = arr3.length - 1;\n        while (i3 < l3) {\n          $propertyKey = arr3[i3 += 1];\n          var $sch = $schema[$propertyKey];\n          if (it.opts.strictKeywords ? typeof $sch == \"object\" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {\n            var $prop = it.util.getProperty($propertyKey), $passData = $data + $prop, $hasDefault = $useDefaults && $sch.default !== undefined;\n            $it.schema = $sch;\n            $it.schemaPath = $schemaPath + $prop;\n            $it.errSchemaPath = $errSchemaPath + \"/\" + it.util.escapeFragment($propertyKey);\n            $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);\n            $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);\n            var $code = it.validate($it);\n            $it.baseId = $currentBaseId;\n            if (it.util.varOccurences($code, $nextData) < 2) {\n              $code = it.util.varReplace($code, $nextData, $passData);\n              var $useData = $passData;\n            } else {\n              var $useData = $nextData;\n              out += \" var \" + $nextData + \" = \" + $passData + \"; \";\n            }\n            if ($hasDefault) {\n              out += \" \" + $code + \" \";\n            } else {\n              if ($requiredHash && $requiredHash[$propertyKey]) {\n                out += \" if ( \" + $useData + \" === undefined \";\n                if ($ownProperties) {\n                  out += \" || ! Object.prototype.hasOwnProperty.call(\" + $data + \", '\" + it.util.escapeQuotes($propertyKey) + \"') \";\n                }\n                out += \") { \" + $nextValid + \" = false; \";\n                var $currentErrorPath = it.errorPath, $currErrSchemaPath = $errSchemaPath, $missingProperty = it.util.escapeQuotes($propertyKey);\n                if (it.opts._errorDataPathProperty) {\n                  it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n                }\n                $errSchemaPath = it.errSchemaPath + \"/required\";\n                var $$outStack = $$outStack || [];\n                $$outStack.push(out);\n                out = \"\";\n                if (it.createErrors !== false) {\n                  out += \" { keyword: '\" + \"required\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { missingProperty: '\" + $missingProperty + \"' } \";\n                  if (it.opts.messages !== false) {\n                    out += \" , message: '\";\n                    if (it.opts._errorDataPathProperty) {\n                      out += \"is a required property\";\n                    } else {\n                      out += \"should have required property \\\\'\" + $missingProperty + \"\\\\'\";\n                    }\n                    out += \"' \";\n                  }\n                  if (it.opts.verbose) {\n                    out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n                  }\n                  out += \" } \";\n                } else {\n                  out += \" {} \";\n                }\n                var __err = out;\n                out = $$outStack.pop();\n                if (!it.compositeRule && $breakOnError) {\n                  if (it.async) {\n                    out += \" throw new ValidationError([\" + __err + \"]); \";\n                  } else {\n                    out += \" validate.errors = [\" + __err + \"]; return false; \";\n                  }\n                } else {\n                  out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n                }\n                $errSchemaPath = $currErrSchemaPath;\n                it.errorPath = $currentErrorPath;\n                out += \" } else { \";\n              } else {\n                if ($breakOnError) {\n                  out += \" if ( \" + $useData + \" === undefined \";\n                  if ($ownProperties) {\n                    out += \" || ! Object.prototype.hasOwnProperty.call(\" + $data + \", '\" + it.util.escapeQuotes($propertyKey) + \"') \";\n                  }\n                  out += \") { \" + $nextValid + \" = true; } else { \";\n                } else {\n                  out += \" if (\" + $useData + \" !== undefined \";\n                  if ($ownProperties) {\n                    out += \" &&   Object.prototype.hasOwnProperty.call(\" + $data + \", '\" + it.util.escapeQuotes($propertyKey) + \"') \";\n                  }\n                  out += \" ) { \";\n                }\n              }\n              out += \" \" + $code + \" } \";\n            }\n          }\n          if ($breakOnError) {\n            out += \" if (\" + $nextValid + \") { \";\n            $closingBraces += \"}\";\n          }\n        }\n      }\n    }\n    if ($pPropertyKeys.length) {\n      var arr4 = $pPropertyKeys;\n      if (arr4) {\n        var $pProperty, i4 = -1, l4 = arr4.length - 1;\n        while (i4 < l4) {\n          $pProperty = arr4[i4 += 1];\n          var $sch = $pProperties[$pProperty];\n          if (it.opts.strictKeywords ? typeof $sch == \"object\" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {\n            $it.schema = $sch;\n            $it.schemaPath = it.schemaPath + \".patternProperties\" + it.util.getProperty($pProperty);\n            $it.errSchemaPath = it.errSchemaPath + \"/patternProperties/\" + it.util.escapeFragment($pProperty);\n            if ($ownProperties) {\n              out += \" \" + $dataProperties + \" = \" + $dataProperties + \" || Object.keys(\" + $data + \"); for (var \" + $idx + \"=0; \" + $idx + \"<\" + $dataProperties + \".length; \" + $idx + \"++) { var \" + $key + \" = \" + $dataProperties + \"[\" + $idx + \"]; \";\n            } else {\n              out += \" for (var \" + $key + \" in \" + $data + \") { \";\n            }\n            out += \" if (\" + it.usePattern($pProperty) + \".test(\" + $key + \")) { \";\n            $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n            var $passData = $data + \"[\" + $key + \"]\";\n            $it.dataPathArr[$dataNxt] = $key;\n            var $code = it.validate($it);\n            $it.baseId = $currentBaseId;\n            if (it.util.varOccurences($code, $nextData) < 2) {\n              out += \" \" + it.util.varReplace($code, $nextData, $passData) + \" \";\n            } else {\n              out += \" var \" + $nextData + \" = \" + $passData + \"; \" + $code + \" \";\n            }\n            if ($breakOnError) {\n              out += \" if (!\" + $nextValid + \") break; \";\n            }\n            out += \" } \";\n            if ($breakOnError) {\n              out += \" else \" + $nextValid + \" = true; \";\n            }\n            out += \" }  \";\n            if ($breakOnError) {\n              out += \" if (\" + $nextValid + \") { \";\n              $closingBraces += \"}\";\n            }\n          }\n        }\n      }\n    }\n    if ($breakOnError) {\n      out += \" \" + $closingBraces + \" if (\" + $errs + \" == errors) {\";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/propertyNames.js\nvar require_propertyNames = __commonJS((exports, module) => {\n  module.exports = function generate_propertyNames(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $errs = \"errs__\" + $lvl;\n    var $it = it.util.copy(it);\n    var $closingBraces = \"\";\n    $it.level++;\n    var $nextValid = \"valid\" + $it.level;\n    out += \"var \" + $errs + \" = errors;\";\n    if (it.opts.strictKeywords ? typeof $schema == \"object\" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {\n      $it.schema = $schema;\n      $it.schemaPath = $schemaPath;\n      $it.errSchemaPath = $errSchemaPath;\n      var $key = \"key\" + $lvl, $idx = \"idx\" + $lvl, $i = \"i\" + $lvl, $invalidName = \"' + \" + $key + \" + '\", $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = \"data\" + $dataNxt, $dataProperties = \"dataProperties\" + $lvl, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;\n      if ($ownProperties) {\n        out += \" var \" + $dataProperties + \" = undefined; \";\n      }\n      if ($ownProperties) {\n        out += \" \" + $dataProperties + \" = \" + $dataProperties + \" || Object.keys(\" + $data + \"); for (var \" + $idx + \"=0; \" + $idx + \"<\" + $dataProperties + \".length; \" + $idx + \"++) { var \" + $key + \" = \" + $dataProperties + \"[\" + $idx + \"]; \";\n      } else {\n        out += \" for (var \" + $key + \" in \" + $data + \") { \";\n      }\n      out += \" var startErrs\" + $lvl + \" = errors; \";\n      var $passData = $key;\n      var $wasComposite = it.compositeRule;\n      it.compositeRule = $it.compositeRule = true;\n      var $code = it.validate($it);\n      $it.baseId = $currentBaseId;\n      if (it.util.varOccurences($code, $nextData) < 2) {\n        out += \" \" + it.util.varReplace($code, $nextData, $passData) + \" \";\n      } else {\n        out += \" var \" + $nextData + \" = \" + $passData + \"; \" + $code + \" \";\n      }\n      it.compositeRule = $it.compositeRule = $wasComposite;\n      out += \" if (!\" + $nextValid + \") { for (var \" + $i + \"=startErrs\" + $lvl + \"; \" + $i + \"<errors; \" + $i + \"++) { vErrors[\" + $i + \"].propertyName = \" + $key + \"; }   var err =   \";\n      if (it.createErrors !== false) {\n        out += \" { keyword: '\" + \"propertyNames\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { propertyName: '\" + $invalidName + \"' } \";\n        if (it.opts.messages !== false) {\n          out += \" , message: 'property name \\\\'\" + $invalidName + \"\\\\' is invalid' \";\n        }\n        if (it.opts.verbose) {\n          out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n        }\n        out += \" } \";\n      } else {\n        out += \" {} \";\n      }\n      out += \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n      if (!it.compositeRule && $breakOnError) {\n        if (it.async) {\n          out += \" throw new ValidationError(vErrors); \";\n        } else {\n          out += \" validate.errors = vErrors; return false; \";\n        }\n      }\n      if ($breakOnError) {\n        out += \" break; \";\n      }\n      out += \" } }\";\n    }\n    if ($breakOnError) {\n      out += \" \" + $closingBraces + \" if (\" + $errs + \" == errors) {\";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/required.js\nvar require_required = __commonJS((exports, module) => {\n  module.exports = function generate_required(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $valid = \"valid\" + $lvl;\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    var $vSchema = \"schema\" + $lvl;\n    if (!$isData) {\n      if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {\n        var $required = [];\n        var arr1 = $schema;\n        if (arr1) {\n          var $property, i1 = -1, l1 = arr1.length - 1;\n          while (i1 < l1) {\n            $property = arr1[i1 += 1];\n            var $propertySch = it.schema.properties[$property];\n            if (!($propertySch && (it.opts.strictKeywords ? typeof $propertySch == \"object\" && Object.keys($propertySch).length > 0 || $propertySch === false : it.util.schemaHasRules($propertySch, it.RULES.all)))) {\n              $required[$required.length] = $property;\n            }\n          }\n        }\n      } else {\n        var $required = $schema;\n      }\n    }\n    if ($isData || $required.length) {\n      var $currentErrorPath = it.errorPath, $loopRequired = $isData || $required.length >= it.opts.loopRequired, $ownProperties = it.opts.ownProperties;\n      if ($breakOnError) {\n        out += \" var missing\" + $lvl + \"; \";\n        if ($loopRequired) {\n          if (!$isData) {\n            out += \" var \" + $vSchema + \" = validate.schema\" + $schemaPath + \"; \";\n          }\n          var $i = \"i\" + $lvl, $propertyPath = \"schema\" + $lvl + \"[\" + $i + \"]\", $missingProperty = \"' + \" + $propertyPath + \" + '\";\n          if (it.opts._errorDataPathProperty) {\n            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);\n          }\n          out += \" var \" + $valid + \" = true; \";\n          if ($isData) {\n            out += \" if (schema\" + $lvl + \" === undefined) \" + $valid + \" = true; else if (!Array.isArray(schema\" + $lvl + \")) \" + $valid + \" = false; else {\";\n          }\n          out += \" for (var \" + $i + \" = 0; \" + $i + \" < \" + $vSchema + \".length; \" + $i + \"++) { \" + $valid + \" = \" + $data + \"[\" + $vSchema + \"[\" + $i + \"]] !== undefined \";\n          if ($ownProperties) {\n            out += \" &&   Object.prototype.hasOwnProperty.call(\" + $data + \", \" + $vSchema + \"[\" + $i + \"]) \";\n          }\n          out += \"; if (!\" + $valid + \") break; } \";\n          if ($isData) {\n            out += \"  }  \";\n          }\n          out += \"  if (!\" + $valid + \") {   \";\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = \"\";\n          if (it.createErrors !== false) {\n            out += \" { keyword: '\" + \"required\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { missingProperty: '\" + $missingProperty + \"' } \";\n            if (it.opts.messages !== false) {\n              out += \" , message: '\";\n              if (it.opts._errorDataPathProperty) {\n                out += \"is a required property\";\n              } else {\n                out += \"should have required property \\\\'\" + $missingProperty + \"\\\\'\";\n              }\n              out += \"' \";\n            }\n            if (it.opts.verbose) {\n              out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n            }\n            out += \" } \";\n          } else {\n            out += \" {} \";\n          }\n          var __err = out;\n          out = $$outStack.pop();\n          if (!it.compositeRule && $breakOnError) {\n            if (it.async) {\n              out += \" throw new ValidationError([\" + __err + \"]); \";\n            } else {\n              out += \" validate.errors = [\" + __err + \"]; return false; \";\n            }\n          } else {\n            out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n          }\n          out += \" } else { \";\n        } else {\n          out += \" if ( \";\n          var arr2 = $required;\n          if (arr2) {\n            var $propertyKey, $i = -1, l2 = arr2.length - 1;\n            while ($i < l2) {\n              $propertyKey = arr2[$i += 1];\n              if ($i) {\n                out += \" || \";\n              }\n              var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;\n              out += \" ( ( \" + $useData + \" === undefined \";\n              if ($ownProperties) {\n                out += \" || ! Object.prototype.hasOwnProperty.call(\" + $data + \", '\" + it.util.escapeQuotes($propertyKey) + \"') \";\n              }\n              out += \") && (missing\" + $lvl + \" = \" + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + \") ) \";\n            }\n          }\n          out += \") {  \";\n          var $propertyPath = \"missing\" + $lvl, $missingProperty = \"' + \" + $propertyPath + \" + '\";\n          if (it.opts._errorDataPathProperty) {\n            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + \" + \" + $propertyPath;\n          }\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = \"\";\n          if (it.createErrors !== false) {\n            out += \" { keyword: '\" + \"required\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { missingProperty: '\" + $missingProperty + \"' } \";\n            if (it.opts.messages !== false) {\n              out += \" , message: '\";\n              if (it.opts._errorDataPathProperty) {\n                out += \"is a required property\";\n              } else {\n                out += \"should have required property \\\\'\" + $missingProperty + \"\\\\'\";\n              }\n              out += \"' \";\n            }\n            if (it.opts.verbose) {\n              out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n            }\n            out += \" } \";\n          } else {\n            out += \" {} \";\n          }\n          var __err = out;\n          out = $$outStack.pop();\n          if (!it.compositeRule && $breakOnError) {\n            if (it.async) {\n              out += \" throw new ValidationError([\" + __err + \"]); \";\n            } else {\n              out += \" validate.errors = [\" + __err + \"]; return false; \";\n            }\n          } else {\n            out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n          }\n          out += \" } else { \";\n        }\n      } else {\n        if ($loopRequired) {\n          if (!$isData) {\n            out += \" var \" + $vSchema + \" = validate.schema\" + $schemaPath + \"; \";\n          }\n          var $i = \"i\" + $lvl, $propertyPath = \"schema\" + $lvl + \"[\" + $i + \"]\", $missingProperty = \"' + \" + $propertyPath + \" + '\";\n          if (it.opts._errorDataPathProperty) {\n            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);\n          }\n          if ($isData) {\n            out += \" if (\" + $vSchema + \" && !Array.isArray(\" + $vSchema + \")) {  var err =   \";\n            if (it.createErrors !== false) {\n              out += \" { keyword: '\" + \"required\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { missingProperty: '\" + $missingProperty + \"' } \";\n              if (it.opts.messages !== false) {\n                out += \" , message: '\";\n                if (it.opts._errorDataPathProperty) {\n                  out += \"is a required property\";\n                } else {\n                  out += \"should have required property \\\\'\" + $missingProperty + \"\\\\'\";\n                }\n                out += \"' \";\n              }\n              if (it.opts.verbose) {\n                out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n              }\n              out += \" } \";\n            } else {\n              out += \" {} \";\n            }\n            out += \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (\" + $vSchema + \" !== undefined) { \";\n          }\n          out += \" for (var \" + $i + \" = 0; \" + $i + \" < \" + $vSchema + \".length; \" + $i + \"++) { if (\" + $data + \"[\" + $vSchema + \"[\" + $i + \"]] === undefined \";\n          if ($ownProperties) {\n            out += \" || ! Object.prototype.hasOwnProperty.call(\" + $data + \", \" + $vSchema + \"[\" + $i + \"]) \";\n          }\n          out += \") {  var err =   \";\n          if (it.createErrors !== false) {\n            out += \" { keyword: '\" + \"required\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { missingProperty: '\" + $missingProperty + \"' } \";\n            if (it.opts.messages !== false) {\n              out += \" , message: '\";\n              if (it.opts._errorDataPathProperty) {\n                out += \"is a required property\";\n              } else {\n                out += \"should have required property \\\\'\" + $missingProperty + \"\\\\'\";\n              }\n              out += \"' \";\n            }\n            if (it.opts.verbose) {\n              out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n            }\n            out += \" } \";\n          } else {\n            out += \" {} \";\n          }\n          out += \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } \";\n          if ($isData) {\n            out += \"  }  \";\n          }\n        } else {\n          var arr3 = $required;\n          if (arr3) {\n            var $propertyKey, i3 = -1, l3 = arr3.length - 1;\n            while (i3 < l3) {\n              $propertyKey = arr3[i3 += 1];\n              var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;\n              if (it.opts._errorDataPathProperty) {\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n              }\n              out += \" if ( \" + $useData + \" === undefined \";\n              if ($ownProperties) {\n                out += \" || ! Object.prototype.hasOwnProperty.call(\" + $data + \", '\" + it.util.escapeQuotes($propertyKey) + \"') \";\n              }\n              out += \") {  var err =   \";\n              if (it.createErrors !== false) {\n                out += \" { keyword: '\" + \"required\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { missingProperty: '\" + $missingProperty + \"' } \";\n                if (it.opts.messages !== false) {\n                  out += \" , message: '\";\n                  if (it.opts._errorDataPathProperty) {\n                    out += \"is a required property\";\n                  } else {\n                    out += \"should have required property \\\\'\" + $missingProperty + \"\\\\'\";\n                  }\n                  out += \"' \";\n                }\n                if (it.opts.verbose) {\n                  out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n                }\n                out += \" } \";\n              } else {\n                out += \" {} \";\n              }\n              out += \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } \";\n            }\n          }\n        }\n      }\n      it.errorPath = $currentErrorPath;\n    } else if ($breakOnError) {\n      out += \" if (true) {\";\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/uniqueItems.js\nvar require_uniqueItems = __commonJS((exports, module) => {\n  module.exports = function generate_uniqueItems(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $valid = \"valid\" + $lvl;\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    if (($schema || $isData) && it.opts.uniqueItems !== false) {\n      if ($isData) {\n        out += \" var \" + $valid + \"; if (\" + $schemaValue + \" === false || \" + $schemaValue + \" === undefined) \" + $valid + \" = true; else if (typeof \" + $schemaValue + \" != 'boolean') \" + $valid + \" = false; else { \";\n      }\n      out += \" var i = \" + $data + \".length , \" + $valid + \" = true , j; if (i > 1) { \";\n      var $itemType = it.schema.items && it.schema.items.type, $typeIsArray = Array.isArray($itemType);\n      if (!$itemType || $itemType == \"object\" || $itemType == \"array\" || $typeIsArray && ($itemType.indexOf(\"object\") >= 0 || $itemType.indexOf(\"array\") >= 0)) {\n        out += \" outer: for (;i--;) { for (j = i; j--;) { if (equal(\" + $data + \"[i], \" + $data + \"[j])) { \" + $valid + \" = false; break outer; } } } \";\n      } else {\n        out += \" var itemIndices = {}, item; for (;i--;) { var item = \" + $data + \"[i]; \";\n        var $method = \"checkDataType\" + ($typeIsArray ? \"s\" : \"\");\n        out += \" if (\" + it.util[$method]($itemType, \"item\", it.opts.strictNumbers, true) + \") continue; \";\n        if ($typeIsArray) {\n          out += ` if (typeof item == 'string') item = '\"' + item; `;\n        }\n        out += \" if (typeof itemIndices[item] == 'number') { \" + $valid + \" = false; j = itemIndices[item]; break; } itemIndices[item] = i; } \";\n      }\n      out += \" } \";\n      if ($isData) {\n        out += \"  }  \";\n      }\n      out += \" if (!\" + $valid + \") {   \";\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = \"\";\n      if (it.createErrors !== false) {\n        out += \" { keyword: '\" + \"uniqueItems\" + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { i: i, j: j } \";\n        if (it.opts.messages !== false) {\n          out += \" , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' \";\n        }\n        if (it.opts.verbose) {\n          out += \" , schema:  \";\n          if ($isData) {\n            out += \"validate.schema\" + $schemaPath;\n          } else {\n            out += \"\" + $schema;\n          }\n          out += \"         , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n        }\n        out += \" } \";\n      } else {\n        out += \" {} \";\n      }\n      var __err = out;\n      out = $$outStack.pop();\n      if (!it.compositeRule && $breakOnError) {\n        if (it.async) {\n          out += \" throw new ValidationError([\" + __err + \"]); \";\n        } else {\n          out += \" validate.errors = [\" + __err + \"]; return false; \";\n        }\n      } else {\n        out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n      }\n      out += \" } \";\n      if ($breakOnError) {\n        out += \" else { \";\n      }\n    } else {\n      if ($breakOnError) {\n        out += \" if (true) { \";\n      }\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/dotjs/index.js\nvar require_dotjs = __commonJS((exports, module) => {\n  module.exports = {\n    $ref: require_ref(),\n    allOf: require_allOf(),\n    anyOf: require_anyOf(),\n    $comment: require_comment(),\n    const: require_const(),\n    contains: require_contains(),\n    dependencies: require_dependencies(),\n    enum: require_enum(),\n    format: require_format(),\n    if: require_if(),\n    items: require_items(),\n    maximum: require__limit(),\n    minimum: require__limit(),\n    maxItems: require__limitItems(),\n    minItems: require__limitItems(),\n    maxLength: require__limitLength(),\n    minLength: require__limitLength(),\n    maxProperties: require__limitProperties(),\n    minProperties: require__limitProperties(),\n    multipleOf: require_multipleOf(),\n    not: require_not(),\n    oneOf: require_oneOf(),\n    pattern: require_pattern(),\n    properties: require_properties(),\n    propertyNames: require_propertyNames(),\n    required: require_required(),\n    uniqueItems: require_uniqueItems(),\n    validate: require_validate()\n  };\n});\n\n// ../node_modules/ajv/lib/compile/rules.js\nvar require_rules = __commonJS((exports, module) => {\n  var ruleModules = require_dotjs();\n  var toHash = require_util().toHash;\n  module.exports = function rules() {\n    var RULES = [\n      {\n        type: \"number\",\n        rules: [\n          { maximum: [\"exclusiveMaximum\"] },\n          { minimum: [\"exclusiveMinimum\"] },\n          \"multipleOf\",\n          \"format\"\n        ]\n      },\n      {\n        type: \"string\",\n        rules: [\"maxLength\", \"minLength\", \"pattern\", \"format\"]\n      },\n      {\n        type: \"array\",\n        rules: [\"maxItems\", \"minItems\", \"items\", \"contains\", \"uniqueItems\"]\n      },\n      {\n        type: \"object\",\n        rules: [\n          \"maxProperties\",\n          \"minProperties\",\n          \"required\",\n          \"dependencies\",\n          \"propertyNames\",\n          { properties: [\"additionalProperties\", \"patternProperties\"] }\n        ]\n      },\n      { rules: [\"$ref\", \"const\", \"enum\", \"not\", \"anyOf\", \"oneOf\", \"allOf\", \"if\"] }\n    ];\n    var ALL = [\"type\", \"$comment\"];\n    var KEYWORDS = [\n      \"$schema\",\n      \"$id\",\n      \"id\",\n      \"$data\",\n      \"$async\",\n      \"title\",\n      \"description\",\n      \"default\",\n      \"definitions\",\n      \"examples\",\n      \"readOnly\",\n      \"writeOnly\",\n      \"contentMediaType\",\n      \"contentEncoding\",\n      \"additionalItems\",\n      \"then\",\n      \"else\"\n    ];\n    var TYPES = [\"number\", \"integer\", \"string\", \"array\", \"object\", \"boolean\", \"null\"];\n    RULES.all = toHash(ALL);\n    RULES.types = toHash(TYPES);\n    RULES.forEach(function(group) {\n      group.rules = group.rules.map(function(keyword) {\n        var implKeywords;\n        if (typeof keyword == \"object\") {\n          var key = Object.keys(keyword)[0];\n          implKeywords = keyword[key];\n          keyword = key;\n          implKeywords.forEach(function(k) {\n            ALL.push(k);\n            RULES.all[k] = true;\n          });\n        }\n        ALL.push(keyword);\n        var rule = RULES.all[keyword] = {\n          keyword,\n          code: ruleModules[keyword],\n          implements: implKeywords\n        };\n        return rule;\n      });\n      RULES.all.$comment = {\n        keyword: \"$comment\",\n        code: ruleModules.$comment\n      };\n      if (group.type)\n        RULES.types[group.type] = group;\n    });\n    RULES.keywords = toHash(ALL.concat(KEYWORDS));\n    RULES.custom = {};\n    return RULES;\n  };\n});\n\n// ../node_modules/ajv/lib/data.js\nvar require_data = __commonJS((exports, module) => {\n  var KEYWORDS = [\n    \"multipleOf\",\n    \"maximum\",\n    \"exclusiveMaximum\",\n    \"minimum\",\n    \"exclusiveMinimum\",\n    \"maxLength\",\n    \"minLength\",\n    \"pattern\",\n    \"additionalItems\",\n    \"maxItems\",\n    \"minItems\",\n    \"uniqueItems\",\n    \"maxProperties\",\n    \"minProperties\",\n    \"required\",\n    \"additionalProperties\",\n    \"enum\",\n    \"format\",\n    \"const\"\n  ];\n  module.exports = function(metaSchema, keywordsJsonPointers) {\n    for (var i = 0;i < keywordsJsonPointers.length; i++) {\n      metaSchema = JSON.parse(JSON.stringify(metaSchema));\n      var segments = keywordsJsonPointers[i].split(\"/\");\n      var keywords = metaSchema;\n      var j;\n      for (j = 1;j < segments.length; j++)\n        keywords = keywords[segments[j]];\n      for (j = 0;j < KEYWORDS.length; j++) {\n        var key = KEYWORDS[j];\n        var schema = keywords[key];\n        if (schema) {\n          keywords[key] = {\n            anyOf: [\n              schema,\n              { $ref: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\" }\n            ]\n          };\n        }\n      }\n    }\n    return metaSchema;\n  };\n});\n\n// ../node_modules/ajv/lib/compile/async.js\nvar require_async = __commonJS((exports, module) => {\n  var MissingRefError = require_error_classes().MissingRef;\n  module.exports = compileAsync;\n  function compileAsync(schema, meta, callback) {\n    var self2 = this;\n    if (typeof this._opts.loadSchema != \"function\")\n      throw new Error(\"options.loadSchema should be a function\");\n    if (typeof meta == \"function\") {\n      callback = meta;\n      meta = undefined;\n    }\n    var p = loadMetaSchemaOf(schema).then(function() {\n      var schemaObj = self2._addSchema(schema, undefined, meta);\n      return schemaObj.validate || _compileAsync(schemaObj);\n    });\n    if (callback) {\n      p.then(function(v) {\n        callback(null, v);\n      }, callback);\n    }\n    return p;\n    function loadMetaSchemaOf(sch) {\n      var $schema = sch.$schema;\n      return $schema && !self2.getSchema($schema) ? compileAsync.call(self2, { $ref: $schema }, true) : Promise.resolve();\n    }\n    function _compileAsync(schemaObj) {\n      try {\n        return self2._compile(schemaObj);\n      } catch (e) {\n        if (e instanceof MissingRefError)\n          return loadMissingSchema(e);\n        throw e;\n      }\n      function loadMissingSchema(e) {\n        var ref = e.missingSchema;\n        if (added(ref))\n          throw new Error(\"Schema \" + ref + \" is loaded but \" + e.missingRef + \" cannot be resolved\");\n        var schemaPromise = self2._loadingSchemas[ref];\n        if (!schemaPromise) {\n          schemaPromise = self2._loadingSchemas[ref] = self2._opts.loadSchema(ref);\n          schemaPromise.then(removePromise, removePromise);\n        }\n        return schemaPromise.then(function(sch) {\n          if (!added(ref)) {\n            return loadMetaSchemaOf(sch).then(function() {\n              if (!added(ref))\n                self2.addSchema(sch, ref, undefined, meta);\n            });\n          }\n        }).then(function() {\n          return _compileAsync(schemaObj);\n        });\n        function removePromise() {\n          delete self2._loadingSchemas[ref];\n        }\n        function added(ref2) {\n          return self2._refs[ref2] || self2._schemas[ref2];\n        }\n      }\n    }\n  }\n});\n\n// ../node_modules/ajv/lib/dotjs/custom.js\nvar require_custom = __commonJS((exports, module) => {\n  module.exports = function generate_custom(it, $keyword, $ruleType) {\n    var out = \" \";\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + \"/\" + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $errorKeyword;\n    var $data = \"data\" + ($dataLvl || \"\");\n    var $valid = \"valid\" + $lvl;\n    var $errs = \"errs__\" + $lvl;\n    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;\n    if ($isData) {\n      out += \" var schema\" + $lvl + \" = \" + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + \"; \";\n      $schemaValue = \"schema\" + $lvl;\n    } else {\n      $schemaValue = $schema;\n    }\n    var $rule = this, $definition = \"definition\" + $lvl, $rDef = $rule.definition, $closingBraces = \"\";\n    var $compile, $inline, $macro, $ruleValidate, $validateCode;\n    if ($isData && $rDef.$data) {\n      $validateCode = \"keywordValidate\" + $lvl;\n      var $validateSchema = $rDef.validateSchema;\n      out += \" var \" + $definition + \" = RULES.custom['\" + $keyword + \"'].definition; var \" + $validateCode + \" = \" + $definition + \".validate;\";\n    } else {\n      $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);\n      if (!$ruleValidate)\n        return;\n      $schemaValue = \"validate.schema\" + $schemaPath;\n      $validateCode = $ruleValidate.code;\n      $compile = $rDef.compile;\n      $inline = $rDef.inline;\n      $macro = $rDef.macro;\n    }\n    var $ruleErrs = $validateCode + \".errors\", $i = \"i\" + $lvl, $ruleErr = \"ruleErr\" + $lvl, $asyncKeyword = $rDef.async;\n    if ($asyncKeyword && !it.async)\n      throw new Error(\"async keyword in sync schema\");\n    if (!($inline || $macro)) {\n      out += \"\" + $ruleErrs + \" = null;\";\n    }\n    out += \"var \" + $errs + \" = errors;var \" + $valid + \";\";\n    if ($isData && $rDef.$data) {\n      $closingBraces += \"}\";\n      out += \" if (\" + $schemaValue + \" === undefined) { \" + $valid + \" = true; } else { \";\n      if ($validateSchema) {\n        $closingBraces += \"}\";\n        out += \" \" + $valid + \" = \" + $definition + \".validateSchema(\" + $schemaValue + \"); if (\" + $valid + \") { \";\n      }\n    }\n    if ($inline) {\n      if ($rDef.statements) {\n        out += \" \" + $ruleValidate.validate + \" \";\n      } else {\n        out += \" \" + $valid + \" = \" + $ruleValidate.validate + \"; \";\n      }\n    } else if ($macro) {\n      var $it = it.util.copy(it);\n      var $closingBraces = \"\";\n      $it.level++;\n      var $nextValid = \"valid\" + $it.level;\n      $it.schema = $ruleValidate.validate;\n      $it.schemaPath = \"\";\n      var $wasComposite = it.compositeRule;\n      it.compositeRule = $it.compositeRule = true;\n      var $code = it.validate($it).replace(/validate\\.schema/g, $validateCode);\n      it.compositeRule = $it.compositeRule = $wasComposite;\n      out += \" \" + $code;\n    } else {\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = \"\";\n      out += \"  \" + $validateCode + \".call( \";\n      if (it.opts.passContext) {\n        out += \"this\";\n      } else {\n        out += \"self\";\n      }\n      if ($compile || $rDef.schema === false) {\n        out += \" , \" + $data + \" \";\n      } else {\n        out += \" , \" + $schemaValue + \" , \" + $data + \" , validate.schema\" + it.schemaPath + \" \";\n      }\n      out += \" , (dataPath || '')\";\n      if (it.errorPath != '\"\"') {\n        out += \" + \" + it.errorPath;\n      }\n      var $parentData = $dataLvl ? \"data\" + ($dataLvl - 1 || \"\") : \"parentData\", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : \"parentDataProperty\";\n      out += \" , \" + $parentData + \" , \" + $parentDataProperty + \" , rootData )  \";\n      var def_callRuleValidate = out;\n      out = $$outStack.pop();\n      if ($rDef.errors === false) {\n        out += \" \" + $valid + \" = \";\n        if ($asyncKeyword) {\n          out += \"await \";\n        }\n        out += \"\" + def_callRuleValidate + \"; \";\n      } else {\n        if ($asyncKeyword) {\n          $ruleErrs = \"customErrors\" + $lvl;\n          out += \" var \" + $ruleErrs + \" = null; try { \" + $valid + \" = await \" + def_callRuleValidate + \"; } catch (e) { \" + $valid + \" = false; if (e instanceof ValidationError) \" + $ruleErrs + \" = e.errors; else throw e; } \";\n        } else {\n          out += \" \" + $ruleErrs + \" = null; \" + $valid + \" = \" + def_callRuleValidate + \"; \";\n        }\n      }\n    }\n    if ($rDef.modifying) {\n      out += \" if (\" + $parentData + \") \" + $data + \" = \" + $parentData + \"[\" + $parentDataProperty + \"];\";\n    }\n    out += \"\" + $closingBraces;\n    if ($rDef.valid) {\n      if ($breakOnError) {\n        out += \" if (true) { \";\n      }\n    } else {\n      out += \" if ( \";\n      if ($rDef.valid === undefined) {\n        out += \" !\";\n        if ($macro) {\n          out += \"\" + $nextValid;\n        } else {\n          out += \"\" + $valid;\n        }\n      } else {\n        out += \" \" + !$rDef.valid + \" \";\n      }\n      out += \") { \";\n      $errorKeyword = $rule.keyword;\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = \"\";\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = \"\";\n      if (it.createErrors !== false) {\n        out += \" { keyword: '\" + ($errorKeyword || \"custom\") + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { keyword: '\" + $rule.keyword + \"' } \";\n        if (it.opts.messages !== false) {\n          out += ` , message: 'should pass \"` + $rule.keyword + `\" keyword validation' `;\n        }\n        if (it.opts.verbose) {\n          out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n        }\n        out += \" } \";\n      } else {\n        out += \" {} \";\n      }\n      var __err = out;\n      out = $$outStack.pop();\n      if (!it.compositeRule && $breakOnError) {\n        if (it.async) {\n          out += \" throw new ValidationError([\" + __err + \"]); \";\n        } else {\n          out += \" validate.errors = [\" + __err + \"]; return false; \";\n        }\n      } else {\n        out += \" var err = \" + __err + \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n      }\n      var def_customError = out;\n      out = $$outStack.pop();\n      if ($inline) {\n        if ($rDef.errors) {\n          if ($rDef.errors != \"full\") {\n            out += \"  for (var \" + $i + \"=\" + $errs + \"; \" + $i + \"<errors; \" + $i + \"++) { var \" + $ruleErr + \" = vErrors[\" + $i + \"]; if (\" + $ruleErr + \".dataPath === undefined) \" + $ruleErr + \".dataPath = (dataPath || '') + \" + it.errorPath + \"; if (\" + $ruleErr + \".schemaPath === undefined) { \" + $ruleErr + '.schemaPath = \"' + $errSchemaPath + '\"; } ';\n            if (it.opts.verbose) {\n              out += \" \" + $ruleErr + \".schema = \" + $schemaValue + \"; \" + $ruleErr + \".data = \" + $data + \"; \";\n            }\n            out += \" } \";\n          }\n        } else {\n          if ($rDef.errors === false) {\n            out += \" \" + def_customError + \" \";\n          } else {\n            out += \" if (\" + $errs + \" == errors) { \" + def_customError + \" } else {  for (var \" + $i + \"=\" + $errs + \"; \" + $i + \"<errors; \" + $i + \"++) { var \" + $ruleErr + \" = vErrors[\" + $i + \"]; if (\" + $ruleErr + \".dataPath === undefined) \" + $ruleErr + \".dataPath = (dataPath || '') + \" + it.errorPath + \"; if (\" + $ruleErr + \".schemaPath === undefined) { \" + $ruleErr + '.schemaPath = \"' + $errSchemaPath + '\"; } ';\n            if (it.opts.verbose) {\n              out += \" \" + $ruleErr + \".schema = \" + $schemaValue + \"; \" + $ruleErr + \".data = \" + $data + \"; \";\n            }\n            out += \" } } \";\n          }\n        }\n      } else if ($macro) {\n        out += \"   var err =   \";\n        if (it.createErrors !== false) {\n          out += \" { keyword: '\" + ($errorKeyword || \"custom\") + \"' , dataPath: (dataPath || '') + \" + it.errorPath + \" , schemaPath: \" + it.util.toQuotedString($errSchemaPath) + \" , params: { keyword: '\" + $rule.keyword + \"' } \";\n          if (it.opts.messages !== false) {\n            out += ` , message: 'should pass \"` + $rule.keyword + `\" keyword validation' `;\n          }\n          if (it.opts.verbose) {\n            out += \" , schema: validate.schema\" + $schemaPath + \" , parentSchema: validate.schema\" + it.schemaPath + \" , data: \" + $data + \" \";\n          }\n          out += \" } \";\n        } else {\n          out += \" {} \";\n        }\n        out += \";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; \";\n        if (!it.compositeRule && $breakOnError) {\n          if (it.async) {\n            out += \" throw new ValidationError(vErrors); \";\n          } else {\n            out += \" validate.errors = vErrors; return false; \";\n          }\n        }\n      } else {\n        if ($rDef.errors === false) {\n          out += \" \" + def_customError + \" \";\n        } else {\n          out += \" if (Array.isArray(\" + $ruleErrs + \")) { if (vErrors === null) vErrors = \" + $ruleErrs + \"; else vErrors = vErrors.concat(\" + $ruleErrs + \"); errors = vErrors.length;  for (var \" + $i + \"=\" + $errs + \"; \" + $i + \"<errors; \" + $i + \"++) { var \" + $ruleErr + \" = vErrors[\" + $i + \"]; if (\" + $ruleErr + \".dataPath === undefined) \" + $ruleErr + \".dataPath = (dataPath || '') + \" + it.errorPath + \";  \" + $ruleErr + '.schemaPath = \"' + $errSchemaPath + '\";  ';\n          if (it.opts.verbose) {\n            out += \" \" + $ruleErr + \".schema = \" + $schemaValue + \"; \" + $ruleErr + \".data = \" + $data + \"; \";\n          }\n          out += \" } } else { \" + def_customError + \" } \";\n        }\n      }\n      out += \" } \";\n      if ($breakOnError) {\n        out += \" else { \";\n      }\n    }\n    return out;\n  };\n});\n\n// ../node_modules/ajv/lib/refs/json-schema-draft-07.json\nvar require_json_schema_draft_07 = __commonJS((exports, module) => {\n  module.exports = {\n    $schema: \"http://json-schema.org/draft-07/schema#\",\n    $id: \"http://json-schema.org/draft-07/schema#\",\n    title: \"Core schema meta-schema\",\n    definitions: {\n      schemaArray: {\n        type: \"array\",\n        minItems: 1,\n        items: { $ref: \"#\" }\n      },\n      nonNegativeInteger: {\n        type: \"integer\",\n        minimum: 0\n      },\n      nonNegativeIntegerDefault0: {\n        allOf: [\n          { $ref: \"#/definitions/nonNegativeInteger\" },\n          { default: 0 }\n        ]\n      },\n      simpleTypes: {\n        enum: [\n          \"array\",\n          \"boolean\",\n          \"integer\",\n          \"null\",\n          \"number\",\n          \"object\",\n          \"string\"\n        ]\n      },\n      stringArray: {\n        type: \"array\",\n        items: { type: \"string\" },\n        uniqueItems: true,\n        default: []\n      }\n    },\n    type: [\"object\", \"boolean\"],\n    properties: {\n      $id: {\n        type: \"string\",\n        format: \"uri-reference\"\n      },\n      $schema: {\n        type: \"string\",\n        format: \"uri\"\n      },\n      $ref: {\n        type: \"string\",\n        format: \"uri-reference\"\n      },\n      $comment: {\n        type: \"string\"\n      },\n      title: {\n        type: \"string\"\n      },\n      description: {\n        type: \"string\"\n      },\n      default: true,\n      readOnly: {\n        type: \"boolean\",\n        default: false\n      },\n      examples: {\n        type: \"array\",\n        items: true\n      },\n      multipleOf: {\n        type: \"number\",\n        exclusiveMinimum: 0\n      },\n      maximum: {\n        type: \"number\"\n      },\n      exclusiveMaximum: {\n        type: \"number\"\n      },\n      minimum: {\n        type: \"number\"\n      },\n      exclusiveMinimum: {\n        type: \"number\"\n      },\n      maxLength: { $ref: \"#/definitions/nonNegativeInteger\" },\n      minLength: { $ref: \"#/definitions/nonNegativeIntegerDefault0\" },\n      pattern: {\n        type: \"string\",\n        format: \"regex\"\n      },\n      additionalItems: { $ref: \"#\" },\n      items: {\n        anyOf: [\n          { $ref: \"#\" },\n          { $ref: \"#/definitions/schemaArray\" }\n        ],\n        default: true\n      },\n      maxItems: { $ref: \"#/definitions/nonNegativeInteger\" },\n      minItems: { $ref: \"#/definitions/nonNegativeIntegerDefault0\" },\n      uniqueItems: {\n        type: \"boolean\",\n        default: false\n      },\n      contains: { $ref: \"#\" },\n      maxProperties: { $ref: \"#/definitions/nonNegativeInteger\" },\n      minProperties: { $ref: \"#/definitions/nonNegativeIntegerDefault0\" },\n      required: { $ref: \"#/definitions/stringArray\" },\n      additionalProperties: { $ref: \"#\" },\n      definitions: {\n        type: \"object\",\n        additionalProperties: { $ref: \"#\" },\n        default: {}\n      },\n      properties: {\n        type: \"object\",\n        additionalProperties: { $ref: \"#\" },\n        default: {}\n      },\n      patternProperties: {\n        type: \"object\",\n        additionalProperties: { $ref: \"#\" },\n        propertyNames: { format: \"regex\" },\n        default: {}\n      },\n      dependencies: {\n        type: \"object\",\n        additionalProperties: {\n          anyOf: [\n            { $ref: \"#\" },\n            { $ref: \"#/definitions/stringArray\" }\n          ]\n        }\n      },\n      propertyNames: { $ref: \"#\" },\n      const: true,\n      enum: {\n        type: \"array\",\n        items: true,\n        minItems: 1,\n        uniqueItems: true\n      },\n      type: {\n        anyOf: [\n          { $ref: \"#/definitions/simpleTypes\" },\n          {\n            type: \"array\",\n            items: { $ref: \"#/definitions/simpleTypes\" },\n            minItems: 1,\n            uniqueItems: true\n          }\n        ]\n      },\n      format: { type: \"string\" },\n      contentMediaType: { type: \"string\" },\n      contentEncoding: { type: \"string\" },\n      if: { $ref: \"#\" },\n      then: { $ref: \"#\" },\n      else: { $ref: \"#\" },\n      allOf: { $ref: \"#/definitions/schemaArray\" },\n      anyOf: { $ref: \"#/definitions/schemaArray\" },\n      oneOf: { $ref: \"#/definitions/schemaArray\" },\n      not: { $ref: \"#\" }\n    },\n    default: true\n  };\n});\n\n// ../node_modules/ajv/lib/definition_schema.js\nvar require_definition_schema = __commonJS((exports, module) => {\n  var metaSchema = require_json_schema_draft_07();\n  module.exports = {\n    $id: \"https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js\",\n    definitions: {\n      simpleTypes: metaSchema.definitions.simpleTypes\n    },\n    type: \"object\",\n    dependencies: {\n      schema: [\"validate\"],\n      $data: [\"validate\"],\n      statements: [\"inline\"],\n      valid: { not: { required: [\"macro\"] } }\n    },\n    properties: {\n      type: metaSchema.properties.type,\n      schema: { type: \"boolean\" },\n      statements: { type: \"boolean\" },\n      dependencies: {\n        type: \"array\",\n        items: { type: \"string\" }\n      },\n      metaSchema: { type: \"object\" },\n      modifying: { type: \"boolean\" },\n      valid: { type: \"boolean\" },\n      $data: { type: \"boolean\" },\n      async: { type: \"boolean\" },\n      errors: {\n        anyOf: [\n          { type: \"boolean\" },\n          { const: \"full\" }\n        ]\n      }\n    }\n  };\n});\n\n// ../node_modules/ajv/lib/keyword.js\nvar require_keyword = __commonJS((exports, module) => {\n  var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;\n  var customRuleCode = require_custom();\n  var definitionSchema = require_definition_schema();\n  module.exports = {\n    add: addKeyword,\n    get: getKeyword,\n    remove: removeKeyword,\n    validate: validateKeyword\n  };\n  function addKeyword(keyword, definition) {\n    var RULES = this.RULES;\n    if (RULES.keywords[keyword])\n      throw new Error(\"Keyword \" + keyword + \" is already defined\");\n    if (!IDENTIFIER.test(keyword))\n      throw new Error(\"Keyword \" + keyword + \" is not a valid identifier\");\n    if (definition) {\n      this.validateKeyword(definition, true);\n      var dataType = definition.type;\n      if (Array.isArray(dataType)) {\n        for (var i = 0;i < dataType.length; i++)\n          _addRule(keyword, dataType[i], definition);\n      } else {\n        _addRule(keyword, dataType, definition);\n      }\n      var metaSchema = definition.metaSchema;\n      if (metaSchema) {\n        if (definition.$data && this._opts.$data) {\n          metaSchema = {\n            anyOf: [\n              metaSchema,\n              { $ref: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\" }\n            ]\n          };\n        }\n        definition.validateSchema = this.compile(metaSchema, true);\n      }\n    }\n    RULES.keywords[keyword] = RULES.all[keyword] = true;\n    function _addRule(keyword2, dataType2, definition2) {\n      var ruleGroup;\n      for (var i2 = 0;i2 < RULES.length; i2++) {\n        var rg = RULES[i2];\n        if (rg.type == dataType2) {\n          ruleGroup = rg;\n          break;\n        }\n      }\n      if (!ruleGroup) {\n        ruleGroup = { type: dataType2, rules: [] };\n        RULES.push(ruleGroup);\n      }\n      var rule = {\n        keyword: keyword2,\n        definition: definition2,\n        custom: true,\n        code: customRuleCode,\n        implements: definition2.implements\n      };\n      ruleGroup.rules.push(rule);\n      RULES.custom[keyword2] = rule;\n    }\n    return this;\n  }\n  function getKeyword(keyword) {\n    var rule = this.RULES.custom[keyword];\n    return rule ? rule.definition : this.RULES.keywords[keyword] || false;\n  }\n  function removeKeyword(keyword) {\n    var RULES = this.RULES;\n    delete RULES.keywords[keyword];\n    delete RULES.all[keyword];\n    delete RULES.custom[keyword];\n    for (var i = 0;i < RULES.length; i++) {\n      var rules = RULES[i].rules;\n      for (var j = 0;j < rules.length; j++) {\n        if (rules[j].keyword == keyword) {\n          rules.splice(j, 1);\n          break;\n        }\n      }\n    }\n    return this;\n  }\n  function validateKeyword(definition, throwError) {\n    validateKeyword.errors = null;\n    var v = this._validateKeyword = this._validateKeyword || this.compile(definitionSchema, true);\n    if (v(definition))\n      return true;\n    validateKeyword.errors = v.errors;\n    if (throwError)\n      throw new Error(\"custom keyword definition is invalid: \" + this.errorsText(v.errors));\n    else\n      return false;\n  }\n});\n\n// ../node_modules/ajv/lib/refs/data.json\nvar require_data2 = __commonJS((exports, module) => {\n  module.exports = {\n    $schema: \"http://json-schema.org/draft-07/schema#\",\n    $id: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\",\n    description: \"Meta-schema for $data reference (JSON Schema extension proposal)\",\n    type: \"object\",\n    required: [\"$data\"],\n    properties: {\n      $data: {\n        type: \"string\",\n        anyOf: [\n          { format: \"relative-json-pointer\" },\n          { format: \"json-pointer\" }\n        ]\n      }\n    },\n    additionalProperties: false\n  };\n});\n\n// ../node_modules/ajv/lib/ajv.js\nvar require_ajv = __commonJS((exports, module) => {\n  var compileSchema = require_compile();\n  var resolve = require_resolve();\n  var Cache = require_cache();\n  var SchemaObject = require_schema_obj();\n  var stableStringify = require_fast_json_stable_stringify();\n  var formats = require_formats();\n  var rules = require_rules();\n  var $dataMetaSchema = require_data();\n  var util3 = require_util();\n  module.exports = Ajv;\n  Ajv.prototype.validate = validate;\n  Ajv.prototype.compile = compile;\n  Ajv.prototype.addSchema = addSchema;\n  Ajv.prototype.addMetaSchema = addMetaSchema;\n  Ajv.prototype.validateSchema = validateSchema;\n  Ajv.prototype.getSchema = getSchema;\n  Ajv.prototype.removeSchema = removeSchema;\n  Ajv.prototype.addFormat = addFormat;\n  Ajv.prototype.errorsText = errorsText;\n  Ajv.prototype._addSchema = _addSchema;\n  Ajv.prototype._compile = _compile;\n  Ajv.prototype.compileAsync = require_async();\n  var customKeyword = require_keyword();\n  Ajv.prototype.addKeyword = customKeyword.add;\n  Ajv.prototype.getKeyword = customKeyword.get;\n  Ajv.prototype.removeKeyword = customKeyword.remove;\n  Ajv.prototype.validateKeyword = customKeyword.validate;\n  var errorClasses = require_error_classes();\n  Ajv.ValidationError = errorClasses.Validation;\n  Ajv.MissingRefError = errorClasses.MissingRef;\n  Ajv.$dataMetaSchema = $dataMetaSchema;\n  var META_SCHEMA_ID = \"http://json-schema.org/draft-07/schema\";\n  var META_IGNORE_OPTIONS = [\"removeAdditional\", \"useDefaults\", \"coerceTypes\", \"strictDefaults\"];\n  var META_SUPPORT_DATA = [\"/properties\"];\n  function Ajv(opts) {\n    if (!(this instanceof Ajv))\n      return new Ajv(opts);\n    opts = this._opts = util3.copy(opts) || {};\n    setLogger(this);\n    this._schemas = {};\n    this._refs = {};\n    this._fragments = {};\n    this._formats = formats(opts.format);\n    this._cache = opts.cache || new Cache;\n    this._loadingSchemas = {};\n    this._compilations = [];\n    this.RULES = rules();\n    this._getId = chooseGetId(opts);\n    opts.loopRequired = opts.loopRequired || Infinity;\n    if (opts.errorDataPath == \"property\")\n      opts._errorDataPathProperty = true;\n    if (opts.serialize === undefined)\n      opts.serialize = stableStringify;\n    this._metaOpts = getMetaSchemaOptions(this);\n    if (opts.formats)\n      addInitialFormats(this);\n    if (opts.keywords)\n      addInitialKeywords(this);\n    addDefaultMetaSchema(this);\n    if (typeof opts.meta == \"object\")\n      this.addMetaSchema(opts.meta);\n    if (opts.nullable)\n      this.addKeyword(\"nullable\", { metaSchema: { type: \"boolean\" } });\n    addInitialSchemas(this);\n  }\n  function validate(schemaKeyRef, data) {\n    var v;\n    if (typeof schemaKeyRef == \"string\") {\n      v = this.getSchema(schemaKeyRef);\n      if (!v)\n        throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n    } else {\n      var schemaObj = this._addSchema(schemaKeyRef);\n      v = schemaObj.validate || this._compile(schemaObj);\n    }\n    var valid = v(data);\n    if (v.$async !== true)\n      this.errors = v.errors;\n    return valid;\n  }\n  function compile(schema, _meta) {\n    var schemaObj = this._addSchema(schema, undefined, _meta);\n    return schemaObj.validate || this._compile(schemaObj);\n  }\n  function addSchema(schema, key, _skipValidation, _meta) {\n    if (Array.isArray(schema)) {\n      for (var i = 0;i < schema.length; i++)\n        this.addSchema(schema[i], undefined, _skipValidation, _meta);\n      return this;\n    }\n    var id = this._getId(schema);\n    if (id !== undefined && typeof id != \"string\")\n      throw new Error(\"schema id must be string\");\n    key = resolve.normalizeId(key || id);\n    checkUnique(this, key);\n    this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\n    return this;\n  }\n  function addMetaSchema(schema, key, skipValidation) {\n    this.addSchema(schema, key, skipValidation, true);\n    return this;\n  }\n  function validateSchema(schema, throwOrLogError) {\n    var $schema = schema.$schema;\n    if ($schema !== undefined && typeof $schema != \"string\")\n      throw new Error(\"$schema must be a string\");\n    $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\n    if (!$schema) {\n      this.logger.warn(\"meta-schema not available\");\n      this.errors = null;\n      return true;\n    }\n    var valid = this.validate($schema, schema);\n    if (!valid && throwOrLogError) {\n      var message = \"schema is invalid: \" + this.errorsText();\n      if (this._opts.validateSchema == \"log\")\n        this.logger.error(message);\n      else\n        throw new Error(message);\n    }\n    return valid;\n  }\n  function defaultMeta(self2) {\n    var meta = self2._opts.meta;\n    self2._opts.defaultMeta = typeof meta == \"object\" ? self2._getId(meta) || meta : self2.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined;\n    return self2._opts.defaultMeta;\n  }\n  function getSchema(keyRef) {\n    var schemaObj = _getSchemaObj(this, keyRef);\n    switch (typeof schemaObj) {\n      case \"object\":\n        return schemaObj.validate || this._compile(schemaObj);\n      case \"string\":\n        return this.getSchema(schemaObj);\n      case \"undefined\":\n        return _getSchemaFragment(this, keyRef);\n    }\n  }\n  function _getSchemaFragment(self2, ref) {\n    var res = resolve.schema.call(self2, { schema: {} }, ref);\n    if (res) {\n      var { schema, root: root2, baseId } = res;\n      var v = compileSchema.call(self2, schema, root2, undefined, baseId);\n      self2._fragments[ref] = new SchemaObject({\n        ref,\n        fragment: true,\n        schema,\n        root: root2,\n        baseId,\n        validate: v\n      });\n      return v;\n    }\n  }\n  function _getSchemaObj(self2, keyRef) {\n    keyRef = resolve.normalizeId(keyRef);\n    return self2._schemas[keyRef] || self2._refs[keyRef] || self2._fragments[keyRef];\n  }\n  function removeSchema(schemaKeyRef) {\n    if (schemaKeyRef instanceof RegExp) {\n      _removeAllSchemas(this, this._schemas, schemaKeyRef);\n      _removeAllSchemas(this, this._refs, schemaKeyRef);\n      return this;\n    }\n    switch (typeof schemaKeyRef) {\n      case \"undefined\":\n        _removeAllSchemas(this, this._schemas);\n        _removeAllSchemas(this, this._refs);\n        this._cache.clear();\n        return this;\n      case \"string\":\n        var schemaObj = _getSchemaObj(this, schemaKeyRef);\n        if (schemaObj)\n          this._cache.del(schemaObj.cacheKey);\n        delete this._schemas[schemaKeyRef];\n        delete this._refs[schemaKeyRef];\n        return this;\n      case \"object\":\n        var serialize = this._opts.serialize;\n        var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\n        this._cache.del(cacheKey);\n        var id = this._getId(schemaKeyRef);\n        if (id) {\n          id = resolve.normalizeId(id);\n          delete this._schemas[id];\n          delete this._refs[id];\n        }\n    }\n    return this;\n  }\n  function _removeAllSchemas(self2, schemas, regex) {\n    for (var keyRef in schemas) {\n      var schemaObj = schemas[keyRef];\n      if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n        self2._cache.del(schemaObj.cacheKey);\n        delete schemas[keyRef];\n      }\n    }\n  }\n  function _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n    if (typeof schema != \"object\" && typeof schema != \"boolean\")\n      throw new Error(\"schema should be object or boolean\");\n    var serialize = this._opts.serialize;\n    var cacheKey = serialize ? serialize(schema) : schema;\n    var cached = this._cache.get(cacheKey);\n    if (cached)\n      return cached;\n    shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\n    var id = resolve.normalizeId(this._getId(schema));\n    if (id && shouldAddSchema)\n      checkUnique(this, id);\n    var willValidate = this._opts.validateSchema !== false && !skipValidation;\n    var recursiveMeta;\n    if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))\n      this.validateSchema(schema, true);\n    var localRefs = resolve.ids.call(this, schema);\n    var schemaObj = new SchemaObject({\n      id,\n      schema,\n      localRefs,\n      cacheKey,\n      meta\n    });\n    if (id[0] != \"#\" && shouldAddSchema)\n      this._refs[id] = schemaObj;\n    this._cache.put(cacheKey, schemaObj);\n    if (willValidate && recursiveMeta)\n      this.validateSchema(schema, true);\n    return schemaObj;\n  }\n  function _compile(schemaObj, root2) {\n    if (schemaObj.compiling) {\n      schemaObj.validate = callValidate;\n      callValidate.schema = schemaObj.schema;\n      callValidate.errors = null;\n      callValidate.root = root2 ? root2 : callValidate;\n      if (schemaObj.schema.$async === true)\n        callValidate.$async = true;\n      return callValidate;\n    }\n    schemaObj.compiling = true;\n    var currentOpts;\n    if (schemaObj.meta) {\n      currentOpts = this._opts;\n      this._opts = this._metaOpts;\n    }\n    var v;\n    try {\n      v = compileSchema.call(this, schemaObj.schema, root2, schemaObj.localRefs);\n    } catch (e) {\n      delete schemaObj.validate;\n      throw e;\n    } finally {\n      schemaObj.compiling = false;\n      if (schemaObj.meta)\n        this._opts = currentOpts;\n    }\n    schemaObj.validate = v;\n    schemaObj.refs = v.refs;\n    schemaObj.refVal = v.refVal;\n    schemaObj.root = v.root;\n    return v;\n    function callValidate() {\n      var _validate = schemaObj.validate;\n      var result = _validate.apply(this, arguments);\n      callValidate.errors = _validate.errors;\n      return result;\n    }\n  }\n  function chooseGetId(opts) {\n    switch (opts.schemaId) {\n      case \"auto\":\n        return _get$IdOrId;\n      case \"id\":\n        return _getId;\n      default:\n        return _get$Id;\n    }\n  }\n  function _getId(schema) {\n    if (schema.$id)\n      this.logger.warn(\"schema $id ignored\", schema.$id);\n    return schema.id;\n  }\n  function _get$Id(schema) {\n    if (schema.id)\n      this.logger.warn(\"schema id ignored\", schema.id);\n    return schema.$id;\n  }\n  function _get$IdOrId(schema) {\n    if (schema.$id && schema.id && schema.$id != schema.id)\n      throw new Error(\"schema $id is different from id\");\n    return schema.$id || schema.id;\n  }\n  function errorsText(errors2, options) {\n    errors2 = errors2 || this.errors;\n    if (!errors2)\n      return \"No errors\";\n    options = options || {};\n    var separator = options.separator === undefined ? \", \" : options.separator;\n    var dataVar = options.dataVar === undefined ? \"data\" : options.dataVar;\n    var text = \"\";\n    for (var i = 0;i < errors2.length; i++) {\n      var e = errors2[i];\n      if (e)\n        text += dataVar + e.dataPath + \" \" + e.message + separator;\n    }\n    return text.slice(0, -separator.length);\n  }\n  function addFormat(name, format) {\n    if (typeof format == \"string\")\n      format = new RegExp(format);\n    this._formats[name] = format;\n    return this;\n  }\n  function addDefaultMetaSchema(self2) {\n    var $dataSchema;\n    if (self2._opts.$data) {\n      $dataSchema = require_data2();\n      self2.addMetaSchema($dataSchema, $dataSchema.$id, true);\n    }\n    if (self2._opts.meta === false)\n      return;\n    var metaSchema = require_json_schema_draft_07();\n    if (self2._opts.$data)\n      metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);\n    self2.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n    self2._refs[\"http://json-schema.org/schema\"] = META_SCHEMA_ID;\n  }\n  function addInitialSchemas(self2) {\n    var optsSchemas = self2._opts.schemas;\n    if (!optsSchemas)\n      return;\n    if (Array.isArray(optsSchemas))\n      self2.addSchema(optsSchemas);\n    else\n      for (var key in optsSchemas)\n        self2.addSchema(optsSchemas[key], key);\n  }\n  function addInitialFormats(self2) {\n    for (var name in self2._opts.formats) {\n      var format = self2._opts.formats[name];\n      self2.addFormat(name, format);\n    }\n  }\n  function addInitialKeywords(self2) {\n    for (var name in self2._opts.keywords) {\n      var keyword = self2._opts.keywords[name];\n      self2.addKeyword(name, keyword);\n    }\n  }\n  function checkUnique(self2, id) {\n    if (self2._schemas[id] || self2._refs[id])\n      throw new Error('schema with key or id \"' + id + '\" already exists');\n  }\n  function getMetaSchemaOptions(self2) {\n    var metaOpts = util3.copy(self2._opts);\n    for (var i = 0;i < META_IGNORE_OPTIONS.length; i++)\n      delete metaOpts[META_IGNORE_OPTIONS[i]];\n    return metaOpts;\n  }\n  function setLogger(self2) {\n    var logger = self2._opts.logger;\n    if (logger === false) {\n      self2.logger = { log: noop, warn: noop, error: noop };\n    } else {\n      if (logger === undefined)\n        logger = console;\n      if (!(typeof logger == \"object\" && logger.log && logger.warn && logger.error))\n        throw new Error(\"logger must implement log, warn and error methods\");\n      self2.logger = logger;\n    }\n  }\n  function noop() {}\n});\n\n// ../src/entrypoints/agentSdk.ts\n\n\n\n// ../src/utils/abortController.ts\n\nvar DEFAULT_MAX_LISTENERS = 50;\nfunction createAbortController(maxListeners = DEFAULT_MAX_LISTENERS) {\n  const controller = new AbortController;\n  (0,events__WEBPACK_IMPORTED_MODULE_2__.setMaxListeners)(maxListeners, controller.signal);\n  return controller;\n}\n\n// ../src/transport/ProcessTransport.ts\n\n\n\n// ../src/utils/fsOperations.ts\n\n\nvar NodeFsOperations = {\n  cwd() {\n    return process.cwd();\n  },\n  existsSync(fsPath) {\n    return fs__WEBPACK_IMPORTED_MODULE_5__.existsSync(fsPath);\n  },\n  async stat(fsPath) {\n    return (0,fs_promises__WEBPACK_IMPORTED_MODULE_6__.stat)(fsPath);\n  },\n  statSync(fsPath) {\n    return fs__WEBPACK_IMPORTED_MODULE_5__.statSync(fsPath);\n  },\n  readFileSync(fsPath, options) {\n    return fs__WEBPACK_IMPORTED_MODULE_5__.readFileSync(fsPath, { encoding: options.encoding });\n  },\n  readFileBytesSync(fsPath) {\n    return fs__WEBPACK_IMPORTED_MODULE_5__.readFileSync(fsPath);\n  },\n  readSync(fsPath, options) {\n    let fd = undefined;\n    try {\n      fd = fs__WEBPACK_IMPORTED_MODULE_5__.openSync(fsPath, \"r\");\n      const buffer = Buffer.alloc(options.length);\n      const bytesRead = fs__WEBPACK_IMPORTED_MODULE_5__.readSync(fd, buffer, 0, options.length, 0);\n      return { buffer, bytesRead };\n    } finally {\n      if (fd)\n        fs__WEBPACK_IMPORTED_MODULE_5__.closeSync(fd);\n    }\n  },\n  writeFileSync(fsPath, data, options) {\n    if (!options.flush) {\n      const writeOptions = {\n        encoding: options.encoding\n      };\n      if (options.mode !== undefined) {\n        writeOptions.mode = options.mode;\n      }\n      fs__WEBPACK_IMPORTED_MODULE_5__.writeFileSync(fsPath, data, writeOptions);\n      return;\n    }\n    let fd;\n    try {\n      const mode = options.mode !== undefined ? options.mode : undefined;\n      fd = fs__WEBPACK_IMPORTED_MODULE_5__.openSync(fsPath, \"w\", mode);\n      fs__WEBPACK_IMPORTED_MODULE_5__.writeFileSync(fd, data, { encoding: options.encoding });\n      fs__WEBPACK_IMPORTED_MODULE_5__.fsyncSync(fd);\n    } finally {\n      if (fd) {\n        fs__WEBPACK_IMPORTED_MODULE_5__.closeSync(fd);\n      }\n    }\n  },\n  appendFileSync(path, data) {\n    fs__WEBPACK_IMPORTED_MODULE_5__.appendFileSync(path, data);\n  },\n  copyFileSync(src, dest) {\n    fs__WEBPACK_IMPORTED_MODULE_5__.copyFileSync(src, dest);\n  },\n  unlinkSync(path) {\n    fs__WEBPACK_IMPORTED_MODULE_5__.unlinkSync(path);\n  },\n  renameSync(oldPath, newPath) {\n    fs__WEBPACK_IMPORTED_MODULE_5__.renameSync(oldPath, newPath);\n  },\n  linkSync(target, path) {\n    fs__WEBPACK_IMPORTED_MODULE_5__.linkSync(target, path);\n  },\n  symlinkSync(target, path) {\n    fs__WEBPACK_IMPORTED_MODULE_5__.symlinkSync(target, path);\n  },\n  readlinkSync(path) {\n    return fs__WEBPACK_IMPORTED_MODULE_5__.readlinkSync(path);\n  },\n  realpathSync(path) {\n    return fs__WEBPACK_IMPORTED_MODULE_5__.realpathSync(path);\n  },\n  mkdirSync(dirPath) {\n    if (!fs__WEBPACK_IMPORTED_MODULE_5__.existsSync(dirPath)) {\n      fs__WEBPACK_IMPORTED_MODULE_5__.mkdirSync(dirPath, { recursive: true, mode: 448 });\n    }\n  },\n  readdirSync(dirPath) {\n    return fs__WEBPACK_IMPORTED_MODULE_5__.readdirSync(dirPath, { withFileTypes: true });\n  },\n  readdirStringSync(dirPath) {\n    return fs__WEBPACK_IMPORTED_MODULE_5__.readdirSync(dirPath);\n  },\n  isDirEmptySync(dirPath) {\n    const files = this.readdirSync(dirPath);\n    return files.length === 0;\n  },\n  rmdirSync(dirPath) {\n    fs__WEBPACK_IMPORTED_MODULE_5__.rmdirSync(dirPath);\n  },\n  rmSync(path, options) {\n    fs__WEBPACK_IMPORTED_MODULE_5__.rmSync(path, options);\n  },\n  createWriteStream(path) {\n    return fs__WEBPACK_IMPORTED_MODULE_5__.createWriteStream(path);\n  }\n};\nvar activeFs = NodeFsOperations;\nfunction getFsImplementation() {\n  return activeFs;\n}\n\n// ../src/entrypoints/sdkTypes.ts\nclass AbortError extends Error {\n}\n\n// ../src/utils/bundledMode.ts\nfunction isRunningWithBun() {\n  return process.versions.bun !== undefined;\n}\n\n// ../src/transport/ProcessTransport.ts\nclass ProcessTransport {\n  options;\n  child;\n  childStdin;\n  childStdout;\n  ready = false;\n  abortController;\n  exitError;\n  exitListeners = [];\n  processExitHandler;\n  abortHandler;\n  constructor(options) {\n    this.options = options;\n    this.abortController = options.abortController || createAbortController();\n    this.initialize();\n  }\n  initialize() {\n    try {\n      const {\n        additionalDirectories = [],\n        agents,\n        cwd,\n        executable = isRunningWithBun() ? \"bun\" : \"node\",\n        executableArgs = [],\n        extraArgs = {},\n        pathToClaudeCodeExecutable,\n        env = { ...process.env },\n        stderr,\n        customSystemPrompt,\n        appendSystemPrompt,\n        maxThinkingTokens,\n        maxTurns,\n        model,\n        fallbackModel,\n        permissionMode,\n        permissionPromptToolName,\n        continueConversation,\n        resume,\n        settingSources,\n        allowedTools = [],\n        disallowedTools = [],\n        mcpServers,\n        strictMcpConfig,\n        canUseTool,\n        includePartialMessages\n      } = this.options;\n      const args = [\n        \"--output-format\",\n        \"stream-json\",\n        \"--verbose\",\n        \"--input-format\",\n        \"stream-json\"\n      ];\n      if (typeof customSystemPrompt === \"string\")\n        args.push(\"--system-prompt\", customSystemPrompt);\n      if (appendSystemPrompt)\n        args.push(\"--append-system-prompt\", appendSystemPrompt);\n      if (maxThinkingTokens !== undefined) {\n        args.push(\"--max-thinking-tokens\", maxThinkingTokens.toString());\n      }\n      if (maxTurns)\n        args.push(\"--max-turns\", maxTurns.toString());\n      if (model)\n        args.push(\"--model\", model);\n      if (env.DEBUG)\n        args.push(\"--debug-to-stderr\");\n      if (canUseTool) {\n        if (permissionPromptToolName) {\n          throw new Error(\"canUseTool callback cannot be used with permissionPromptToolName. Please use one or the other.\");\n        }\n        args.push(\"--permission-prompt-tool\", \"stdio\");\n      } else if (permissionPromptToolName) {\n        args.push(\"--permission-prompt-tool\", permissionPromptToolName);\n      }\n      if (continueConversation)\n        args.push(\"--continue\");\n      if (resume)\n        args.push(\"--resume\", resume);\n      if (allowedTools.length > 0) {\n        args.push(\"--allowedTools\", allowedTools.join(\",\"));\n      }\n      if (disallowedTools.length > 0) {\n        args.push(\"--disallowedTools\", disallowedTools.join(\",\"));\n      }\n      if (mcpServers && Object.keys(mcpServers).length > 0) {\n        args.push(\"--mcp-config\", JSON.stringify({ mcpServers }));\n      }\n      if (agents && Object.keys(agents).length > 0) {\n        args.push(\"--agents\", JSON.stringify(agents));\n      }\n      if (settingSources) {\n        args.push(\"--setting-sources\", settingSources.join(\",\"));\n      }\n      if (strictMcpConfig) {\n        args.push(\"--strict-mcp-config\");\n      }\n      if (permissionMode) {\n        args.push(\"--permission-mode\", permissionMode);\n      }\n      if (fallbackModel) {\n        if (model && fallbackModel === model) {\n          throw new Error(\"Fallback model cannot be the same as the main model. Please specify a different model for fallbackModel option.\");\n        }\n        args.push(\"--fallback-model\", fallbackModel);\n      }\n      if (includePartialMessages) {\n        args.push(\"--include-partial-messages\");\n      }\n      for (const dir of additionalDirectories) {\n        args.push(\"--add-dir\", dir);\n      }\n      if (this.options.forkSession) {\n        args.push(\"--fork-session\");\n      }\n      if (this.options.resumeSessionAt) {\n        args.push(\"--resume-session-at\", this.options.resumeSessionAt);\n      }\n      for (const [flag, value] of Object.entries(extraArgs)) {\n        if (value === null) {\n          args.push(`--${flag}`);\n        } else {\n          args.push(`--${flag}`, value);\n        }\n      }\n      if (!env.CLAUDE_CODE_ENTRYPOINT) {\n        env.CLAUDE_CODE_ENTRYPOINT = \"sdk-ts\";\n      }\n      const fs2 = getFsImplementation();\n      if (!fs2.existsSync(pathToClaudeCodeExecutable)) {\n        const errorMessage = isNativeBinary(pathToClaudeCodeExecutable) ? `Claude Code native binary not found at ${pathToClaudeCodeExecutable}. Please ensure Claude Code is installed via native installer or specify a valid path with options.pathToClaudeCodeExecutable.` : `Claude Code executable not found at ${pathToClaudeCodeExecutable}. Is options.pathToClaudeCodeExecutable set?`;\n        throw new ReferenceError(errorMessage);\n      }\n      const isNative = isNativeBinary(pathToClaudeCodeExecutable);\n      const spawnCommand = isNative ? pathToClaudeCodeExecutable : executable;\n      const spawnArgs = isNative ? args : [...executableArgs, pathToClaudeCodeExecutable, ...args];\n      this.logForDebugging(isNative ? `Spawning Claude Code native binary: ${pathToClaudeCodeExecutable} ${args.join(\" \")}` : `Spawning Claude Code process: ${executable} ${[...executableArgs, pathToClaudeCodeExecutable, ...args].join(\" \")}`);\n      const stderrMode = env.DEBUG || stderr ? \"pipe\" : \"ignore\";\n      this.child = (0,child_process__WEBPACK_IMPORTED_MODULE_3__.spawn)(spawnCommand, spawnArgs, {\n        cwd,\n        stdio: [\"pipe\", \"pipe\", stderrMode],\n        signal: this.abortController.signal,\n        env\n      });\n      this.childStdin = this.child.stdin;\n      this.childStdout = this.child.stdout;\n      if (env.DEBUG || stderr) {\n        this.child.stderr.on(\"data\", (data) => {\n          this.logForDebugging(data.toString());\n        });\n      }\n      const cleanup = () => {\n        if (this.child && !this.child.killed) {\n          this.child.kill(\"SIGTERM\");\n        }\n      };\n      this.processExitHandler = cleanup;\n      this.abortHandler = cleanup;\n      process.on(\"exit\", this.processExitHandler);\n      this.abortController.signal.addEventListener(\"abort\", this.abortHandler);\n      this.child.on(\"error\", (error) => {\n        this.ready = false;\n        if (this.abortController.signal.aborted) {\n          this.exitError = new AbortError(\"Claude Code process aborted by user\");\n        } else {\n          this.exitError = new Error(`Failed to spawn Claude Code process: ${error.message}`);\n          this.logForDebugging(this.exitError.message);\n        }\n      });\n      this.child.on(\"close\", (code, signal) => {\n        this.ready = false;\n        if (this.abortController.signal.aborted) {\n          this.exitError = new AbortError(\"Claude Code process aborted by user\");\n        } else {\n          const error = this.getProcessExitError(code, signal);\n          if (error) {\n            this.exitError = error;\n            this.logForDebugging(error.message);\n          }\n        }\n      });\n      this.ready = true;\n    } catch (error) {\n      this.ready = false;\n      throw error;\n    }\n  }\n  getProcessExitError(code, signal) {\n    if (code !== 0 && code !== null) {\n      return new Error(`Claude Code process exited with code ${code}`);\n    } else if (signal) {\n      return new Error(`Claude Code process terminated by signal ${signal}`);\n    }\n    return;\n  }\n  logForDebugging(message) {\n    if (process.env.DEBUG) {\n      process.stderr.write(`${message}\n`);\n    }\n    if (this.options.stderr) {\n      this.options.stderr(message);\n    }\n  }\n  write(data) {\n    if (this.abortController.signal.aborted) {\n      throw new AbortError(\"Operation aborted\");\n    }\n    if (!this.ready || !this.childStdin) {\n      throw new Error(\"ProcessTransport is not ready for writing\");\n    }\n    if (this.child?.killed || this.child?.exitCode !== null) {\n      throw new Error(\"Cannot write to terminated process\");\n    }\n    if (this.exitError) {\n      throw new Error(`Cannot write to process that exited with error: ${this.exitError.message}`);\n    }\n    if (process.env.DEBUG_SDK) {\n      process.stderr.write(`[ProcessTransport] Writing to stdin: ${data.substring(0, 100)}\n`);\n    }\n    try {\n      const written = this.childStdin.write(data);\n      if (!written && process.env.DEBUG_SDK) {\n        console.warn(\"[ProcessTransport] Write buffer full, data queued\");\n      }\n    } catch (error) {\n      this.ready = false;\n      throw new Error(`Failed to write to process stdin: ${error.message}`);\n    }\n  }\n  close() {\n    if (this.childStdin) {\n      this.childStdin.end();\n      this.childStdin = undefined;\n    }\n    if (this.processExitHandler) {\n      process.off(\"exit\", this.processExitHandler);\n      this.processExitHandler = undefined;\n    }\n    if (this.abortHandler) {\n      this.abortController.signal.removeEventListener(\"abort\", this.abortHandler);\n      this.abortHandler = undefined;\n    }\n    for (const { handler } of this.exitListeners) {\n      this.child?.off(\"exit\", handler);\n    }\n    this.exitListeners = [];\n    if (this.child && !this.child.killed) {\n      this.child.kill(\"SIGTERM\");\n      setTimeout(() => {\n        if (this.child && !this.child.killed) {\n          this.child.kill(\"SIGKILL\");\n        }\n      }, 5000);\n    }\n    this.ready = false;\n  }\n  isReady() {\n    return this.ready;\n  }\n  async* readMessages() {\n    if (!this.childStdout) {\n      throw new Error(\"ProcessTransport output stream not available\");\n    }\n    const rl = (0,readline__WEBPACK_IMPORTED_MODULE_4__.createInterface)({ input: this.childStdout });\n    try {\n      for await (const line of rl) {\n        if (line.trim()) {\n          const message = JSON.parse(line);\n          yield message;\n        }\n      }\n      await this.waitForExit();\n    } catch (error) {\n      throw error;\n    } finally {\n      rl.close();\n    }\n  }\n  endInput() {\n    if (this.childStdin) {\n      this.childStdin.end();\n    }\n  }\n  getInputStream() {\n    return this.childStdin;\n  }\n  onExit(callback) {\n    if (!this.child)\n      return () => {};\n    const handler = (code, signal) => {\n      const error = this.getProcessExitError(code, signal);\n      callback(error);\n    };\n    this.child.on(\"exit\", handler);\n    this.exitListeners.push({ callback, handler });\n    return () => {\n      if (this.child) {\n        this.child.off(\"exit\", handler);\n      }\n      const index = this.exitListeners.findIndex((l) => l.handler === handler);\n      if (index !== -1) {\n        this.exitListeners.splice(index, 1);\n      }\n    };\n  }\n  async waitForExit() {\n    if (!this.child) {\n      if (this.exitError) {\n        throw this.exitError;\n      }\n      return;\n    }\n    if (this.child.exitCode !== null || this.child.killed) {\n      if (this.exitError) {\n        throw this.exitError;\n      }\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      const exitHandler = (code, signal) => {\n        if (this.abortController.signal.aborted) {\n          reject(new AbortError(\"Operation aborted\"));\n          return;\n        }\n        const error = this.getProcessExitError(code, signal);\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      };\n      this.child.once(\"exit\", exitHandler);\n      const errorHandler = (error) => {\n        this.child.off(\"exit\", exitHandler);\n        reject(error);\n      };\n      this.child.once(\"error\", errorHandler);\n      this.child.once(\"exit\", () => {\n        this.child.off(\"error\", errorHandler);\n      });\n    });\n  }\n}\nfunction isNativeBinary(executablePath) {\n  const jsExtensions = [\".js\", \".mjs\", \".tsx\", \".ts\", \".jsx\"];\n  return !jsExtensions.some((ext) => executablePath.endsWith(ext));\n}\n\n// ../src/utils/stream.ts\nclass Stream {\n  returned;\n  queue = [];\n  readResolve;\n  readReject;\n  isDone = false;\n  hasError;\n  started = false;\n  constructor(returned) {\n    this.returned = returned;\n  }\n  [Symbol.asyncIterator]() {\n    if (this.started) {\n      throw new Error(\"Stream can only be iterated once\");\n    }\n    this.started = true;\n    return this;\n  }\n  next() {\n    if (this.queue.length > 0) {\n      return Promise.resolve({\n        done: false,\n        value: this.queue.shift()\n      });\n    }\n    if (this.isDone) {\n      return Promise.resolve({ done: true, value: undefined });\n    }\n    if (this.hasError) {\n      return Promise.reject(this.hasError);\n    }\n    return new Promise((resolve, reject) => {\n      this.readResolve = resolve;\n      this.readReject = reject;\n    });\n  }\n  enqueue(value) {\n    if (this.readResolve) {\n      const resolve = this.readResolve;\n      this.readResolve = undefined;\n      this.readReject = undefined;\n      resolve({ done: false, value });\n    } else {\n      this.queue.push(value);\n    }\n  }\n  done() {\n    this.isDone = true;\n    if (this.readResolve) {\n      const resolve = this.readResolve;\n      this.readResolve = undefined;\n      this.readReject = undefined;\n      resolve({ done: true, value: undefined });\n    }\n  }\n  error(error) {\n    this.hasError = error;\n    if (this.readReject) {\n      const reject = this.readReject;\n      this.readResolve = undefined;\n      this.readReject = undefined;\n      reject(error);\n    }\n  }\n  return() {\n    this.isDone = true;\n    if (this.returned) {\n      this.returned();\n    }\n    return Promise.resolve({ done: true, value: undefined });\n  }\n}\n\n// ../src/services/mcp/SdkControlTransport.ts\nclass SdkControlServerTransport {\n  sendMcpMessage;\n  isClosed = false;\n  constructor(sendMcpMessage) {\n    this.sendMcpMessage = sendMcpMessage;\n  }\n  onclose;\n  onerror;\n  onmessage;\n  async start() {}\n  async send(message) {\n    if (this.isClosed) {\n      throw new Error(\"Transport is closed\");\n    }\n    this.sendMcpMessage(message);\n  }\n  async close() {\n    if (this.isClosed) {\n      return;\n    }\n    this.isClosed = true;\n    this.onclose?.();\n  }\n}\n\n// ../node_modules/lodash-es/_freeGlobal.js\nvar freeGlobal = typeof global == \"object\" && global && global.Object === Object && global;\nvar _freeGlobal_default = freeGlobal;\n\n// ../node_modules/lodash-es/_root.js\nvar freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\nvar root = _freeGlobal_default || freeSelf || Function(\"return this\")();\nvar _root_default = root;\n\n// ../node_modules/lodash-es/_Symbol.js\nvar Symbol2 = _root_default.Symbol;\nvar _Symbol_default = Symbol2;\n\n// ../node_modules/lodash-es/_getRawTag.js\nvar objectProto = Object.prototype;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar nativeObjectToString = objectProto.toString;\nvar symToStringTag = _Symbol_default ? _Symbol_default.toStringTag : undefined;\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\nvar _getRawTag_default = getRawTag;\n\n// ../node_modules/lodash-es/_objectToString.js\nvar objectProto2 = Object.prototype;\nvar nativeObjectToString2 = objectProto2.toString;\nfunction objectToString(value) {\n  return nativeObjectToString2.call(value);\n}\nvar _objectToString_default = objectToString;\n\n// ../node_modules/lodash-es/_baseGetTag.js\nvar nullTag = \"[object Null]\";\nvar undefinedTag = \"[object Undefined]\";\nvar symToStringTag2 = _Symbol_default ? _Symbol_default.toStringTag : undefined;\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag2 && symToStringTag2 in Object(value) ? _getRawTag_default(value) : _objectToString_default(value);\n}\nvar _baseGetTag_default = baseGetTag;\n\n// ../node_modules/lodash-es/isObject.js\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == \"object\" || type == \"function\");\n}\nvar isObject_default = isObject;\n\n// ../node_modules/lodash-es/isFunction.js\nvar asyncTag = \"[object AsyncFunction]\";\nvar funcTag = \"[object Function]\";\nvar genTag = \"[object GeneratorFunction]\";\nvar proxyTag = \"[object Proxy]\";\nfunction isFunction(value) {\n  if (!isObject_default(value)) {\n    return false;\n  }\n  var tag = _baseGetTag_default(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\nvar isFunction_default = isFunction;\n\n// ../node_modules/lodash-es/_coreJsData.js\nvar coreJsData = _root_default[\"__core-js_shared__\"];\nvar _coreJsData_default = coreJsData;\n\n// ../node_modules/lodash-es/_isMasked.js\nvar maskSrcKey = function() {\n  var uid = /[^.]+$/.exec(_coreJsData_default && _coreJsData_default.keys && _coreJsData_default.keys.IE_PROTO || \"\");\n  return uid ? \"Symbol(src)_1.\" + uid : \"\";\n}();\nfunction isMasked(func) {\n  return !!maskSrcKey && maskSrcKey in func;\n}\nvar _isMasked_default = isMasked;\n\n// ../node_modules/lodash-es/_toSource.js\nvar funcProto = Function.prototype;\nvar funcToString = funcProto.toString;\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return func + \"\";\n    } catch (e) {}\n  }\n  return \"\";\n}\nvar _toSource_default = toSource;\n\n// ../node_modules/lodash-es/_baseIsNative.js\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\nvar funcProto2 = Function.prototype;\nvar objectProto3 = Object.prototype;\nvar funcToString2 = funcProto2.toString;\nvar hasOwnProperty2 = objectProto3.hasOwnProperty;\nvar reIsNative = RegExp(\"^\" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\nfunction baseIsNative(value) {\n  if (!isObject_default(value) || _isMasked_default(value)) {\n    return false;\n  }\n  var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(_toSource_default(value));\n}\nvar _baseIsNative_default = baseIsNative;\n\n// ../node_modules/lodash-es/_getValue.js\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\nvar _getValue_default = getValue;\n\n// ../node_modules/lodash-es/_getNative.js\nfunction getNative(object, key) {\n  var value = _getValue_default(object, key);\n  return _baseIsNative_default(value) ? value : undefined;\n}\nvar _getNative_default = getNative;\n\n// ../node_modules/lodash-es/eq.js\nfunction eq(value, other) {\n  return value === other || value !== value && other !== other;\n}\nvar eq_default = eq;\n\n// ../node_modules/lodash-es/_nativeCreate.js\nvar nativeCreate = _getNative_default(Object, \"create\");\nvar _nativeCreate_default = nativeCreate;\n\n// ../node_modules/lodash-es/_hashClear.js\nfunction hashClear() {\n  this.__data__ = _nativeCreate_default ? _nativeCreate_default(null) : {};\n  this.size = 0;\n}\nvar _hashClear_default = hashClear;\n\n// ../node_modules/lodash-es/_hashDelete.js\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\nvar _hashDelete_default = hashDelete;\n\n// ../node_modules/lodash-es/_hashGet.js\nvar HASH_UNDEFINED = \"__lodash_hash_undefined__\";\nvar objectProto4 = Object.prototype;\nvar hasOwnProperty3 = objectProto4.hasOwnProperty;\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (_nativeCreate_default) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty3.call(data, key) ? data[key] : undefined;\n}\nvar _hashGet_default = hashGet;\n\n// ../node_modules/lodash-es/_hashHas.js\nvar objectProto5 = Object.prototype;\nvar hasOwnProperty4 = objectProto5.hasOwnProperty;\nfunction hashHas(key) {\n  var data = this.__data__;\n  return _nativeCreate_default ? data[key] !== undefined : hasOwnProperty4.call(data, key);\n}\nvar _hashHas_default = hashHas;\n\n// ../node_modules/lodash-es/_hashSet.js\nvar HASH_UNDEFINED2 = \"__lodash_hash_undefined__\";\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = _nativeCreate_default && value === undefined ? HASH_UNDEFINED2 : value;\n  return this;\n}\nvar _hashSet_default = hashSet;\n\n// ../node_modules/lodash-es/_Hash.js\nfunction Hash(entries) {\n  var index = -1, length = entries == null ? 0 : entries.length;\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\nHash.prototype.clear = _hashClear_default;\nHash.prototype[\"delete\"] = _hashDelete_default;\nHash.prototype.get = _hashGet_default;\nHash.prototype.has = _hashHas_default;\nHash.prototype.set = _hashSet_default;\nvar _Hash_default = Hash;\n\n// ../node_modules/lodash-es/_listCacheClear.js\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\nvar _listCacheClear_default = listCacheClear;\n\n// ../node_modules/lodash-es/_assocIndexOf.js\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq_default(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\nvar _assocIndexOf_default = assocIndexOf;\n\n// ../node_modules/lodash-es/_listCacheDelete.js\nvar arrayProto = Array.prototype;\nvar splice = arrayProto.splice;\nfunction listCacheDelete(key) {\n  var data = this.__data__, index = _assocIndexOf_default(data, key);\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\nvar _listCacheDelete_default = listCacheDelete;\n\n// ../node_modules/lodash-es/_listCacheGet.js\nfunction listCacheGet(key) {\n  var data = this.__data__, index = _assocIndexOf_default(data, key);\n  return index < 0 ? undefined : data[index][1];\n}\nvar _listCacheGet_default = listCacheGet;\n\n// ../node_modules/lodash-es/_listCacheHas.js\nfunction listCacheHas(key) {\n  return _assocIndexOf_default(this.__data__, key) > -1;\n}\nvar _listCacheHas_default = listCacheHas;\n\n// ../node_modules/lodash-es/_listCacheSet.js\nfunction listCacheSet(key, value) {\n  var data = this.__data__, index = _assocIndexOf_default(data, key);\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\nvar _listCacheSet_default = listCacheSet;\n\n// ../node_modules/lodash-es/_ListCache.js\nfunction ListCache(entries) {\n  var index = -1, length = entries == null ? 0 : entries.length;\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\nListCache.prototype.clear = _listCacheClear_default;\nListCache.prototype[\"delete\"] = _listCacheDelete_default;\nListCache.prototype.get = _listCacheGet_default;\nListCache.prototype.has = _listCacheHas_default;\nListCache.prototype.set = _listCacheSet_default;\nvar _ListCache_default = ListCache;\n\n// ../node_modules/lodash-es/_Map.js\nvar Map2 = _getNative_default(_root_default, \"Map\");\nvar _Map_default = Map2;\n\n// ../node_modules/lodash-es/_mapCacheClear.js\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    hash: new _Hash_default,\n    map: new (_Map_default || _ListCache_default),\n    string: new _Hash_default\n  };\n}\nvar _mapCacheClear_default = mapCacheClear;\n\n// ../node_modules/lodash-es/_isKeyable.js\nfunction isKeyable(value) {\n  var type = typeof value;\n  return type == \"string\" || type == \"number\" || type == \"symbol\" || type == \"boolean\" ? value !== \"__proto__\" : value === null;\n}\nvar _isKeyable_default = isKeyable;\n\n// ../node_modules/lodash-es/_getMapData.js\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return _isKeyable_default(key) ? data[typeof key == \"string\" ? \"string\" : \"hash\"] : data.map;\n}\nvar _getMapData_default = getMapData;\n\n// ../node_modules/lodash-es/_mapCacheDelete.js\nfunction mapCacheDelete(key) {\n  var result = _getMapData_default(this, key)[\"delete\"](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\nvar _mapCacheDelete_default = mapCacheDelete;\n\n// ../node_modules/lodash-es/_mapCacheGet.js\nfunction mapCacheGet(key) {\n  return _getMapData_default(this, key).get(key);\n}\nvar _mapCacheGet_default = mapCacheGet;\n\n// ../node_modules/lodash-es/_mapCacheHas.js\nfunction mapCacheHas(key) {\n  return _getMapData_default(this, key).has(key);\n}\nvar _mapCacheHas_default = mapCacheHas;\n\n// ../node_modules/lodash-es/_mapCacheSet.js\nfunction mapCacheSet(key, value) {\n  var data = _getMapData_default(this, key), size = data.size;\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\nvar _mapCacheSet_default = mapCacheSet;\n\n// ../node_modules/lodash-es/_MapCache.js\nfunction MapCache(entries) {\n  var index = -1, length = entries == null ? 0 : entries.length;\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\nMapCache.prototype.clear = _mapCacheClear_default;\nMapCache.prototype[\"delete\"] = _mapCacheDelete_default;\nMapCache.prototype.get = _mapCacheGet_default;\nMapCache.prototype.has = _mapCacheHas_default;\nMapCache.prototype.set = _mapCacheSet_default;\nvar _MapCache_default = MapCache;\n\n// ../node_modules/lodash-es/memoize.js\nvar FUNC_ERROR_TEXT = \"Expected a function\";\nfunction memoize(func, resolver) {\n  if (typeof func != \"function\" || resolver != null && typeof resolver != \"function\") {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || _MapCache_default);\n  return memoized;\n}\nmemoize.Cache = _MapCache_default;\nvar memoize_default = memoize;\n// ../src/utils/process.ts\nvar CHUNK_SIZE = 2000;\nfunction writeToStderr(data) {\n  for (let i = 0;i < data.length; i += CHUNK_SIZE) {\n    process.stderr.write(data.substring(i, i + CHUNK_SIZE));\n  }\n}\n\n// ../src/utils/debugFilter.ts\nvar parseDebugFilter = memoize_default((filterString) => {\n  if (!filterString || filterString.trim() === \"\") {\n    return null;\n  }\n  const filters = filterString.split(\",\").map((f) => f.trim()).filter(Boolean);\n  if (filters.length === 0) {\n    return null;\n  }\n  const hasExclusive = filters.some((f) => f.startsWith(\"!\"));\n  const hasInclusive = filters.some((f) => !f.startsWith(\"!\"));\n  if (hasExclusive && hasInclusive) {\n    return null;\n  }\n  const cleanFilters = filters.map((f) => f.replace(/^!/, \"\").toLowerCase());\n  return {\n    include: hasExclusive ? [] : cleanFilters,\n    exclude: hasExclusive ? cleanFilters : [],\n    isExclusive: hasExclusive\n  };\n});\nfunction extractDebugCategories(message) {\n  const categories = [];\n  const mcpMatch = message.match(/^MCP server [\"']([^\"']+)[\"']/);\n  if (mcpMatch && mcpMatch[1]) {\n    categories.push(\"mcp\");\n    categories.push(mcpMatch[1].toLowerCase());\n  } else {\n    const prefixMatch = message.match(/^([^:[]+):/);\n    if (prefixMatch && prefixMatch[1]) {\n      categories.push(prefixMatch[1].trim().toLowerCase());\n    }\n  }\n  const bracketMatch = message.match(/^\\[([^\\]]+)]/);\n  if (bracketMatch && bracketMatch[1]) {\n    categories.push(bracketMatch[1].trim().toLowerCase());\n  }\n  if (message.toLowerCase().includes(\"statsig event:\")) {\n    categories.push(\"statsig\");\n  }\n  const secondaryMatch = message.match(/:\\s*([^:]+?)(?:\\s+(?:type|mode|status|event))?:/);\n  if (secondaryMatch && secondaryMatch[1]) {\n    const secondary = secondaryMatch[1].trim().toLowerCase();\n    if (secondary.length < 30 && !secondary.includes(\" \")) {\n      categories.push(secondary);\n    }\n  }\n  return Array.from(new Set(categories));\n}\nfunction shouldShowDebugCategories(categories, filter) {\n  if (!filter) {\n    return true;\n  }\n  if (categories.length === 0) {\n    return false;\n  }\n  if (filter.isExclusive) {\n    return !categories.some((cat) => filter.exclude.includes(cat));\n  } else {\n    return categories.some((cat) => filter.include.includes(cat));\n  }\n}\nfunction shouldShowDebugMessage(message, filter) {\n  if (!filter) {\n    return true;\n  }\n  const categories = extractDebugCategories(message);\n  return shouldShowDebugCategories(categories, filter);\n}\n\n// ../src/utils/envUtils.ts\n\n\nfunction getClaudeConfigHomeDir() {\n  return process.env.CLAUDE_CONFIG_DIR ?? (0,path__WEBPACK_IMPORTED_MODULE_0__.join)((0,os__WEBPACK_IMPORTED_MODULE_7__.homedir)(), \".claude\");\n}\nfunction isEnvTruthy(envVar) {\n  if (!envVar)\n    return false;\n  if (typeof envVar === \"boolean\")\n    return envVar;\n  const normalizedValue = envVar.toLowerCase().trim();\n  return [\"1\", \"true\", \"yes\", \"on\"].includes(normalizedValue);\n}\n\n// ../src/utils/debug.ts\n\n\n// ../src/bootstrap/state.ts\n\n\n\n// ../src/bootstrap/envValidators.ts\nvar bashMaxOutputLengthValidator = {\n  name: \"BASH_MAX_OUTPUT_LENGTH\",\n  default: 30000,\n  validate: (value) => {\n    const MAX_OUTPUT_LENGTH = 150000;\n    const DEFAULT_MAX_OUTPUT_LENGTH = 30000;\n    if (!value) {\n      return {\n        effective: DEFAULT_MAX_OUTPUT_LENGTH,\n        status: \"valid\"\n      };\n    }\n    const parsed = parseInt(value, 10);\n    if (isNaN(parsed) || parsed <= 0) {\n      return {\n        effective: DEFAULT_MAX_OUTPUT_LENGTH,\n        status: \"invalid\",\n        message: `Invalid value \"${value}\" (using default: ${DEFAULT_MAX_OUTPUT_LENGTH})`\n      };\n    }\n    if (parsed > MAX_OUTPUT_LENGTH) {\n      return {\n        effective: MAX_OUTPUT_LENGTH,\n        status: \"capped\",\n        message: `Capped from ${parsed} to ${MAX_OUTPUT_LENGTH}`\n      };\n    }\n    return { effective: parsed, status: \"valid\" };\n  }\n};\nvar maxOutputTokensValidator = {\n  name: \"CLAUDE_CODE_MAX_OUTPUT_TOKENS\",\n  default: 32000,\n  validate: (value) => {\n    if (!value) {\n      return { effective: 32000, status: \"valid\" };\n    }\n    const parsed = parseInt(value, 10);\n    if (isNaN(parsed) || parsed <= 0) {\n      return {\n        effective: 32000,\n        status: \"invalid\",\n        message: `Invalid value \"${value}\" (using default: 32000)`\n      };\n    }\n    if (parsed > 32000) {\n      return {\n        effective: 32000,\n        status: \"capped\",\n        message: `Capped from ${parsed} to 32000`\n      };\n    }\n    return { effective: parsed, status: \"valid\" };\n  }\n};\n\n// ../src/bootstrap/state.ts\nfunction getInitialState() {\n  return {\n    originalCwd: (0,process__WEBPACK_IMPORTED_MODULE_8__.cwd)(),\n    totalCostUSD: 0,\n    totalAPIDuration: 0,\n    totalAPIDurationWithoutRetries: 0,\n    totalToolDuration: 0,\n    startTime: Date.now(),\n    lastInteractionTime: Date.now(),\n    totalLinesAdded: 0,\n    totalLinesRemoved: 0,\n    hasUnknownModelCost: false,\n    cwd: (0,process__WEBPACK_IMPORTED_MODULE_8__.cwd)(),\n    modelUsage: {},\n    mainLoopModelOverride: undefined,\n    maxRateLimitFallbackActive: false,\n    initialMainLoopModel: null,\n    modelStrings: null,\n    isNonInteractiveSession: true,\n    isInteractive: false,\n    clientType: \"cli\",\n    sessionIngressToken: undefined,\n    oauthTokenFromFd: undefined,\n    apiKeyFromFd: undefined,\n    flagSettingsPath: undefined,\n    allowedSettingSources: [\n      \"userSettings\",\n      \"projectSettings\",\n      \"localSettings\",\n      \"flagSettings\",\n      \"policySettings\"\n    ],\n    meter: null,\n    sessionCounter: null,\n    locCounter: null,\n    prCounter: null,\n    commitCounter: null,\n    costCounter: null,\n    tokenCounter: null,\n    codeEditToolDecisionCounter: null,\n    activeTimeCounter: null,\n    sessionId: (0,crypto__WEBPACK_IMPORTED_MODULE_9__.randomUUID)(),\n    loggerProvider: null,\n    eventLogger: null,\n    meterProvider: null,\n    agentColorMap: new Map,\n    agentColorIndex: 0,\n    envVarValidators: [bashMaxOutputLengthValidator, maxOutputTokensValidator],\n    lastAPIRequest: null,\n    inMemoryErrorLog: []\n  };\n}\nvar STATE = getInitialState();\nfunction getSessionId() {\n  return STATE.sessionId;\n}\n\n// ../src/utils/debug.ts\nvar isDebugMode = memoize_default(() => {\n  return isEnvTruthy(process.env.DEBUG) || isEnvTruthy(process.env.DEBUG_SDK) || process.argv.includes(\"--debug\") || process.argv.includes(\"-d\") || isDebugToStdErr() || process.argv.some((arg) => arg.startsWith(\"--debug=\"));\n});\nvar getDebugFilter = memoize_default(() => {\n  const debugArg = process.argv.find((arg) => arg.startsWith(\"--debug=\"));\n  if (!debugArg) {\n    return null;\n  }\n  const filterPattern = debugArg.substring(\"--debug=\".length);\n  return parseDebugFilter(filterPattern);\n});\nvar isDebugToStdErr = memoize_default(() => {\n  return process.argv.includes(\"--debug-to-stderr\") || process.argv.includes(\"-d2e\");\n});\nfunction shouldLogDebugMessage(message) {\n  const filter = getDebugFilter();\n  return shouldShowDebugMessage(message, filter);\n}\nvar hasFormattedOutput = false;\nfunction logForDebugging(message, { level } = {\n  level: \"debug\"\n}) {\n  if (!shouldLogDebugMessage(message)) {\n    return;\n  }\n  if (hasFormattedOutput && message.includes(`\n`)) {\n    message = JSON.stringify(message);\n  }\n  const output = `[${level.toUpperCase()}] ${message.trim()}\n`;\n  if (isDebugToStdErr()) {\n    writeToStderr(output);\n    return;\n  }\n  if (!getFsImplementation().existsSync((0,path__WEBPACK_IMPORTED_MODULE_0__.dirname)(getDebugLogPath()))) {\n    getFsImplementation().mkdirSync((0,path__WEBPACK_IMPORTED_MODULE_0__.dirname)(getDebugLogPath()));\n  }\n  getFsImplementation().appendFileSync(getDebugLogPath(), output);\n  updateLatestDebugLogSymlink();\n}\nfunction getDebugLogPath() {\n  return process.env.CLAUDE_CODE_DEBUG_LOGS_DIR ?? (0,path__WEBPACK_IMPORTED_MODULE_0__.join)(getClaudeConfigHomeDir(), \"debug\", `${getSessionId()}.txt`);\n}\nvar updateLatestDebugLogSymlink = memoize_default(() => {\n  try {\n    const debugLogPath = getDebugLogPath();\n    const debugLogsDir = (0,path__WEBPACK_IMPORTED_MODULE_0__.dirname)(debugLogPath);\n    const latestSymlinkPath = (0,path__WEBPACK_IMPORTED_MODULE_0__.join)(debugLogsDir, \"latest\");\n    if (!getFsImplementation().existsSync(debugLogsDir)) {\n      getFsImplementation().mkdirSync(debugLogsDir);\n    }\n    if (getFsImplementation().existsSync(latestSymlinkPath)) {\n      try {\n        getFsImplementation().unlinkSync(latestSymlinkPath);\n      } catch {}\n    }\n    getFsImplementation().symlinkSync(debugLogPath, latestSymlinkPath);\n  } catch {}\n});\n\n// ../src/core/Query.ts\nclass Query {\n  transport;\n  isSingleUserTurn;\n  canUseTool;\n  hooks;\n  abortController;\n  pendingControlResponses = new Map;\n  cleanupPerformed = false;\n  sdkMessages;\n  inputStream = new Stream;\n  initialization;\n  cancelControllers = new Map;\n  hookCallbacks = new Map;\n  nextCallbackId = 0;\n  sdkMcpTransports = new Map;\n  pendingMcpResponses = new Map;\n  firstResultReceivedPromise;\n  firstResultReceivedResolve;\n  constructor(transport, isSingleUserTurn, canUseTool, hooks, abortController, sdkMcpServers = new Map) {\n    this.transport = transport;\n    this.isSingleUserTurn = isSingleUserTurn;\n    this.canUseTool = canUseTool;\n    this.hooks = hooks;\n    this.abortController = abortController;\n    for (const [name, server] of sdkMcpServers) {\n      const sdkTransport = new SdkControlServerTransport((message) => this.sendMcpServerMessageToCli(name, message));\n      this.sdkMcpTransports.set(name, sdkTransport);\n      server.connect(sdkTransport);\n    }\n    this.sdkMessages = this.readSdkMessages();\n    this.firstResultReceivedPromise = new Promise((resolve) => {\n      this.firstResultReceivedResolve = resolve;\n    });\n    this.readMessages();\n    this.initialization = this.initialize();\n    this.initialization.catch(() => {});\n  }\n  setError(error) {\n    this.inputStream.error(error);\n  }\n  cleanup(error) {\n    if (this.cleanupPerformed)\n      return;\n    this.cleanupPerformed = true;\n    try {\n      this.transport.close();\n      this.pendingControlResponses.clear();\n      this.pendingMcpResponses.clear();\n      if (error) {\n        this.inputStream.error(error);\n      } else {\n        this.inputStream.done();\n      }\n    } catch (_error) {}\n  }\n  next(...[value]) {\n    return this.sdkMessages.next(...[value]);\n  }\n  return(value) {\n    return this.sdkMessages.return(value);\n  }\n  throw(e) {\n    return this.sdkMessages.throw(e);\n  }\n  [Symbol.asyncIterator]() {\n    return this.sdkMessages;\n  }\n  [Symbol.asyncDispose]() {\n    return this.sdkMessages[Symbol.asyncDispose]();\n  }\n  async readMessages() {\n    try {\n      for await (const message of this.transport.readMessages()) {\n        if (message.type === \"control_response\") {\n          const handler = this.pendingControlResponses.get(message.response.request_id);\n          if (handler) {\n            handler(message.response);\n          }\n          continue;\n        } else if (message.type === \"control_request\") {\n          this.handleControlRequest(message);\n          continue;\n        } else if (message.type === \"control_cancel_request\") {\n          this.handleControlCancelRequest(message);\n          continue;\n        } else if (message.type === \"keep_alive\") {\n          continue;\n        }\n        if (message.type === \"result\") {\n          if (this.firstResultReceivedResolve) {\n            this.firstResultReceivedResolve();\n          }\n          if (this.isSingleUserTurn) {\n            this.transport.endInput();\n          }\n        }\n        this.inputStream.enqueue(message);\n      }\n      this.inputStream.done();\n      this.cleanup();\n    } catch (error) {\n      this.inputStream.error(error);\n      this.cleanup(error);\n    }\n  }\n  async handleControlRequest(request) {\n    const controller = new AbortController;\n    this.cancelControllers.set(request.request_id, controller);\n    try {\n      const response = await this.processControlRequest(request, controller.signal);\n      const controlResponse = {\n        type: \"control_response\",\n        response: {\n          subtype: \"success\",\n          request_id: request.request_id,\n          response\n        }\n      };\n      await Promise.resolve(this.transport.write(JSON.stringify(controlResponse) + `\n`));\n    } catch (error) {\n      const controlErrorResponse = {\n        type: \"control_response\",\n        response: {\n          subtype: \"error\",\n          request_id: request.request_id,\n          error: error.message || String(error)\n        }\n      };\n      await Promise.resolve(this.transport.write(JSON.stringify(controlErrorResponse) + `\n`));\n    } finally {\n      this.cancelControllers.delete(request.request_id);\n    }\n  }\n  handleControlCancelRequest(request) {\n    const controller = this.cancelControllers.get(request.request_id);\n    if (controller) {\n      controller.abort();\n      this.cancelControllers.delete(request.request_id);\n    }\n  }\n  async processControlRequest(request, signal) {\n    if (request.request.subtype === \"can_use_tool\") {\n      if (!this.canUseTool) {\n        throw new Error(\"canUseTool callback is not provided.\");\n      }\n      return this.canUseTool(request.request.tool_name, request.request.input, {\n        signal,\n        suggestions: request.request.permission_suggestions\n      });\n    } else if (request.request.subtype === \"hook_callback\") {\n      const result = await this.handleHookCallbacks(request.request.callback_id, request.request.input, request.request.tool_use_id, signal);\n      return result;\n    } else if (request.request.subtype === \"mcp_message\") {\n      const mcpRequest = request.request;\n      const transport = this.sdkMcpTransports.get(mcpRequest.server_name);\n      if (!transport) {\n        throw new Error(`SDK MCP server not found: ${mcpRequest.server_name}`);\n      }\n      if (\"method\" in mcpRequest.message && \"id\" in mcpRequest.message && mcpRequest.message.id !== null) {\n        const response = await this.handleMcpControlRequest(mcpRequest.server_name, mcpRequest, transport);\n        return { mcp_response: response };\n      } else {\n        if (transport.onmessage) {\n          transport.onmessage(mcpRequest.message);\n        }\n        return { mcp_response: { jsonrpc: \"2.0\", result: {}, id: 0 } };\n      }\n    }\n    throw new Error(\"Unsupported control request subtype: \" + request.request.subtype);\n  }\n  async* readSdkMessages() {\n    for await (const message of this.inputStream) {\n      yield message;\n    }\n  }\n  async initialize() {\n    let hooks;\n    if (this.hooks) {\n      hooks = {};\n      for (const [event, matchers] of Object.entries(this.hooks)) {\n        if (matchers.length > 0) {\n          hooks[event] = matchers.map((matcher) => {\n            const callbackIds = [];\n            for (const callback of matcher.hooks) {\n              const callbackId = `hook_${this.nextCallbackId++}`;\n              this.hookCallbacks.set(callbackId, callback);\n              callbackIds.push(callbackId);\n            }\n            return {\n              matcher: matcher.matcher,\n              hookCallbackIds: callbackIds\n            };\n          });\n        }\n      }\n    }\n    const sdkMcpServers = this.sdkMcpTransports.size > 0 ? Array.from(this.sdkMcpTransports.keys()) : undefined;\n    const initRequest = {\n      subtype: \"initialize\",\n      hooks,\n      sdkMcpServers\n    };\n    const response = await this.request(initRequest);\n    return response.response;\n  }\n  async interrupt() {\n    await this.request({\n      subtype: \"interrupt\"\n    });\n  }\n  async setPermissionMode(mode) {\n    await this.request({\n      subtype: \"set_permission_mode\",\n      mode\n    });\n  }\n  async setModel(model) {\n    await this.request({\n      subtype: \"set_model\",\n      model\n    });\n  }\n  request(request) {\n    const requestId = Math.random().toString(36).substring(2, 15);\n    const sdkRequest = {\n      request_id: requestId,\n      type: \"control_request\",\n      request\n    };\n    return new Promise((resolve, reject) => {\n      this.pendingControlResponses.set(requestId, (response) => {\n        if (response.subtype === \"success\") {\n          resolve(response);\n        } else {\n          reject(new Error(response.error));\n        }\n      });\n      Promise.resolve(this.transport.write(JSON.stringify(sdkRequest) + `\n`));\n    });\n  }\n  async supportedCommands() {\n    return (await this.initialization).commands;\n  }\n  async supportedModels() {\n    return (await this.initialization).models;\n  }\n  async mcpServerStatus() {\n    const response = await this.request({\n      subtype: \"mcp_status\"\n    });\n    const mcpStatusResponse = response.response;\n    return mcpStatusResponse.mcpServers;\n  }\n  async accountInfo() {\n    return (await this.initialization).account;\n  }\n  async streamInput(stream) {\n    logForDebugging(`[Query.streamInput] Starting to process input stream`);\n    logForDebugging(`[Query.streamInput] this.sdkMcpTransports.size = ${this.sdkMcpTransports.size}`);\n    try {\n      let messageCount = 0;\n      for await (const message of stream) {\n        messageCount++;\n        logForDebugging(`[Query.streamInput] Processing message ${messageCount}: ${message.type}`);\n        if (this.abortController?.signal.aborted)\n          break;\n        await Promise.resolve(this.transport.write(JSON.stringify(message) + `\n`));\n      }\n      logForDebugging(`[Query.streamInput] Finished processing ${messageCount} messages from input stream`);\n      logForDebugging(`[Query.streamInput] About to check MCP servers. this.sdkMcpTransports.size = ${this.sdkMcpTransports.size}`);\n      if (this.sdkMcpTransports.size > 0 && this.firstResultReceivedPromise) {\n        logForDebugging(`[Query.streamInput] Entering Promise.race to wait for result`);\n        const STREAM_CLOSE_TIMEOUT = 1e4;\n        let timeoutId;\n        await Promise.race([\n          this.firstResultReceivedPromise.then(() => {\n            logForDebugging(`[Query.streamInput] Received first result, closing input stream`);\n            if (timeoutId) {\n              clearTimeout(timeoutId);\n            }\n          }),\n          new Promise((resolve) => {\n            timeoutId = setTimeout(() => {\n              logForDebugging(`[Query.streamInput] Timed out waiting for first result, closing input stream`);\n              resolve();\n            }, STREAM_CLOSE_TIMEOUT);\n          })\n        ]);\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n      }\n      logForDebugging(`[Query] Calling transport.endInput() to close stdin to CLI process`);\n      this.transport.endInput();\n    } catch (error) {\n      if (!(error instanceof AbortError)) {\n        throw error;\n      }\n    }\n  }\n  handleHookCallbacks(callbackId, input, toolUseID, abortSignal) {\n    const callback = this.hookCallbacks.get(callbackId);\n    if (!callback) {\n      throw new Error(`No hook callback found for ID: ${callbackId}`);\n    }\n    return callback(input, toolUseID, {\n      signal: abortSignal\n    });\n  }\n  sendMcpServerMessageToCli(serverName, message) {\n    if (\"id\" in message && message.id !== null && message.id !== undefined) {\n      const key = `${serverName}:${message.id}`;\n      const pending = this.pendingMcpResponses.get(key);\n      if (pending) {\n        pending.resolve(message);\n        this.pendingMcpResponses.delete(key);\n        return;\n      }\n    }\n    throw new Error(\"No pending request found\");\n  }\n  handleMcpControlRequest(serverName, mcpRequest, transport) {\n    const messageId = \"id\" in mcpRequest.message ? mcpRequest.message.id : null;\n    const key = `${serverName}:${messageId}`;\n    return new Promise((resolve, reject) => {\n      let timeoutId = null;\n      const cleanup = () => {\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n        this.pendingMcpResponses.delete(key);\n      };\n      const resolveAndCleanup = (response) => {\n        cleanup();\n        resolve(response);\n      };\n      const rejectAndCleanup = (error) => {\n        cleanup();\n        reject(error);\n      };\n      this.pendingMcpResponses.set(key, {\n        resolve: resolveAndCleanup,\n        reject: rejectAndCleanup\n      });\n      if (transport.onmessage) {\n        transport.onmessage(mcpRequest.message);\n      } else {\n        cleanup();\n        reject(new Error(\"No message handler registered\"));\n        return;\n      }\n      const MCP_REQUEST_TIMEOUT_MS = Number(process.env.MCP_REQUEST_TIMEOUT_MS ?? 180000);\n      timeoutId = setTimeout(() => {\n        if (this.pendingMcpResponses.has(key)) {\n          cleanup();\n          reject(new Error(\"Request timeout\"));\n        }\n      }, MCP_REQUEST_TIMEOUT_MS);\n    });\n  }\n}\n\n// ../src/core/sharedQuery.ts\nfunction createSharedQuery({\n  prompt,\n  options: {\n    abortController = createAbortController(),\n    additionalDirectories = [],\n    agents,\n    allowedTools = [],\n    appendSystemPrompt,\n    canUseTool,\n    continue: continueConversation,\n    customSystemPrompt,\n    cwd: cwd2,\n    disallowedTools = [],\n    env,\n    executable = isRunningWithBun() ? \"bun\" : \"node\",\n    executableArgs = [],\n    extraArgs = {},\n    fallbackModel,\n    forkSession,\n    hooks,\n    includePartialMessages,\n    maxThinkingTokens,\n    maxTurns,\n    mcpServers,\n    model,\n    pathToClaudeCodeExecutable,\n    permissionMode = \"default\",\n    permissionPromptToolName,\n    resume,\n    resumeSessionAt,\n    settingSources,\n    stderr,\n    strictMcpConfig\n  } = {}\n}) {\n  if (!env) {\n    env = { ...process.env };\n  }\n  if (!env.CLAUDE_CODE_ENTRYPOINT) {\n    env.CLAUDE_CODE_ENTRYPOINT = \"sdk-ts\";\n  }\n  if (!pathToClaudeCodeExecutable) {\n    throw new Error(\"pathToClaudeCodeExecutable is required\");\n  }\n  const allMcpServers = {};\n  const sdkMcpServers = new Map;\n  if (mcpServers) {\n    for (const [name, config] of Object.entries(mcpServers)) {\n      if (config.type === \"sdk\" && \"instance\" in config) {\n        sdkMcpServers.set(name, config.instance);\n        allMcpServers[name] = {\n          type: \"sdk\",\n          name\n        };\n      } else {\n        allMcpServers[name] = config;\n      }\n    }\n  }\n  const isSingleUserTurn = typeof prompt === \"string\";\n  const transport = new ProcessTransport({\n    abortController,\n    additionalDirectories,\n    agents,\n    cwd: cwd2,\n    executable,\n    executableArgs,\n    extraArgs,\n    pathToClaudeCodeExecutable,\n    env,\n    forkSession,\n    stderr,\n    customSystemPrompt,\n    appendSystemPrompt,\n    maxThinkingTokens,\n    maxTurns,\n    model,\n    fallbackModel,\n    permissionMode,\n    permissionPromptToolName,\n    continueConversation,\n    resume,\n    resumeSessionAt,\n    settingSources,\n    allowedTools,\n    disallowedTools,\n    mcpServers: allMcpServers,\n    strictMcpConfig,\n    canUseTool: !!canUseTool,\n    hooks: !!hooks,\n    includePartialMessages\n  });\n  const query = new Query(transport, isSingleUserTurn, canUseTool, hooks, abortController, sdkMcpServers);\n  if (typeof prompt === \"string\") {\n    transport.write(JSON.stringify({\n      type: \"user\",\n      session_id: \"\",\n      message: {\n        role: \"user\",\n        content: [{ type: \"text\", text: prompt }]\n      },\n      parent_tool_use_id: null\n    }) + `\n`);\n  } else {\n    query.streamInput(prompt);\n  }\n  return query;\n}\n\n// ../node_modules/zod/v3/external.js\nvar exports_external = {};\n__export(exports_external, {\n  void: () => voidType,\n  util: () => util,\n  unknown: () => unknownType,\n  union: () => unionType,\n  undefined: () => undefinedType,\n  tuple: () => tupleType,\n  transformer: () => effectsType,\n  symbol: () => symbolType,\n  string: () => stringType,\n  strictObject: () => strictObjectType,\n  setErrorMap: () => setErrorMap,\n  set: () => setType,\n  record: () => recordType,\n  quotelessJson: () => quotelessJson,\n  promise: () => promiseType,\n  preprocess: () => preprocessType,\n  pipeline: () => pipelineType,\n  ostring: () => ostring,\n  optional: () => optionalType,\n  onumber: () => onumber,\n  oboolean: () => oboolean,\n  objectUtil: () => objectUtil,\n  object: () => objectType,\n  number: () => numberType,\n  nullable: () => nullableType,\n  null: () => nullType,\n  never: () => neverType,\n  nativeEnum: () => nativeEnumType,\n  nan: () => nanType,\n  map: () => mapType,\n  makeIssue: () => makeIssue,\n  literal: () => literalType,\n  lazy: () => lazyType,\n  late: () => late,\n  isValid: () => isValid,\n  isDirty: () => isDirty,\n  isAsync: () => isAsync,\n  isAborted: () => isAborted,\n  intersection: () => intersectionType,\n  instanceof: () => instanceOfType,\n  getParsedType: () => getParsedType,\n  getErrorMap: () => getErrorMap,\n  function: () => functionType,\n  enum: () => enumType,\n  effect: () => effectsType,\n  discriminatedUnion: () => discriminatedUnionType,\n  defaultErrorMap: () => en_default,\n  datetimeRegex: () => datetimeRegex,\n  date: () => dateType,\n  custom: () => custom,\n  coerce: () => coerce,\n  boolean: () => booleanType,\n  bigint: () => bigIntType,\n  array: () => arrayType,\n  any: () => anyType,\n  addIssueToContext: () => addIssueToContext,\n  ZodVoid: () => ZodVoid,\n  ZodUnknown: () => ZodUnknown,\n  ZodUnion: () => ZodUnion,\n  ZodUndefined: () => ZodUndefined,\n  ZodType: () => ZodType,\n  ZodTuple: () => ZodTuple,\n  ZodTransformer: () => ZodEffects,\n  ZodSymbol: () => ZodSymbol,\n  ZodString: () => ZodString,\n  ZodSet: () => ZodSet,\n  ZodSchema: () => ZodType,\n  ZodRecord: () => ZodRecord,\n  ZodReadonly: () => ZodReadonly,\n  ZodPromise: () => ZodPromise,\n  ZodPipeline: () => ZodPipeline,\n  ZodParsedType: () => ZodParsedType,\n  ZodOptional: () => ZodOptional,\n  ZodObject: () => ZodObject,\n  ZodNumber: () => ZodNumber,\n  ZodNullable: () => ZodNullable,\n  ZodNull: () => ZodNull,\n  ZodNever: () => ZodNever,\n  ZodNativeEnum: () => ZodNativeEnum,\n  ZodNaN: () => ZodNaN,\n  ZodMap: () => ZodMap,\n  ZodLiteral: () => ZodLiteral,\n  ZodLazy: () => ZodLazy,\n  ZodIssueCode: () => ZodIssueCode,\n  ZodIntersection: () => ZodIntersection,\n  ZodFunction: () => ZodFunction,\n  ZodFirstPartyTypeKind: () => ZodFirstPartyTypeKind,\n  ZodError: () => ZodError,\n  ZodEnum: () => ZodEnum,\n  ZodEffects: () => ZodEffects,\n  ZodDiscriminatedUnion: () => ZodDiscriminatedUnion,\n  ZodDefault: () => ZodDefault,\n  ZodDate: () => ZodDate,\n  ZodCatch: () => ZodCatch,\n  ZodBranded: () => ZodBranded,\n  ZodBoolean: () => ZodBoolean,\n  ZodBigInt: () => ZodBigInt,\n  ZodArray: () => ZodArray,\n  ZodAny: () => ZodAny,\n  Schema: () => ZodType,\n  ParseStatus: () => ParseStatus,\n  OK: () => OK,\n  NEVER: () => NEVER,\n  INVALID: () => INVALID,\n  EMPTY_PATH: () => EMPTY_PATH,\n  DIRTY: () => DIRTY,\n  BRAND: () => BRAND\n});\n\n// ../node_modules/zod/v3/helpers/util.js\nvar util;\n(function(util2) {\n  util2.assertEqual = (_) => {};\n  function assertIs(_arg) {}\n  util2.assertIs = assertIs;\n  function assertNever(_x) {\n    throw new Error;\n  }\n  util2.assertNever = assertNever;\n  util2.arrayToEnum = (items) => {\n    const obj = {};\n    for (const item of items) {\n      obj[item] = item;\n    }\n    return obj;\n  };\n  util2.getValidEnumValues = (obj) => {\n    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n    const filtered = {};\n    for (const k of validKeys) {\n      filtered[k] = obj[k];\n    }\n    return util2.objectValues(filtered);\n  };\n  util2.objectValues = (obj) => {\n    return util2.objectKeys(obj).map(function(e) {\n      return obj[e];\n    });\n  };\n  util2.objectKeys = typeof Object.keys === \"function\" ? (obj) => Object.keys(obj) : (object) => {\n    const keys = [];\n    for (const key in object) {\n      if (Object.prototype.hasOwnProperty.call(object, key)) {\n        keys.push(key);\n      }\n    }\n    return keys;\n  };\n  util2.find = (arr, checker) => {\n    for (const item of arr) {\n      if (checker(item))\n        return item;\n    }\n    return;\n  };\n  util2.isInteger = typeof Number.isInteger === \"function\" ? (val) => Number.isInteger(val) : (val) => typeof val === \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n  function joinValues(array, separator = \" | \") {\n    return array.map((val) => typeof val === \"string\" ? `'${val}'` : val).join(separator);\n  }\n  util2.joinValues = joinValues;\n  util2.jsonStringifyReplacer = (_, value) => {\n    if (typeof value === \"bigint\") {\n      return value.toString();\n    }\n    return value;\n  };\n})(util || (util = {}));\nvar objectUtil;\n(function(objectUtil2) {\n  objectUtil2.mergeShapes = (first, second) => {\n    return {\n      ...first,\n      ...second\n    };\n  };\n})(objectUtil || (objectUtil = {}));\nvar ZodParsedType = util.arrayToEnum([\n  \"string\",\n  \"nan\",\n  \"number\",\n  \"integer\",\n  \"float\",\n  \"boolean\",\n  \"date\",\n  \"bigint\",\n  \"symbol\",\n  \"function\",\n  \"undefined\",\n  \"null\",\n  \"array\",\n  \"object\",\n  \"unknown\",\n  \"promise\",\n  \"void\",\n  \"never\",\n  \"map\",\n  \"set\"\n]);\nvar getParsedType = (data) => {\n  const t = typeof data;\n  switch (t) {\n    case \"undefined\":\n      return ZodParsedType.undefined;\n    case \"string\":\n      return ZodParsedType.string;\n    case \"number\":\n      return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n    case \"boolean\":\n      return ZodParsedType.boolean;\n    case \"function\":\n      return ZodParsedType.function;\n    case \"bigint\":\n      return ZodParsedType.bigint;\n    case \"symbol\":\n      return ZodParsedType.symbol;\n    case \"object\":\n      if (Array.isArray(data)) {\n        return ZodParsedType.array;\n      }\n      if (data === null) {\n        return ZodParsedType.null;\n      }\n      if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n        return ZodParsedType.promise;\n      }\n      if (typeof Map !== \"undefined\" && data instanceof Map) {\n        return ZodParsedType.map;\n      }\n      if (typeof Set !== \"undefined\" && data instanceof Set) {\n        return ZodParsedType.set;\n      }\n      if (typeof Date !== \"undefined\" && data instanceof Date) {\n        return ZodParsedType.date;\n      }\n      return ZodParsedType.object;\n    default:\n      return ZodParsedType.unknown;\n  }\n};\n\n// ../node_modules/zod/v3/ZodError.js\nvar ZodIssueCode = util.arrayToEnum([\n  \"invalid_type\",\n  \"invalid_literal\",\n  \"custom\",\n  \"invalid_union\",\n  \"invalid_union_discriminator\",\n  \"invalid_enum_value\",\n  \"unrecognized_keys\",\n  \"invalid_arguments\",\n  \"invalid_return_type\",\n  \"invalid_date\",\n  \"invalid_string\",\n  \"too_small\",\n  \"too_big\",\n  \"invalid_intersection_types\",\n  \"not_multiple_of\",\n  \"not_finite\"\n]);\nvar quotelessJson = (obj) => {\n  const json = JSON.stringify(obj, null, 2);\n  return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\n\nclass ZodError extends Error {\n  get errors() {\n    return this.issues;\n  }\n  constructor(issues) {\n    super();\n    this.issues = [];\n    this.addIssue = (sub) => {\n      this.issues = [...this.issues, sub];\n    };\n    this.addIssues = (subs = []) => {\n      this.issues = [...this.issues, ...subs];\n    };\n    const actualProto = new.target.prototype;\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(this, actualProto);\n    } else {\n      this.__proto__ = actualProto;\n    }\n    this.name = \"ZodError\";\n    this.issues = issues;\n  }\n  format(_mapper) {\n    const mapper = _mapper || function(issue) {\n      return issue.message;\n    };\n    const fieldErrors = { _errors: [] };\n    const processError = (error) => {\n      for (const issue of error.issues) {\n        if (issue.code === \"invalid_union\") {\n          issue.unionErrors.map(processError);\n        } else if (issue.code === \"invalid_return_type\") {\n          processError(issue.returnTypeError);\n        } else if (issue.code === \"invalid_arguments\") {\n          processError(issue.argumentsError);\n        } else if (issue.path.length === 0) {\n          fieldErrors._errors.push(mapper(issue));\n        } else {\n          let curr = fieldErrors;\n          let i = 0;\n          while (i < issue.path.length) {\n            const el = issue.path[i];\n            const terminal = i === issue.path.length - 1;\n            if (!terminal) {\n              curr[el] = curr[el] || { _errors: [] };\n            } else {\n              curr[el] = curr[el] || { _errors: [] };\n              curr[el]._errors.push(mapper(issue));\n            }\n            curr = curr[el];\n            i++;\n          }\n        }\n      }\n    };\n    processError(this);\n    return fieldErrors;\n  }\n  static assert(value) {\n    if (!(value instanceof ZodError)) {\n      throw new Error(`Not a ZodError: ${value}`);\n    }\n  }\n  toString() {\n    return this.message;\n  }\n  get message() {\n    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n  }\n  get isEmpty() {\n    return this.issues.length === 0;\n  }\n  flatten(mapper = (issue) => issue.message) {\n    const fieldErrors = {};\n    const formErrors = [];\n    for (const sub of this.issues) {\n      if (sub.path.length > 0) {\n        const firstEl = sub.path[0];\n        fieldErrors[firstEl] = fieldErrors[firstEl] || [];\n        fieldErrors[firstEl].push(mapper(sub));\n      } else {\n        formErrors.push(mapper(sub));\n      }\n    }\n    return { formErrors, fieldErrors };\n  }\n  get formErrors() {\n    return this.flatten();\n  }\n}\nZodError.create = (issues) => {\n  const error = new ZodError(issues);\n  return error;\n};\n\n// ../node_modules/zod/v3/locales/en.js\nvar errorMap = (issue, _ctx) => {\n  let message;\n  switch (issue.code) {\n    case ZodIssueCode.invalid_type:\n      if (issue.received === ZodParsedType.undefined) {\n        message = \"Required\";\n      } else {\n        message = `Expected ${issue.expected}, received ${issue.received}`;\n      }\n      break;\n    case ZodIssueCode.invalid_literal:\n      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n      break;\n    case ZodIssueCode.unrecognized_keys:\n      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n      break;\n    case ZodIssueCode.invalid_union:\n      message = `Invalid input`;\n      break;\n    case ZodIssueCode.invalid_union_discriminator:\n      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n      break;\n    case ZodIssueCode.invalid_enum_value:\n      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n      break;\n    case ZodIssueCode.invalid_arguments:\n      message = `Invalid function arguments`;\n      break;\n    case ZodIssueCode.invalid_return_type:\n      message = `Invalid function return type`;\n      break;\n    case ZodIssueCode.invalid_date:\n      message = `Invalid date`;\n      break;\n    case ZodIssueCode.invalid_string:\n      if (typeof issue.validation === \"object\") {\n        if (\"includes\" in issue.validation) {\n          message = `Invalid input: must include \"${issue.validation.includes}\"`;\n          if (typeof issue.validation.position === \"number\") {\n            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n          }\n        } else if (\"startsWith\" in issue.validation) {\n          message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n        } else if (\"endsWith\" in issue.validation) {\n          message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n        } else {\n          util.assertNever(issue.validation);\n        }\n      } else if (issue.validation !== \"regex\") {\n        message = `Invalid ${issue.validation}`;\n      } else {\n        message = \"Invalid\";\n      }\n      break;\n    case ZodIssueCode.too_small:\n      if (issue.type === \"array\")\n        message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n      else if (issue.type === \"string\")\n        message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n      else if (issue.type === \"number\")\n        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n      else if (issue.type === \"bigint\")\n        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n      else if (issue.type === \"date\")\n        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n      else\n        message = \"Invalid input\";\n      break;\n    case ZodIssueCode.too_big:\n      if (issue.type === \"array\")\n        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n      else if (issue.type === \"string\")\n        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n      else if (issue.type === \"number\")\n        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n      else if (issue.type === \"bigint\")\n        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n      else if (issue.type === \"date\")\n        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n      else\n        message = \"Invalid input\";\n      break;\n    case ZodIssueCode.custom:\n      message = `Invalid input`;\n      break;\n    case ZodIssueCode.invalid_intersection_types:\n      message = `Intersection results could not be merged`;\n      break;\n    case ZodIssueCode.not_multiple_of:\n      message = `Number must be a multiple of ${issue.multipleOf}`;\n      break;\n    case ZodIssueCode.not_finite:\n      message = \"Number must be finite\";\n      break;\n    default:\n      message = _ctx.defaultError;\n      util.assertNever(issue);\n  }\n  return { message };\n};\nvar en_default = errorMap;\n\n// ../node_modules/zod/v3/errors.js\nvar overrideErrorMap = en_default;\nfunction setErrorMap(map) {\n  overrideErrorMap = map;\n}\nfunction getErrorMap() {\n  return overrideErrorMap;\n}\n// ../node_modules/zod/v3/helpers/parseUtil.js\nvar makeIssue = (params) => {\n  const { data, path, errorMaps, issueData } = params;\n  const fullPath = [...path, ...issueData.path || []];\n  const fullIssue = {\n    ...issueData,\n    path: fullPath\n  };\n  if (issueData.message !== undefined) {\n    return {\n      ...issueData,\n      path: fullPath,\n      message: issueData.message\n    };\n  }\n  let errorMessage = \"\";\n  const maps = errorMaps.filter((m) => !!m).slice().reverse();\n  for (const map of maps) {\n    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n  }\n  return {\n    ...issueData,\n    path: fullPath,\n    message: errorMessage\n  };\n};\nvar EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n  const overrideMap = getErrorMap();\n  const issue = makeIssue({\n    issueData,\n    data: ctx.data,\n    path: ctx.path,\n    errorMaps: [\n      ctx.common.contextualErrorMap,\n      ctx.schemaErrorMap,\n      overrideMap,\n      overrideMap === en_default ? undefined : en_default\n    ].filter((x) => !!x)\n  });\n  ctx.common.issues.push(issue);\n}\n\nclass ParseStatus {\n  constructor() {\n    this.value = \"valid\";\n  }\n  dirty() {\n    if (this.value === \"valid\")\n      this.value = \"dirty\";\n  }\n  abort() {\n    if (this.value !== \"aborted\")\n      this.value = \"aborted\";\n  }\n  static mergeArray(status, results) {\n    const arrayValue = [];\n    for (const s of results) {\n      if (s.status === \"aborted\")\n        return INVALID;\n      if (s.status === \"dirty\")\n        status.dirty();\n      arrayValue.push(s.value);\n    }\n    return { status: status.value, value: arrayValue };\n  }\n  static async mergeObjectAsync(status, pairs) {\n    const syncPairs = [];\n    for (const pair of pairs) {\n      const key = await pair.key;\n      const value = await pair.value;\n      syncPairs.push({\n        key,\n        value\n      });\n    }\n    return ParseStatus.mergeObjectSync(status, syncPairs);\n  }\n  static mergeObjectSync(status, pairs) {\n    const finalObject = {};\n    for (const pair of pairs) {\n      const { key, value } = pair;\n      if (key.status === \"aborted\")\n        return INVALID;\n      if (value.status === \"aborted\")\n        return INVALID;\n      if (key.status === \"dirty\")\n        status.dirty();\n      if (value.status === \"dirty\")\n        status.dirty();\n      if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n        finalObject[key.value] = value.value;\n      }\n    }\n    return { status: status.value, value: finalObject };\n  }\n}\nvar INVALID = Object.freeze({\n  status: \"aborted\"\n});\nvar DIRTY = (value) => ({ status: \"dirty\", value });\nvar OK = (value) => ({ status: \"valid\", value });\nvar isAborted = (x) => x.status === \"aborted\";\nvar isDirty = (x) => x.status === \"dirty\";\nvar isValid = (x) => x.status === \"valid\";\nvar isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n// ../node_modules/zod/v3/helpers/errorUtil.js\nvar errorUtil;\n(function(errorUtil2) {\n  errorUtil2.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n  errorUtil2.toString = (message) => typeof message === \"string\" ? message : message?.message;\n})(errorUtil || (errorUtil = {}));\n\n// ../node_modules/zod/v3/types.js\nclass ParseInputLazyPath {\n  constructor(parent, value, path, key) {\n    this._cachedPath = [];\n    this.parent = parent;\n    this.data = value;\n    this._path = path;\n    this._key = key;\n  }\n  get path() {\n    if (!this._cachedPath.length) {\n      if (Array.isArray(this._key)) {\n        this._cachedPath.push(...this._path, ...this._key);\n      } else {\n        this._cachedPath.push(...this._path, this._key);\n      }\n    }\n    return this._cachedPath;\n  }\n}\nvar handleResult = (ctx, result) => {\n  if (isValid(result)) {\n    return { success: true, data: result.value };\n  } else {\n    if (!ctx.common.issues.length) {\n      throw new Error(\"Validation failed but no issues detected.\");\n    }\n    return {\n      success: false,\n      get error() {\n        if (this._error)\n          return this._error;\n        const error = new ZodError(ctx.common.issues);\n        this._error = error;\n        return this._error;\n      }\n    };\n  }\n};\nfunction processCreateParams(params) {\n  if (!params)\n    return {};\n  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;\n  if (errorMap2 && (invalid_type_error || required_error)) {\n    throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n  }\n  if (errorMap2)\n    return { errorMap: errorMap2, description };\n  const customMap = (iss, ctx) => {\n    const { message } = params;\n    if (iss.code === \"invalid_enum_value\") {\n      return { message: message ?? ctx.defaultError };\n    }\n    if (typeof ctx.data === \"undefined\") {\n      return { message: message ?? required_error ?? ctx.defaultError };\n    }\n    if (iss.code !== \"invalid_type\")\n      return { message: ctx.defaultError };\n    return { message: message ?? invalid_type_error ?? ctx.defaultError };\n  };\n  return { errorMap: customMap, description };\n}\n\nclass ZodType {\n  get description() {\n    return this._def.description;\n  }\n  _getType(input) {\n    return getParsedType(input.data);\n  }\n  _getOrReturnCtx(input, ctx) {\n    return ctx || {\n      common: input.parent.common,\n      data: input.data,\n      parsedType: getParsedType(input.data),\n      schemaErrorMap: this._def.errorMap,\n      path: input.path,\n      parent: input.parent\n    };\n  }\n  _processInputParams(input) {\n    return {\n      status: new ParseStatus,\n      ctx: {\n        common: input.parent.common,\n        data: input.data,\n        parsedType: getParsedType(input.data),\n        schemaErrorMap: this._def.errorMap,\n        path: input.path,\n        parent: input.parent\n      }\n    };\n  }\n  _parseSync(input) {\n    const result = this._parse(input);\n    if (isAsync(result)) {\n      throw new Error(\"Synchronous parse encountered promise.\");\n    }\n    return result;\n  }\n  _parseAsync(input) {\n    const result = this._parse(input);\n    return Promise.resolve(result);\n  }\n  parse(data, params) {\n    const result = this.safeParse(data, params);\n    if (result.success)\n      return result.data;\n    throw result.error;\n  }\n  safeParse(data, params) {\n    const ctx = {\n      common: {\n        issues: [],\n        async: params?.async ?? false,\n        contextualErrorMap: params?.errorMap\n      },\n      path: params?.path || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    };\n    const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n    return handleResult(ctx, result);\n  }\n  \"~validate\"(data) {\n    const ctx = {\n      common: {\n        issues: [],\n        async: !!this[\"~standard\"].async\n      },\n      path: [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    };\n    if (!this[\"~standard\"].async) {\n      try {\n        const result = this._parseSync({ data, path: [], parent: ctx });\n        return isValid(result) ? {\n          value: result.value\n        } : {\n          issues: ctx.common.issues\n        };\n      } catch (err) {\n        if (err?.message?.toLowerCase()?.includes(\"encountered\")) {\n          this[\"~standard\"].async = true;\n        }\n        ctx.common = {\n          issues: [],\n          async: true\n        };\n      }\n    }\n    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {\n      value: result.value\n    } : {\n      issues: ctx.common.issues\n    });\n  }\n  async parseAsync(data, params) {\n    const result = await this.safeParseAsync(data, params);\n    if (result.success)\n      return result.data;\n    throw result.error;\n  }\n  async safeParseAsync(data, params) {\n    const ctx = {\n      common: {\n        issues: [],\n        contextualErrorMap: params?.errorMap,\n        async: true\n      },\n      path: params?.path || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    };\n    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n    return handleResult(ctx, result);\n  }\n  refine(check, message) {\n    const getIssueProperties = (val) => {\n      if (typeof message === \"string\" || typeof message === \"undefined\") {\n        return { message };\n      } else if (typeof message === \"function\") {\n        return message(val);\n      } else {\n        return message;\n      }\n    };\n    return this._refinement((val, ctx) => {\n      const result = check(val);\n      const setError = () => ctx.addIssue({\n        code: ZodIssueCode.custom,\n        ...getIssueProperties(val)\n      });\n      if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n        return result.then((data) => {\n          if (!data) {\n            setError();\n            return false;\n          } else {\n            return true;\n          }\n        });\n      }\n      if (!result) {\n        setError();\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n  refinement(check, refinementData) {\n    return this._refinement((val, ctx) => {\n      if (!check(val)) {\n        ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n  _refinement(refinement) {\n    return new ZodEffects({\n      schema: this,\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\n      effect: { type: \"refinement\", refinement }\n    });\n  }\n  superRefine(refinement) {\n    return this._refinement(refinement);\n  }\n  constructor(def) {\n    this.spa = this.safeParseAsync;\n    this._def = def;\n    this.parse = this.parse.bind(this);\n    this.safeParse = this.safeParse.bind(this);\n    this.parseAsync = this.parseAsync.bind(this);\n    this.safeParseAsync = this.safeParseAsync.bind(this);\n    this.spa = this.spa.bind(this);\n    this.refine = this.refine.bind(this);\n    this.refinement = this.refinement.bind(this);\n    this.superRefine = this.superRefine.bind(this);\n    this.optional = this.optional.bind(this);\n    this.nullable = this.nullable.bind(this);\n    this.nullish = this.nullish.bind(this);\n    this.array = this.array.bind(this);\n    this.promise = this.promise.bind(this);\n    this.or = this.or.bind(this);\n    this.and = this.and.bind(this);\n    this.transform = this.transform.bind(this);\n    this.brand = this.brand.bind(this);\n    this.default = this.default.bind(this);\n    this.catch = this.catch.bind(this);\n    this.describe = this.describe.bind(this);\n    this.pipe = this.pipe.bind(this);\n    this.readonly = this.readonly.bind(this);\n    this.isNullable = this.isNullable.bind(this);\n    this.isOptional = this.isOptional.bind(this);\n    this[\"~standard\"] = {\n      version: 1,\n      vendor: \"zod\",\n      validate: (data) => this[\"~validate\"](data)\n    };\n  }\n  optional() {\n    return ZodOptional.create(this, this._def);\n  }\n  nullable() {\n    return ZodNullable.create(this, this._def);\n  }\n  nullish() {\n    return this.nullable().optional();\n  }\n  array() {\n    return ZodArray.create(this);\n  }\n  promise() {\n    return ZodPromise.create(this, this._def);\n  }\n  or(option) {\n    return ZodUnion.create([this, option], this._def);\n  }\n  and(incoming) {\n    return ZodIntersection.create(this, incoming, this._def);\n  }\n  transform(transform) {\n    return new ZodEffects({\n      ...processCreateParams(this._def),\n      schema: this,\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\n      effect: { type: \"transform\", transform }\n    });\n  }\n  default(def) {\n    const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n    return new ZodDefault({\n      ...processCreateParams(this._def),\n      innerType: this,\n      defaultValue: defaultValueFunc,\n      typeName: ZodFirstPartyTypeKind.ZodDefault\n    });\n  }\n  brand() {\n    return new ZodBranded({\n      typeName: ZodFirstPartyTypeKind.ZodBranded,\n      type: this,\n      ...processCreateParams(this._def)\n    });\n  }\n  catch(def) {\n    const catchValueFunc = typeof def === \"function\" ? def : () => def;\n    return new ZodCatch({\n      ...processCreateParams(this._def),\n      innerType: this,\n      catchValue: catchValueFunc,\n      typeName: ZodFirstPartyTypeKind.ZodCatch\n    });\n  }\n  describe(description) {\n    const This = this.constructor;\n    return new This({\n      ...this._def,\n      description\n    });\n  }\n  pipe(target) {\n    return ZodPipeline.create(this, target);\n  }\n  readonly() {\n    return ZodReadonly.create(this);\n  }\n  isOptional() {\n    return this.safeParse(undefined).success;\n  }\n  isNullable() {\n    return this.safeParse(null).success;\n  }\n}\nvar cuidRegex = /^c[^\\s-]{8,}$/i;\nvar cuid2Regex = /^[0-9a-z]+$/;\nvar ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\nvar uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nvar nanoidRegex = /^[a-z0-9_-]{21}$/i;\nvar jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nvar durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\nvar emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\nvar _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nvar emojiRegex;\nvar ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nvar ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\nvar ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nvar ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\nvar base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\nvar base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\nvar dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nvar dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n  let secondsRegexSource = `[0-5]\\\\d`;\n  if (args.precision) {\n    secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n  } else if (args.precision == null) {\n    secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n  }\n  const secondsQuantifier = args.precision ? \"+\" : \"?\";\n  return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n  return new RegExp(`^${timeRegexSource(args)}$`);\n}\nfunction datetimeRegex(args) {\n  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n  const opts = [];\n  opts.push(args.local ? `Z?` : `Z`);\n  if (args.offset)\n    opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n  regex = `${regex}(${opts.join(\"|\")})`;\n  return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n  if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n    return true;\n  }\n  if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n    return true;\n  }\n  return false;\n}\nfunction isValidJWT(jwt, alg) {\n  if (!jwtRegex.test(jwt))\n    return false;\n  try {\n    const [header] = jwt.split(\".\");\n    if (!header)\n      return false;\n    const base64 = header.replace(/-/g, \"+\").replace(/_/g, \"/\").padEnd(header.length + (4 - header.length % 4) % 4, \"=\");\n    const decoded = JSON.parse(atob(base64));\n    if (typeof decoded !== \"object\" || decoded === null)\n      return false;\n    if (\"typ\" in decoded && decoded?.typ !== \"JWT\")\n      return false;\n    if (!decoded.alg)\n      return false;\n    if (alg && decoded.alg !== alg)\n      return false;\n    return true;\n  } catch {\n    return false;\n  }\n}\nfunction isValidCidr(ip, version) {\n  if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n    return true;\n  }\n  if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n    return true;\n  }\n  return false;\n}\n\nclass ZodString extends ZodType {\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = String(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.string) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.string,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    const status = new ParseStatus;\n    let ctx = undefined;\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        if (input.data.length < check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            minimum: check.value,\n            type: \"string\",\n            inclusive: true,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        if (input.data.length > check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            maximum: check.value,\n            type: \"string\",\n            inclusive: true,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"length\") {\n        const tooBig = input.data.length > check.value;\n        const tooSmall = input.data.length < check.value;\n        if (tooBig || tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          if (tooBig) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.too_big,\n              maximum: check.value,\n              type: \"string\",\n              inclusive: true,\n              exact: true,\n              message: check.message\n            });\n          } else if (tooSmall) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.too_small,\n              minimum: check.value,\n              type: \"string\",\n              inclusive: true,\n              exact: true,\n              message: check.message\n            });\n          }\n          status.dirty();\n        }\n      } else if (check.kind === \"email\") {\n        if (!emailRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"email\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"emoji\") {\n        if (!emojiRegex) {\n          emojiRegex = new RegExp(_emojiRegex, \"u\");\n        }\n        if (!emojiRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"emoji\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"uuid\") {\n        if (!uuidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"uuid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"nanoid\") {\n        if (!nanoidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"nanoid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"cuid\") {\n        if (!cuidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"cuid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"cuid2\") {\n        if (!cuid2Regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"cuid2\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"ulid\") {\n        if (!ulidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"ulid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"url\") {\n        try {\n          new URL(input.data);\n        } catch {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"url\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"regex\") {\n        check.regex.lastIndex = 0;\n        const testResult = check.regex.test(input.data);\n        if (!testResult) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"regex\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"trim\") {\n        input.data = input.data.trim();\n      } else if (check.kind === \"includes\") {\n        if (!input.data.includes(check.value, check.position)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: { includes: check.value, position: check.position },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"toLowerCase\") {\n        input.data = input.data.toLowerCase();\n      } else if (check.kind === \"toUpperCase\") {\n        input.data = input.data.toUpperCase();\n      } else if (check.kind === \"startsWith\") {\n        if (!input.data.startsWith(check.value)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: { startsWith: check.value },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"endsWith\") {\n        if (!input.data.endsWith(check.value)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: { endsWith: check.value },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"datetime\") {\n        const regex = datetimeRegex(check);\n        if (!regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: \"datetime\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"date\") {\n        const regex = dateRegex;\n        if (!regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: \"date\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"time\") {\n        const regex = timeRegex(check);\n        if (!regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: \"time\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"duration\") {\n        if (!durationRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"duration\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"ip\") {\n        if (!isValidIP(input.data, check.version)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"ip\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"jwt\") {\n        if (!isValidJWT(input.data, check.alg)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"jwt\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"cidr\") {\n        if (!isValidCidr(input.data, check.version)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"cidr\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"base64\") {\n        if (!base64Regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"base64\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"base64url\") {\n        if (!base64urlRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"base64url\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return { status: status.value, value: input.data };\n  }\n  _regex(regex, validation, message) {\n    return this.refinement((data) => regex.test(data), {\n      validation,\n      code: ZodIssueCode.invalid_string,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  _addCheck(check) {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  email(message) {\n    return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n  }\n  url(message) {\n    return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n  }\n  emoji(message) {\n    return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n  }\n  uuid(message) {\n    return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n  }\n  nanoid(message) {\n    return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n  }\n  cuid(message) {\n    return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n  }\n  cuid2(message) {\n    return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n  }\n  ulid(message) {\n    return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n  }\n  base64(message) {\n    return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n  }\n  base64url(message) {\n    return this._addCheck({\n      kind: \"base64url\",\n      ...errorUtil.errToObj(message)\n    });\n  }\n  jwt(options) {\n    return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n  }\n  ip(options) {\n    return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n  }\n  cidr(options) {\n    return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n  }\n  datetime(options) {\n    if (typeof options === \"string\") {\n      return this._addCheck({\n        kind: \"datetime\",\n        precision: null,\n        offset: false,\n        local: false,\n        message: options\n      });\n    }\n    return this._addCheck({\n      kind: \"datetime\",\n      precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n      offset: options?.offset ?? false,\n      local: options?.local ?? false,\n      ...errorUtil.errToObj(options?.message)\n    });\n  }\n  date(message) {\n    return this._addCheck({ kind: \"date\", message });\n  }\n  time(options) {\n    if (typeof options === \"string\") {\n      return this._addCheck({\n        kind: \"time\",\n        precision: null,\n        message: options\n      });\n    }\n    return this._addCheck({\n      kind: \"time\",\n      precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n      ...errorUtil.errToObj(options?.message)\n    });\n  }\n  duration(message) {\n    return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n  }\n  regex(regex, message) {\n    return this._addCheck({\n      kind: \"regex\",\n      regex,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  includes(value, options) {\n    return this._addCheck({\n      kind: \"includes\",\n      value,\n      position: options?.position,\n      ...errorUtil.errToObj(options?.message)\n    });\n  }\n  startsWith(value, message) {\n    return this._addCheck({\n      kind: \"startsWith\",\n      value,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  endsWith(value, message) {\n    return this._addCheck({\n      kind: \"endsWith\",\n      value,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  min(minLength, message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: minLength,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  max(maxLength, message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: maxLength,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  length(len, message) {\n    return this._addCheck({\n      kind: \"length\",\n      value: len,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  nonempty(message) {\n    return this.min(1, errorUtil.errToObj(message));\n  }\n  trim() {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"trim\" }]\n    });\n  }\n  toLowerCase() {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"toLowerCase\" }]\n    });\n  }\n  toUpperCase() {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"toUpperCase\" }]\n    });\n  }\n  get isDatetime() {\n    return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n  }\n  get isDate() {\n    return !!this._def.checks.find((ch) => ch.kind === \"date\");\n  }\n  get isTime() {\n    return !!this._def.checks.find((ch) => ch.kind === \"time\");\n  }\n  get isDuration() {\n    return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n  }\n  get isEmail() {\n    return !!this._def.checks.find((ch) => ch.kind === \"email\");\n  }\n  get isURL() {\n    return !!this._def.checks.find((ch) => ch.kind === \"url\");\n  }\n  get isEmoji() {\n    return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n  }\n  get isUUID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n  }\n  get isNANOID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n  }\n  get isCUID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n  }\n  get isCUID2() {\n    return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n  }\n  get isULID() {\n    return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n  }\n  get isIP() {\n    return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n  }\n  get isCIDR() {\n    return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n  }\n  get isBase64() {\n    return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n  }\n  get isBase64url() {\n    return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n  }\n  get minLength() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min)\n          min = ch.value;\n      }\n    }\n    return min;\n  }\n  get maxLength() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max)\n          max = ch.value;\n      }\n    }\n    return max;\n  }\n}\nZodString.create = (params) => {\n  return new ZodString({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodString,\n    coerce: params?.coerce ?? false,\n    ...processCreateParams(params)\n  });\n};\nfunction floatSafeRemainder(val, step) {\n  const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n  const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n  const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n  const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n  return valInt % stepInt / 10 ** decCount;\n}\n\nclass ZodNumber extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.min = this.gte;\n    this.max = this.lte;\n    this.step = this.multipleOf;\n  }\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = Number(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.number) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.number,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    let ctx = undefined;\n    const status = new ParseStatus;\n    for (const check of this._def.checks) {\n      if (check.kind === \"int\") {\n        if (!util.isInteger(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: \"integer\",\n            received: \"float\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"min\") {\n        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n        if (tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            minimum: check.value,\n            type: \"number\",\n            inclusive: check.inclusive,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n        if (tooBig) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            maximum: check.value,\n            type: \"number\",\n            inclusive: check.inclusive,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"multipleOf\") {\n        if (floatSafeRemainder(input.data, check.value) !== 0) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_multiple_of,\n            multipleOf: check.value,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"finite\") {\n        if (!Number.isFinite(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_finite,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return { status: status.value, value: input.data };\n  }\n  gte(value, message) {\n    return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n  }\n  gt(value, message) {\n    return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n  }\n  lte(value, message) {\n    return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n  }\n  lt(value, message) {\n    return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n  }\n  setLimit(kind, value, inclusive, message) {\n    return new ZodNumber({\n      ...this._def,\n      checks: [\n        ...this._def.checks,\n        {\n          kind,\n          value,\n          inclusive,\n          message: errorUtil.toString(message)\n        }\n      ]\n    });\n  }\n  _addCheck(check) {\n    return new ZodNumber({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  int(message) {\n    return this._addCheck({\n      kind: \"int\",\n      message: errorUtil.toString(message)\n    });\n  }\n  positive(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  negative(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonpositive(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonnegative(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  multipleOf(value, message) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value,\n      message: errorUtil.toString(message)\n    });\n  }\n  finite(message) {\n    return this._addCheck({\n      kind: \"finite\",\n      message: errorUtil.toString(message)\n    });\n  }\n  safe(message) {\n    return this._addCheck({\n      kind: \"min\",\n      inclusive: true,\n      value: Number.MIN_SAFE_INTEGER,\n      message: errorUtil.toString(message)\n    })._addCheck({\n      kind: \"max\",\n      inclusive: true,\n      value: Number.MAX_SAFE_INTEGER,\n      message: errorUtil.toString(message)\n    });\n  }\n  get minValue() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min)\n          min = ch.value;\n      }\n    }\n    return min;\n  }\n  get maxValue() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max)\n          max = ch.value;\n      }\n    }\n    return max;\n  }\n  get isInt() {\n    return !!this._def.checks.find((ch) => ch.kind === \"int\" || ch.kind === \"multipleOf\" && util.isInteger(ch.value));\n  }\n  get isFinite() {\n    let max = null;\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n        return true;\n      } else if (ch.kind === \"min\") {\n        if (min === null || ch.value > min)\n          min = ch.value;\n      } else if (ch.kind === \"max\") {\n        if (max === null || ch.value < max)\n          max = ch.value;\n      }\n    }\n    return Number.isFinite(min) && Number.isFinite(max);\n  }\n}\nZodNumber.create = (params) => {\n  return new ZodNumber({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodNumber,\n    coerce: params?.coerce || false,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodBigInt extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.min = this.gte;\n    this.max = this.lte;\n  }\n  _parse(input) {\n    if (this._def.coerce) {\n      try {\n        input.data = BigInt(input.data);\n      } catch {\n        return this._getInvalidInput(input);\n      }\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.bigint) {\n      return this._getInvalidInput(input);\n    }\n    let ctx = undefined;\n    const status = new ParseStatus;\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n        if (tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            type: \"bigint\",\n            minimum: check.value,\n            inclusive: check.inclusive,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n        if (tooBig) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            type: \"bigint\",\n            maximum: check.value,\n            inclusive: check.inclusive,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"multipleOf\") {\n        if (input.data % check.value !== BigInt(0)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_multiple_of,\n            multipleOf: check.value,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return { status: status.value, value: input.data };\n  }\n  _getInvalidInput(input) {\n    const ctx = this._getOrReturnCtx(input);\n    addIssueToContext(ctx, {\n      code: ZodIssueCode.invalid_type,\n      expected: ZodParsedType.bigint,\n      received: ctx.parsedType\n    });\n    return INVALID;\n  }\n  gte(value, message) {\n    return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n  }\n  gt(value, message) {\n    return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n  }\n  lte(value, message) {\n    return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n  }\n  lt(value, message) {\n    return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n  }\n  setLimit(kind, value, inclusive, message) {\n    return new ZodBigInt({\n      ...this._def,\n      checks: [\n        ...this._def.checks,\n        {\n          kind,\n          value,\n          inclusive,\n          message: errorUtil.toString(message)\n        }\n      ]\n    });\n  }\n  _addCheck(check) {\n    return new ZodBigInt({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  positive(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  negative(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonpositive(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonnegative(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  multipleOf(value, message) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value,\n      message: errorUtil.toString(message)\n    });\n  }\n  get minValue() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min)\n          min = ch.value;\n      }\n    }\n    return min;\n  }\n  get maxValue() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max)\n          max = ch.value;\n      }\n    }\n    return max;\n  }\n}\nZodBigInt.create = (params) => {\n  return new ZodBigInt({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodBigInt,\n    coerce: params?.coerce ?? false,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodBoolean extends ZodType {\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = Boolean(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.boolean) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.boolean,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodBoolean.create = (params) => {\n  return new ZodBoolean({\n    typeName: ZodFirstPartyTypeKind.ZodBoolean,\n    coerce: params?.coerce || false,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodDate extends ZodType {\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = new Date(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.date) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.date,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    if (Number.isNaN(input.data.getTime())) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_date\n      });\n      return INVALID;\n    }\n    const status = new ParseStatus;\n    let ctx = undefined;\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        if (input.data.getTime() < check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            message: check.message,\n            inclusive: true,\n            exact: false,\n            minimum: check.value,\n            type: \"date\"\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        if (input.data.getTime() > check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            message: check.message,\n            inclusive: true,\n            exact: false,\n            maximum: check.value,\n            type: \"date\"\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return {\n      status: status.value,\n      value: new Date(input.data.getTime())\n    };\n  }\n  _addCheck(check) {\n    return new ZodDate({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  min(minDate, message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: minDate.getTime(),\n      message: errorUtil.toString(message)\n    });\n  }\n  max(maxDate, message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: maxDate.getTime(),\n      message: errorUtil.toString(message)\n    });\n  }\n  get minDate() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min)\n          min = ch.value;\n      }\n    }\n    return min != null ? new Date(min) : null;\n  }\n  get maxDate() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max)\n          max = ch.value;\n      }\n    }\n    return max != null ? new Date(max) : null;\n  }\n}\nZodDate.create = (params) => {\n  return new ZodDate({\n    checks: [],\n    coerce: params?.coerce || false,\n    typeName: ZodFirstPartyTypeKind.ZodDate,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodSymbol extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.symbol) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.symbol,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodSymbol.create = (params) => {\n  return new ZodSymbol({\n    typeName: ZodFirstPartyTypeKind.ZodSymbol,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodUndefined extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.undefined) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.undefined,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodUndefined.create = (params) => {\n  return new ZodUndefined({\n    typeName: ZodFirstPartyTypeKind.ZodUndefined,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodNull extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.null) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.null,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodNull.create = (params) => {\n  return new ZodNull({\n    typeName: ZodFirstPartyTypeKind.ZodNull,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodAny extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._any = true;\n  }\n  _parse(input) {\n    return OK(input.data);\n  }\n}\nZodAny.create = (params) => {\n  return new ZodAny({\n    typeName: ZodFirstPartyTypeKind.ZodAny,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodUnknown extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._unknown = true;\n  }\n  _parse(input) {\n    return OK(input.data);\n  }\n}\nZodUnknown.create = (params) => {\n  return new ZodUnknown({\n    typeName: ZodFirstPartyTypeKind.ZodUnknown,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodNever extends ZodType {\n  _parse(input) {\n    const ctx = this._getOrReturnCtx(input);\n    addIssueToContext(ctx, {\n      code: ZodIssueCode.invalid_type,\n      expected: ZodParsedType.never,\n      received: ctx.parsedType\n    });\n    return INVALID;\n  }\n}\nZodNever.create = (params) => {\n  return new ZodNever({\n    typeName: ZodFirstPartyTypeKind.ZodNever,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodVoid extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.undefined) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.void,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n}\nZodVoid.create = (params) => {\n  return new ZodVoid({\n    typeName: ZodFirstPartyTypeKind.ZodVoid,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodArray extends ZodType {\n  _parse(input) {\n    const { ctx, status } = this._processInputParams(input);\n    const def = this._def;\n    if (ctx.parsedType !== ZodParsedType.array) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.array,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    if (def.exactLength !== null) {\n      const tooBig = ctx.data.length > def.exactLength.value;\n      const tooSmall = ctx.data.length < def.exactLength.value;\n      if (tooBig || tooSmall) {\n        addIssueToContext(ctx, {\n          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n          minimum: tooSmall ? def.exactLength.value : undefined,\n          maximum: tooBig ? def.exactLength.value : undefined,\n          type: \"array\",\n          inclusive: true,\n          exact: true,\n          message: def.exactLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (def.minLength !== null) {\n      if (ctx.data.length < def.minLength.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_small,\n          minimum: def.minLength.value,\n          type: \"array\",\n          inclusive: true,\n          exact: false,\n          message: def.minLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (def.maxLength !== null) {\n      if (ctx.data.length > def.maxLength.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_big,\n          maximum: def.maxLength.value,\n          type: \"array\",\n          inclusive: true,\n          exact: false,\n          message: def.maxLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (ctx.common.async) {\n      return Promise.all([...ctx.data].map((item, i) => {\n        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n      })).then((result2) => {\n        return ParseStatus.mergeArray(status, result2);\n      });\n    }\n    const result = [...ctx.data].map((item, i) => {\n      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n    });\n    return ParseStatus.mergeArray(status, result);\n  }\n  get element() {\n    return this._def.type;\n  }\n  min(minLength, message) {\n    return new ZodArray({\n      ...this._def,\n      minLength: { value: minLength, message: errorUtil.toString(message) }\n    });\n  }\n  max(maxLength, message) {\n    return new ZodArray({\n      ...this._def,\n      maxLength: { value: maxLength, message: errorUtil.toString(message) }\n    });\n  }\n  length(len, message) {\n    return new ZodArray({\n      ...this._def,\n      exactLength: { value: len, message: errorUtil.toString(message) }\n    });\n  }\n  nonempty(message) {\n    return this.min(1, message);\n  }\n}\nZodArray.create = (schema, params) => {\n  return new ZodArray({\n    type: schema,\n    minLength: null,\n    maxLength: null,\n    exactLength: null,\n    typeName: ZodFirstPartyTypeKind.ZodArray,\n    ...processCreateParams(params)\n  });\n};\nfunction deepPartialify(schema) {\n  if (schema instanceof ZodObject) {\n    const newShape = {};\n    for (const key in schema.shape) {\n      const fieldSchema = schema.shape[key];\n      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n    }\n    return new ZodObject({\n      ...schema._def,\n      shape: () => newShape\n    });\n  } else if (schema instanceof ZodArray) {\n    return new ZodArray({\n      ...schema._def,\n      type: deepPartialify(schema.element)\n    });\n  } else if (schema instanceof ZodOptional) {\n    return ZodOptional.create(deepPartialify(schema.unwrap()));\n  } else if (schema instanceof ZodNullable) {\n    return ZodNullable.create(deepPartialify(schema.unwrap()));\n  } else if (schema instanceof ZodTuple) {\n    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n  } else {\n    return schema;\n  }\n}\n\nclass ZodObject extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._cached = null;\n    this.nonstrict = this.passthrough;\n    this.augment = this.extend;\n  }\n  _getCached() {\n    if (this._cached !== null)\n      return this._cached;\n    const shape = this._def.shape();\n    const keys = util.objectKeys(shape);\n    this._cached = { shape, keys };\n    return this._cached;\n  }\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.object) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    const { status, ctx } = this._processInputParams(input);\n    const { shape, keys: shapeKeys } = this._getCached();\n    const extraKeys = [];\n    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n      for (const key in ctx.data) {\n        if (!shapeKeys.includes(key)) {\n          extraKeys.push(key);\n        }\n      }\n    }\n    const pairs = [];\n    for (const key of shapeKeys) {\n      const keyValidator = shape[key];\n      const value = ctx.data[key];\n      pairs.push({\n        key: { status: \"valid\", value: key },\n        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n        alwaysSet: key in ctx.data\n      });\n    }\n    if (this._def.catchall instanceof ZodNever) {\n      const unknownKeys = this._def.unknownKeys;\n      if (unknownKeys === \"passthrough\") {\n        for (const key of extraKeys) {\n          pairs.push({\n            key: { status: \"valid\", value: key },\n            value: { status: \"valid\", value: ctx.data[key] }\n          });\n        }\n      } else if (unknownKeys === \"strict\") {\n        if (extraKeys.length > 0) {\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.unrecognized_keys,\n            keys: extraKeys\n          });\n          status.dirty();\n        }\n      } else if (unknownKeys === \"strip\") {} else {\n        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n      }\n    } else {\n      const catchall = this._def.catchall;\n      for (const key of extraKeys) {\n        const value = ctx.data[key];\n        pairs.push({\n          key: { status: \"valid\", value: key },\n          value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n          alwaysSet: key in ctx.data\n        });\n      }\n    }\n    if (ctx.common.async) {\n      return Promise.resolve().then(async () => {\n        const syncPairs = [];\n        for (const pair of pairs) {\n          const key = await pair.key;\n          const value = await pair.value;\n          syncPairs.push({\n            key,\n            value,\n            alwaysSet: pair.alwaysSet\n          });\n        }\n        return syncPairs;\n      }).then((syncPairs) => {\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n      });\n    } else {\n      return ParseStatus.mergeObjectSync(status, pairs);\n    }\n  }\n  get shape() {\n    return this._def.shape();\n  }\n  strict(message) {\n    errorUtil.errToObj;\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"strict\",\n      ...message !== undefined ? {\n        errorMap: (issue, ctx) => {\n          const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;\n          if (issue.code === \"unrecognized_keys\")\n            return {\n              message: errorUtil.errToObj(message).message ?? defaultError\n            };\n          return {\n            message: defaultError\n          };\n        }\n      } : {}\n    });\n  }\n  strip() {\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"strip\"\n    });\n  }\n  passthrough() {\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"passthrough\"\n    });\n  }\n  extend(augmentation) {\n    return new ZodObject({\n      ...this._def,\n      shape: () => ({\n        ...this._def.shape(),\n        ...augmentation\n      })\n    });\n  }\n  merge(merging) {\n    const merged = new ZodObject({\n      unknownKeys: merging._def.unknownKeys,\n      catchall: merging._def.catchall,\n      shape: () => ({\n        ...this._def.shape(),\n        ...merging._def.shape()\n      }),\n      typeName: ZodFirstPartyTypeKind.ZodObject\n    });\n    return merged;\n  }\n  setKey(key, schema) {\n    return this.augment({ [key]: schema });\n  }\n  catchall(index) {\n    return new ZodObject({\n      ...this._def,\n      catchall: index\n    });\n  }\n  pick(mask) {\n    const shape = {};\n    for (const key of util.objectKeys(mask)) {\n      if (mask[key] && this.shape[key]) {\n        shape[key] = this.shape[key];\n      }\n    }\n    return new ZodObject({\n      ...this._def,\n      shape: () => shape\n    });\n  }\n  omit(mask) {\n    const shape = {};\n    for (const key of util.objectKeys(this.shape)) {\n      if (!mask[key]) {\n        shape[key] = this.shape[key];\n      }\n    }\n    return new ZodObject({\n      ...this._def,\n      shape: () => shape\n    });\n  }\n  deepPartial() {\n    return deepPartialify(this);\n  }\n  partial(mask) {\n    const newShape = {};\n    for (const key of util.objectKeys(this.shape)) {\n      const fieldSchema = this.shape[key];\n      if (mask && !mask[key]) {\n        newShape[key] = fieldSchema;\n      } else {\n        newShape[key] = fieldSchema.optional();\n      }\n    }\n    return new ZodObject({\n      ...this._def,\n      shape: () => newShape\n    });\n  }\n  required(mask) {\n    const newShape = {};\n    for (const key of util.objectKeys(this.shape)) {\n      if (mask && !mask[key]) {\n        newShape[key] = this.shape[key];\n      } else {\n        const fieldSchema = this.shape[key];\n        let newField = fieldSchema;\n        while (newField instanceof ZodOptional) {\n          newField = newField._def.innerType;\n        }\n        newShape[key] = newField;\n      }\n    }\n    return new ZodObject({\n      ...this._def,\n      shape: () => newShape\n    });\n  }\n  keyof() {\n    return createZodEnum(util.objectKeys(this.shape));\n  }\n}\nZodObject.create = (shape, params) => {\n  return new ZodObject({\n    shape: () => shape,\n    unknownKeys: \"strip\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params)\n  });\n};\nZodObject.strictCreate = (shape, params) => {\n  return new ZodObject({\n    shape: () => shape,\n    unknownKeys: \"strict\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params)\n  });\n};\nZodObject.lazycreate = (shape, params) => {\n  return new ZodObject({\n    shape,\n    unknownKeys: \"strip\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodUnion extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const options = this._def.options;\n    function handleResults(results) {\n      for (const result of results) {\n        if (result.result.status === \"valid\") {\n          return result.result;\n        }\n      }\n      for (const result of results) {\n        if (result.result.status === \"dirty\") {\n          ctx.common.issues.push(...result.ctx.common.issues);\n          return result.result;\n        }\n      }\n      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union,\n        unionErrors\n      });\n      return INVALID;\n    }\n    if (ctx.common.async) {\n      return Promise.all(options.map(async (option) => {\n        const childCtx = {\n          ...ctx,\n          common: {\n            ...ctx.common,\n            issues: []\n          },\n          parent: null\n        };\n        return {\n          result: await option._parseAsync({\n            data: ctx.data,\n            path: ctx.path,\n            parent: childCtx\n          }),\n          ctx: childCtx\n        };\n      })).then(handleResults);\n    } else {\n      let dirty = undefined;\n      const issues = [];\n      for (const option of options) {\n        const childCtx = {\n          ...ctx,\n          common: {\n            ...ctx.common,\n            issues: []\n          },\n          parent: null\n        };\n        const result = option._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: childCtx\n        });\n        if (result.status === \"valid\") {\n          return result;\n        } else if (result.status === \"dirty\" && !dirty) {\n          dirty = { result, ctx: childCtx };\n        }\n        if (childCtx.common.issues.length) {\n          issues.push(childCtx.common.issues);\n        }\n      }\n      if (dirty) {\n        ctx.common.issues.push(...dirty.ctx.common.issues);\n        return dirty.result;\n      }\n      const unionErrors = issues.map((issues2) => new ZodError(issues2));\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union,\n        unionErrors\n      });\n      return INVALID;\n    }\n  }\n  get options() {\n    return this._def.options;\n  }\n}\nZodUnion.create = (types, params) => {\n  return new ZodUnion({\n    options: types,\n    typeName: ZodFirstPartyTypeKind.ZodUnion,\n    ...processCreateParams(params)\n  });\n};\nvar getDiscriminator = (type) => {\n  if (type instanceof ZodLazy) {\n    return getDiscriminator(type.schema);\n  } else if (type instanceof ZodEffects) {\n    return getDiscriminator(type.innerType());\n  } else if (type instanceof ZodLiteral) {\n    return [type.value];\n  } else if (type instanceof ZodEnum) {\n    return type.options;\n  } else if (type instanceof ZodNativeEnum) {\n    return util.objectValues(type.enum);\n  } else if (type instanceof ZodDefault) {\n    return getDiscriminator(type._def.innerType);\n  } else if (type instanceof ZodUndefined) {\n    return [undefined];\n  } else if (type instanceof ZodNull) {\n    return [null];\n  } else if (type instanceof ZodOptional) {\n    return [undefined, ...getDiscriminator(type.unwrap())];\n  } else if (type instanceof ZodNullable) {\n    return [null, ...getDiscriminator(type.unwrap())];\n  } else if (type instanceof ZodBranded) {\n    return getDiscriminator(type.unwrap());\n  } else if (type instanceof ZodReadonly) {\n    return getDiscriminator(type.unwrap());\n  } else if (type instanceof ZodCatch) {\n    return getDiscriminator(type._def.innerType);\n  } else {\n    return [];\n  }\n};\n\nclass ZodDiscriminatedUnion extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.object) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const discriminator = this.discriminator;\n    const discriminatorValue = ctx.data[discriminator];\n    const option = this.optionsMap.get(discriminatorValue);\n    if (!option) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union_discriminator,\n        options: Array.from(this.optionsMap.keys()),\n        path: [discriminator]\n      });\n      return INVALID;\n    }\n    if (ctx.common.async) {\n      return option._parseAsync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n    } else {\n      return option._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n    }\n  }\n  get discriminator() {\n    return this._def.discriminator;\n  }\n  get options() {\n    return this._def.options;\n  }\n  get optionsMap() {\n    return this._def.optionsMap;\n  }\n  static create(discriminator, options, params) {\n    const optionsMap = new Map;\n    for (const type of options) {\n      const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n      if (!discriminatorValues.length) {\n        throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n      }\n      for (const value of discriminatorValues) {\n        if (optionsMap.has(value)) {\n          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n        }\n        optionsMap.set(value, type);\n      }\n    }\n    return new ZodDiscriminatedUnion({\n      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n      discriminator,\n      options,\n      optionsMap,\n      ...processCreateParams(params)\n    });\n  }\n}\nfunction mergeValues(a, b) {\n  const aType = getParsedType(a);\n  const bType = getParsedType(b);\n  if (a === b) {\n    return { valid: true, data: a };\n  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n    const bKeys = util.objectKeys(b);\n    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\n    const newObj = { ...a, ...b };\n    for (const key of sharedKeys) {\n      const sharedValue = mergeValues(a[key], b[key]);\n      if (!sharedValue.valid) {\n        return { valid: false };\n      }\n      newObj[key] = sharedValue.data;\n    }\n    return { valid: true, data: newObj };\n  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n    if (a.length !== b.length) {\n      return { valid: false };\n    }\n    const newArray = [];\n    for (let index = 0;index < a.length; index++) {\n      const itemA = a[index];\n      const itemB = b[index];\n      const sharedValue = mergeValues(itemA, itemB);\n      if (!sharedValue.valid) {\n        return { valid: false };\n      }\n      newArray.push(sharedValue.data);\n    }\n    return { valid: true, data: newArray };\n  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\n    return { valid: true, data: a };\n  } else {\n    return { valid: false };\n  }\n}\n\nclass ZodIntersection extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    const handleParsed = (parsedLeft, parsedRight) => {\n      if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n        return INVALID;\n      }\n      const merged = mergeValues(parsedLeft.value, parsedRight.value);\n      if (!merged.valid) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.invalid_intersection_types\n        });\n        return INVALID;\n      }\n      if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n        status.dirty();\n      }\n      return { status: status.value, value: merged.data };\n    };\n    if (ctx.common.async) {\n      return Promise.all([\n        this._def.left._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        }),\n        this._def.right._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        })\n      ]).then(([left, right]) => handleParsed(left, right));\n    } else {\n      return handleParsed(this._def.left._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      }), this._def.right._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      }));\n    }\n  }\n}\nZodIntersection.create = (left, right, params) => {\n  return new ZodIntersection({\n    left,\n    right,\n    typeName: ZodFirstPartyTypeKind.ZodIntersection,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodTuple extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.array) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.array,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    if (ctx.data.length < this._def.items.length) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.too_small,\n        minimum: this._def.items.length,\n        inclusive: true,\n        exact: false,\n        type: \"array\"\n      });\n      return INVALID;\n    }\n    const rest = this._def.rest;\n    if (!rest && ctx.data.length > this._def.items.length) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.too_big,\n        maximum: this._def.items.length,\n        inclusive: true,\n        exact: false,\n        type: \"array\"\n      });\n      status.dirty();\n    }\n    const items = [...ctx.data].map((item, itemIndex) => {\n      const schema = this._def.items[itemIndex] || this._def.rest;\n      if (!schema)\n        return null;\n      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n    }).filter((x) => !!x);\n    if (ctx.common.async) {\n      return Promise.all(items).then((results) => {\n        return ParseStatus.mergeArray(status, results);\n      });\n    } else {\n      return ParseStatus.mergeArray(status, items);\n    }\n  }\n  get items() {\n    return this._def.items;\n  }\n  rest(rest) {\n    return new ZodTuple({\n      ...this._def,\n      rest\n    });\n  }\n}\nZodTuple.create = (schemas, params) => {\n  if (!Array.isArray(schemas)) {\n    throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n  }\n  return new ZodTuple({\n    items: schemas,\n    typeName: ZodFirstPartyTypeKind.ZodTuple,\n    rest: null,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodRecord extends ZodType {\n  get keySchema() {\n    return this._def.keyType;\n  }\n  get valueSchema() {\n    return this._def.valueType;\n  }\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.object) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const pairs = [];\n    const keyType = this._def.keyType;\n    const valueType = this._def.valueType;\n    for (const key in ctx.data) {\n      pairs.push({\n        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n        alwaysSet: key in ctx.data\n      });\n    }\n    if (ctx.common.async) {\n      return ParseStatus.mergeObjectAsync(status, pairs);\n    } else {\n      return ParseStatus.mergeObjectSync(status, pairs);\n    }\n  }\n  get element() {\n    return this._def.valueType;\n  }\n  static create(first, second, third) {\n    if (second instanceof ZodType) {\n      return new ZodRecord({\n        keyType: first,\n        valueType: second,\n        typeName: ZodFirstPartyTypeKind.ZodRecord,\n        ...processCreateParams(third)\n      });\n    }\n    return new ZodRecord({\n      keyType: ZodString.create(),\n      valueType: first,\n      typeName: ZodFirstPartyTypeKind.ZodRecord,\n      ...processCreateParams(second)\n    });\n  }\n}\n\nclass ZodMap extends ZodType {\n  get keySchema() {\n    return this._def.keyType;\n  }\n  get valueSchema() {\n    return this._def.valueType;\n  }\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.map) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.map,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const keyType = this._def.keyType;\n    const valueType = this._def.valueType;\n    const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n      return {\n        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"]))\n      };\n    });\n    if (ctx.common.async) {\n      const finalMap = new Map;\n      return Promise.resolve().then(async () => {\n        for (const pair of pairs) {\n          const key = await pair.key;\n          const value = await pair.value;\n          if (key.status === \"aborted\" || value.status === \"aborted\") {\n            return INVALID;\n          }\n          if (key.status === \"dirty\" || value.status === \"dirty\") {\n            status.dirty();\n          }\n          finalMap.set(key.value, value.value);\n        }\n        return { status: status.value, value: finalMap };\n      });\n    } else {\n      const finalMap = new Map;\n      for (const pair of pairs) {\n        const key = pair.key;\n        const value = pair.value;\n        if (key.status === \"aborted\" || value.status === \"aborted\") {\n          return INVALID;\n        }\n        if (key.status === \"dirty\" || value.status === \"dirty\") {\n          status.dirty();\n        }\n        finalMap.set(key.value, value.value);\n      }\n      return { status: status.value, value: finalMap };\n    }\n  }\n}\nZodMap.create = (keyType, valueType, params) => {\n  return new ZodMap({\n    valueType,\n    keyType,\n    typeName: ZodFirstPartyTypeKind.ZodMap,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodSet extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.set) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.set,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const def = this._def;\n    if (def.minSize !== null) {\n      if (ctx.data.size < def.minSize.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_small,\n          minimum: def.minSize.value,\n          type: \"set\",\n          inclusive: true,\n          exact: false,\n          message: def.minSize.message\n        });\n        status.dirty();\n      }\n    }\n    if (def.maxSize !== null) {\n      if (ctx.data.size > def.maxSize.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_big,\n          maximum: def.maxSize.value,\n          type: \"set\",\n          inclusive: true,\n          exact: false,\n          message: def.maxSize.message\n        });\n        status.dirty();\n      }\n    }\n    const valueType = this._def.valueType;\n    function finalizeSet(elements2) {\n      const parsedSet = new Set;\n      for (const element of elements2) {\n        if (element.status === \"aborted\")\n          return INVALID;\n        if (element.status === \"dirty\")\n          status.dirty();\n        parsedSet.add(element.value);\n      }\n      return { status: status.value, value: parsedSet };\n    }\n    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n    if (ctx.common.async) {\n      return Promise.all(elements).then((elements2) => finalizeSet(elements2));\n    } else {\n      return finalizeSet(elements);\n    }\n  }\n  min(minSize, message) {\n    return new ZodSet({\n      ...this._def,\n      minSize: { value: minSize, message: errorUtil.toString(message) }\n    });\n  }\n  max(maxSize, message) {\n    return new ZodSet({\n      ...this._def,\n      maxSize: { value: maxSize, message: errorUtil.toString(message) }\n    });\n  }\n  size(size, message) {\n    return this.min(size, message).max(size, message);\n  }\n  nonempty(message) {\n    return this.min(1, message);\n  }\n}\nZodSet.create = (valueType, params) => {\n  return new ZodSet({\n    valueType,\n    minSize: null,\n    maxSize: null,\n    typeName: ZodFirstPartyTypeKind.ZodSet,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodFunction extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.validate = this.implement;\n  }\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.function) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.function,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    function makeArgsIssue(args, error) {\n      return makeIssue({\n        data: args,\n        path: ctx.path,\n        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),\n        issueData: {\n          code: ZodIssueCode.invalid_arguments,\n          argumentsError: error\n        }\n      });\n    }\n    function makeReturnsIssue(returns, error) {\n      return makeIssue({\n        data: returns,\n        path: ctx.path,\n        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),\n        issueData: {\n          code: ZodIssueCode.invalid_return_type,\n          returnTypeError: error\n        }\n      });\n    }\n    const params = { errorMap: ctx.common.contextualErrorMap };\n    const fn = ctx.data;\n    if (this._def.returns instanceof ZodPromise) {\n      const me = this;\n      return OK(async function(...args) {\n        const error = new ZodError([]);\n        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\n          error.addIssue(makeArgsIssue(args, e));\n          throw error;\n        });\n        const result = await Reflect.apply(fn, this, parsedArgs);\n        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {\n          error.addIssue(makeReturnsIssue(result, e));\n          throw error;\n        });\n        return parsedReturns;\n      });\n    } else {\n      const me = this;\n      return OK(function(...args) {\n        const parsedArgs = me._def.args.safeParse(args, params);\n        if (!parsedArgs.success) {\n          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n        }\n        const result = Reflect.apply(fn, this, parsedArgs.data);\n        const parsedReturns = me._def.returns.safeParse(result, params);\n        if (!parsedReturns.success) {\n          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n        }\n        return parsedReturns.data;\n      });\n    }\n  }\n  parameters() {\n    return this._def.args;\n  }\n  returnType() {\n    return this._def.returns;\n  }\n  args(...items) {\n    return new ZodFunction({\n      ...this._def,\n      args: ZodTuple.create(items).rest(ZodUnknown.create())\n    });\n  }\n  returns(returnType) {\n    return new ZodFunction({\n      ...this._def,\n      returns: returnType\n    });\n  }\n  implement(func) {\n    const validatedFunc = this.parse(func);\n    return validatedFunc;\n  }\n  strictImplement(func) {\n    const validatedFunc = this.parse(func);\n    return validatedFunc;\n  }\n  static create(args, returns, params) {\n    return new ZodFunction({\n      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),\n      returns: returns || ZodUnknown.create(),\n      typeName: ZodFirstPartyTypeKind.ZodFunction,\n      ...processCreateParams(params)\n    });\n  }\n}\n\nclass ZodLazy extends ZodType {\n  get schema() {\n    return this._def.getter();\n  }\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const lazySchema = this._def.getter();\n    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n  }\n}\nZodLazy.create = (getter, params) => {\n  return new ZodLazy({\n    getter,\n    typeName: ZodFirstPartyTypeKind.ZodLazy,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodLiteral extends ZodType {\n  _parse(input) {\n    if (input.data !== this._def.value) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_literal,\n        expected: this._def.value\n      });\n      return INVALID;\n    }\n    return { status: \"valid\", value: input.data };\n  }\n  get value() {\n    return this._def.value;\n  }\n}\nZodLiteral.create = (value, params) => {\n  return new ZodLiteral({\n    value,\n    typeName: ZodFirstPartyTypeKind.ZodLiteral,\n    ...processCreateParams(params)\n  });\n};\nfunction createZodEnum(values, params) {\n  return new ZodEnum({\n    values,\n    typeName: ZodFirstPartyTypeKind.ZodEnum,\n    ...processCreateParams(params)\n  });\n}\n\nclass ZodEnum extends ZodType {\n  _parse(input) {\n    if (typeof input.data !== \"string\") {\n      const ctx = this._getOrReturnCtx(input);\n      const expectedValues = this._def.values;\n      addIssueToContext(ctx, {\n        expected: util.joinValues(expectedValues),\n        received: ctx.parsedType,\n        code: ZodIssueCode.invalid_type\n      });\n      return INVALID;\n    }\n    if (!this._cache) {\n      this._cache = new Set(this._def.values);\n    }\n    if (!this._cache.has(input.data)) {\n      const ctx = this._getOrReturnCtx(input);\n      const expectedValues = this._def.values;\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_enum_value,\n        options: expectedValues\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n  get options() {\n    return this._def.values;\n  }\n  get enum() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  get Values() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  get Enum() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  extract(values, newDef = this._def) {\n    return ZodEnum.create(values, {\n      ...this._def,\n      ...newDef\n    });\n  }\n  exclude(values, newDef = this._def) {\n    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n      ...this._def,\n      ...newDef\n    });\n  }\n}\nZodEnum.create = createZodEnum;\n\nclass ZodNativeEnum extends ZodType {\n  _parse(input) {\n    const nativeEnumValues = util.getValidEnumValues(this._def.values);\n    const ctx = this._getOrReturnCtx(input);\n    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n      const expectedValues = util.objectValues(nativeEnumValues);\n      addIssueToContext(ctx, {\n        expected: util.joinValues(expectedValues),\n        received: ctx.parsedType,\n        code: ZodIssueCode.invalid_type\n      });\n      return INVALID;\n    }\n    if (!this._cache) {\n      this._cache = new Set(util.getValidEnumValues(this._def.values));\n    }\n    if (!this._cache.has(input.data)) {\n      const expectedValues = util.objectValues(nativeEnumValues);\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_enum_value,\n        options: expectedValues\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n  get enum() {\n    return this._def.values;\n  }\n}\nZodNativeEnum.create = (values, params) => {\n  return new ZodNativeEnum({\n    values,\n    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodPromise extends ZodType {\n  unwrap() {\n    return this._def.type;\n  }\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.promise,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n    return OK(promisified.then((data) => {\n      return this._def.type.parseAsync(data, {\n        path: ctx.path,\n        errorMap: ctx.common.contextualErrorMap\n      });\n    }));\n  }\n}\nZodPromise.create = (schema, params) => {\n  return new ZodPromise({\n    type: schema,\n    typeName: ZodFirstPartyTypeKind.ZodPromise,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodEffects extends ZodType {\n  innerType() {\n    return this._def.schema;\n  }\n  sourceType() {\n    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n  }\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    const effect = this._def.effect || null;\n    const checkCtx = {\n      addIssue: (arg) => {\n        addIssueToContext(ctx, arg);\n        if (arg.fatal) {\n          status.abort();\n        } else {\n          status.dirty();\n        }\n      },\n      get path() {\n        return ctx.path;\n      }\n    };\n    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n    if (effect.type === \"preprocess\") {\n      const processed = effect.transform(ctx.data, checkCtx);\n      if (ctx.common.async) {\n        return Promise.resolve(processed).then(async (processed2) => {\n          if (status.value === \"aborted\")\n            return INVALID;\n          const result = await this._def.schema._parseAsync({\n            data: processed2,\n            path: ctx.path,\n            parent: ctx\n          });\n          if (result.status === \"aborted\")\n            return INVALID;\n          if (result.status === \"dirty\")\n            return DIRTY(result.value);\n          if (status.value === \"dirty\")\n            return DIRTY(result.value);\n          return result;\n        });\n      } else {\n        if (status.value === \"aborted\")\n          return INVALID;\n        const result = this._def.schema._parseSync({\n          data: processed,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (result.status === \"aborted\")\n          return INVALID;\n        if (result.status === \"dirty\")\n          return DIRTY(result.value);\n        if (status.value === \"dirty\")\n          return DIRTY(result.value);\n        return result;\n      }\n    }\n    if (effect.type === \"refinement\") {\n      const executeRefinement = (acc) => {\n        const result = effect.refinement(acc, checkCtx);\n        if (ctx.common.async) {\n          return Promise.resolve(result);\n        }\n        if (result instanceof Promise) {\n          throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n        }\n        return acc;\n      };\n      if (ctx.common.async === false) {\n        const inner = this._def.schema._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (inner.status === \"aborted\")\n          return INVALID;\n        if (inner.status === \"dirty\")\n          status.dirty();\n        executeRefinement(inner.value);\n        return { status: status.value, value: inner.value };\n      } else {\n        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n          if (inner.status === \"aborted\")\n            return INVALID;\n          if (inner.status === \"dirty\")\n            status.dirty();\n          return executeRefinement(inner.value).then(() => {\n            return { status: status.value, value: inner.value };\n          });\n        });\n      }\n    }\n    if (effect.type === \"transform\") {\n      if (ctx.common.async === false) {\n        const base = this._def.schema._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (!isValid(base))\n          return INVALID;\n        const result = effect.transform(base.value, checkCtx);\n        if (result instanceof Promise) {\n          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n        }\n        return { status: status.value, value: result };\n      } else {\n        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {\n          if (!isValid(base))\n            return INVALID;\n          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({\n            status: status.value,\n            value: result\n          }));\n        });\n      }\n    }\n    util.assertNever(effect);\n  }\n}\nZodEffects.create = (schema, effect, params) => {\n  return new ZodEffects({\n    schema,\n    typeName: ZodFirstPartyTypeKind.ZodEffects,\n    effect,\n    ...processCreateParams(params)\n  });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n  return new ZodEffects({\n    schema,\n    effect: { type: \"preprocess\", transform: preprocess },\n    typeName: ZodFirstPartyTypeKind.ZodEffects,\n    ...processCreateParams(params)\n  });\n};\nclass ZodOptional extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType === ZodParsedType.undefined) {\n      return OK(undefined);\n    }\n    return this._def.innerType._parse(input);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\nZodOptional.create = (type, params) => {\n  return new ZodOptional({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodOptional,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodNullable extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType === ZodParsedType.null) {\n      return OK(null);\n    }\n    return this._def.innerType._parse(input);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\nZodNullable.create = (type, params) => {\n  return new ZodNullable({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodNullable,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodDefault extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    let data = ctx.data;\n    if (ctx.parsedType === ZodParsedType.undefined) {\n      data = this._def.defaultValue();\n    }\n    return this._def.innerType._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n  removeDefault() {\n    return this._def.innerType;\n  }\n}\nZodDefault.create = (type, params) => {\n  return new ZodDefault({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodDefault,\n    defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodCatch extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const newCtx = {\n      ...ctx,\n      common: {\n        ...ctx.common,\n        issues: []\n      }\n    };\n    const result = this._def.innerType._parse({\n      data: newCtx.data,\n      path: newCtx.path,\n      parent: {\n        ...newCtx\n      }\n    });\n    if (isAsync(result)) {\n      return result.then((result2) => {\n        return {\n          status: \"valid\",\n          value: result2.status === \"valid\" ? result2.value : this._def.catchValue({\n            get error() {\n              return new ZodError(newCtx.common.issues);\n            },\n            input: newCtx.data\n          })\n        };\n      });\n    } else {\n      return {\n        status: \"valid\",\n        value: result.status === \"valid\" ? result.value : this._def.catchValue({\n          get error() {\n            return new ZodError(newCtx.common.issues);\n          },\n          input: newCtx.data\n        })\n      };\n    }\n  }\n  removeCatch() {\n    return this._def.innerType;\n  }\n}\nZodCatch.create = (type, params) => {\n  return new ZodCatch({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodCatch,\n    catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n    ...processCreateParams(params)\n  });\n};\n\nclass ZodNaN extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.nan) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.nan,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return { status: \"valid\", value: input.data };\n  }\n}\nZodNaN.create = (params) => {\n  return new ZodNaN({\n    typeName: ZodFirstPartyTypeKind.ZodNaN,\n    ...processCreateParams(params)\n  });\n};\nvar BRAND = Symbol(\"zod_brand\");\n\nclass ZodBranded extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const data = ctx.data;\n    return this._def.type._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n  unwrap() {\n    return this._def.type;\n  }\n}\n\nclass ZodPipeline extends ZodType {\n  _parse(input) {\n    const { status, ctx } = this._processInputParams(input);\n    if (ctx.common.async) {\n      const handleAsync = async () => {\n        const inResult = await this._def.in._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (inResult.status === \"aborted\")\n          return INVALID;\n        if (inResult.status === \"dirty\") {\n          status.dirty();\n          return DIRTY(inResult.value);\n        } else {\n          return this._def.out._parseAsync({\n            data: inResult.value,\n            path: ctx.path,\n            parent: ctx\n          });\n        }\n      };\n      return handleAsync();\n    } else {\n      const inResult = this._def.in._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n      if (inResult.status === \"aborted\")\n        return INVALID;\n      if (inResult.status === \"dirty\") {\n        status.dirty();\n        return {\n          status: \"dirty\",\n          value: inResult.value\n        };\n      } else {\n        return this._def.out._parseSync({\n          data: inResult.value,\n          path: ctx.path,\n          parent: ctx\n        });\n      }\n    }\n  }\n  static create(a, b) {\n    return new ZodPipeline({\n      in: a,\n      out: b,\n      typeName: ZodFirstPartyTypeKind.ZodPipeline\n    });\n  }\n}\n\nclass ZodReadonly extends ZodType {\n  _parse(input) {\n    const result = this._def.innerType._parse(input);\n    const freeze = (data) => {\n      if (isValid(data)) {\n        data.value = Object.freeze(data.value);\n      }\n      return data;\n    };\n    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\nZodReadonly.create = (type, params) => {\n  return new ZodReadonly({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodReadonly,\n    ...processCreateParams(params)\n  });\n};\nfunction cleanParams(params, data) {\n  const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n  const p2 = typeof p === \"string\" ? { message: p } : p;\n  return p2;\n}\nfunction custom(check, _params = {}, fatal) {\n  if (check)\n    return ZodAny.create().superRefine((data, ctx) => {\n      const r = check(data);\n      if (r instanceof Promise) {\n        return r.then((r2) => {\n          if (!r2) {\n            const params = cleanParams(_params, data);\n            const _fatal = params.fatal ?? fatal ?? true;\n            ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n          }\n        });\n      }\n      if (!r) {\n        const params = cleanParams(_params, data);\n        const _fatal = params.fatal ?? fatal ?? true;\n        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n      }\n      return;\n    });\n  return ZodAny.create();\n}\nvar late = {\n  object: ZodObject.lazycreate\n};\nvar ZodFirstPartyTypeKind;\n(function(ZodFirstPartyTypeKind2) {\n  ZodFirstPartyTypeKind2[\"ZodString\"] = \"ZodString\";\n  ZodFirstPartyTypeKind2[\"ZodNumber\"] = \"ZodNumber\";\n  ZodFirstPartyTypeKind2[\"ZodNaN\"] = \"ZodNaN\";\n  ZodFirstPartyTypeKind2[\"ZodBigInt\"] = \"ZodBigInt\";\n  ZodFirstPartyTypeKind2[\"ZodBoolean\"] = \"ZodBoolean\";\n  ZodFirstPartyTypeKind2[\"ZodDate\"] = \"ZodDate\";\n  ZodFirstPartyTypeKind2[\"ZodSymbol\"] = \"ZodSymbol\";\n  ZodFirstPartyTypeKind2[\"ZodUndefined\"] = \"ZodUndefined\";\n  ZodFirstPartyTypeKind2[\"ZodNull\"] = \"ZodNull\";\n  ZodFirstPartyTypeKind2[\"ZodAny\"] = \"ZodAny\";\n  ZodFirstPartyTypeKind2[\"ZodUnknown\"] = \"ZodUnknown\";\n  ZodFirstPartyTypeKind2[\"ZodNever\"] = \"ZodNever\";\n  ZodFirstPartyTypeKind2[\"ZodVoid\"] = \"ZodVoid\";\n  ZodFirstPartyTypeKind2[\"ZodArray\"] = \"ZodArray\";\n  ZodFirstPartyTypeKind2[\"ZodObject\"] = \"ZodObject\";\n  ZodFirstPartyTypeKind2[\"ZodUnion\"] = \"ZodUnion\";\n  ZodFirstPartyTypeKind2[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n  ZodFirstPartyTypeKind2[\"ZodIntersection\"] = \"ZodIntersection\";\n  ZodFirstPartyTypeKind2[\"ZodTuple\"] = \"ZodTuple\";\n  ZodFirstPartyTypeKind2[\"ZodRecord\"] = \"ZodRecord\";\n  ZodFirstPartyTypeKind2[\"ZodMap\"] = \"ZodMap\";\n  ZodFirstPartyTypeKind2[\"ZodSet\"] = \"ZodSet\";\n  ZodFirstPartyTypeKind2[\"ZodFunction\"] = \"ZodFunction\";\n  ZodFirstPartyTypeKind2[\"ZodLazy\"] = \"ZodLazy\";\n  ZodFirstPartyTypeKind2[\"ZodLiteral\"] = \"ZodLiteral\";\n  ZodFirstPartyTypeKind2[\"ZodEnum\"] = \"ZodEnum\";\n  ZodFirstPartyTypeKind2[\"ZodEffects\"] = \"ZodEffects\";\n  ZodFirstPartyTypeKind2[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n  ZodFirstPartyTypeKind2[\"ZodOptional\"] = \"ZodOptional\";\n  ZodFirstPartyTypeKind2[\"ZodNullable\"] = \"ZodNullable\";\n  ZodFirstPartyTypeKind2[\"ZodDefault\"] = \"ZodDefault\";\n  ZodFirstPartyTypeKind2[\"ZodCatch\"] = \"ZodCatch\";\n  ZodFirstPartyTypeKind2[\"ZodPromise\"] = \"ZodPromise\";\n  ZodFirstPartyTypeKind2[\"ZodBranded\"] = \"ZodBranded\";\n  ZodFirstPartyTypeKind2[\"ZodPipeline\"] = \"ZodPipeline\";\n  ZodFirstPartyTypeKind2[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nvar instanceOfType = (cls, params = {\n  message: `Input not instance of ${cls.name}`\n}) => custom((data) => data instanceof cls, params);\nvar stringType = ZodString.create;\nvar numberType = ZodNumber.create;\nvar nanType = ZodNaN.create;\nvar bigIntType = ZodBigInt.create;\nvar booleanType = ZodBoolean.create;\nvar dateType = ZodDate.create;\nvar symbolType = ZodSymbol.create;\nvar undefinedType = ZodUndefined.create;\nvar nullType = ZodNull.create;\nvar anyType = ZodAny.create;\nvar unknownType = ZodUnknown.create;\nvar neverType = ZodNever.create;\nvar voidType = ZodVoid.create;\nvar arrayType = ZodArray.create;\nvar objectType = ZodObject.create;\nvar strictObjectType = ZodObject.strictCreate;\nvar unionType = ZodUnion.create;\nvar discriminatedUnionType = ZodDiscriminatedUnion.create;\nvar intersectionType = ZodIntersection.create;\nvar tupleType = ZodTuple.create;\nvar recordType = ZodRecord.create;\nvar mapType = ZodMap.create;\nvar setType = ZodSet.create;\nvar functionType = ZodFunction.create;\nvar lazyType = ZodLazy.create;\nvar literalType = ZodLiteral.create;\nvar enumType = ZodEnum.create;\nvar nativeEnumType = ZodNativeEnum.create;\nvar promiseType = ZodPromise.create;\nvar effectsType = ZodEffects.create;\nvar optionalType = ZodOptional.create;\nvar nullableType = ZodNullable.create;\nvar preprocessType = ZodEffects.createWithPreprocess;\nvar pipelineType = ZodPipeline.create;\nvar ostring = () => stringType().optional();\nvar onumber = () => numberType().optional();\nvar oboolean = () => booleanType().optional();\nvar coerce = {\n  string: (arg) => ZodString.create({ ...arg, coerce: true }),\n  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),\n  boolean: (arg) => ZodBoolean.create({\n    ...arg,\n    coerce: true\n  }),\n  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),\n  date: (arg) => ZodDate.create({ ...arg, coerce: true })\n};\nvar NEVER = INVALID;\n// ../node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\nvar LATEST_PROTOCOL_VERSION = \"2025-06-18\";\nvar SUPPORTED_PROTOCOL_VERSIONS = [\n  LATEST_PROTOCOL_VERSION,\n  \"2025-03-26\",\n  \"2024-11-05\",\n  \"2024-10-07\"\n];\nvar JSONRPC_VERSION = \"2.0\";\nvar ProgressTokenSchema = exports_external.union([exports_external.string(), exports_external.number().int()]);\nvar CursorSchema = exports_external.string();\nvar RequestMetaSchema = exports_external.object({\n  progressToken: exports_external.optional(ProgressTokenSchema)\n}).passthrough();\nvar BaseRequestParamsSchema = exports_external.object({\n  _meta: exports_external.optional(RequestMetaSchema)\n}).passthrough();\nvar RequestSchema = exports_external.object({\n  method: exports_external.string(),\n  params: exports_external.optional(BaseRequestParamsSchema)\n});\nvar BaseNotificationParamsSchema = exports_external.object({\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n}).passthrough();\nvar NotificationSchema = exports_external.object({\n  method: exports_external.string(),\n  params: exports_external.optional(BaseNotificationParamsSchema)\n});\nvar ResultSchema = exports_external.object({\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n}).passthrough();\nvar RequestIdSchema = exports_external.union([exports_external.string(), exports_external.number().int()]);\nvar JSONRPCRequestSchema = exports_external.object({\n  jsonrpc: exports_external.literal(JSONRPC_VERSION),\n  id: RequestIdSchema\n}).merge(RequestSchema).strict();\nvar isJSONRPCRequest = (value) => JSONRPCRequestSchema.safeParse(value).success;\nvar JSONRPCNotificationSchema = exports_external.object({\n  jsonrpc: exports_external.literal(JSONRPC_VERSION)\n}).merge(NotificationSchema).strict();\nvar isJSONRPCNotification = (value) => JSONRPCNotificationSchema.safeParse(value).success;\nvar JSONRPCResponseSchema = exports_external.object({\n  jsonrpc: exports_external.literal(JSONRPC_VERSION),\n  id: RequestIdSchema,\n  result: ResultSchema\n}).strict();\nvar isJSONRPCResponse = (value) => JSONRPCResponseSchema.safeParse(value).success;\nvar ErrorCode;\n(function(ErrorCode2) {\n  ErrorCode2[ErrorCode2[\"ConnectionClosed\"] = -32000] = \"ConnectionClosed\";\n  ErrorCode2[ErrorCode2[\"RequestTimeout\"] = -32001] = \"RequestTimeout\";\n  ErrorCode2[ErrorCode2[\"ParseError\"] = -32700] = \"ParseError\";\n  ErrorCode2[ErrorCode2[\"InvalidRequest\"] = -32600] = \"InvalidRequest\";\n  ErrorCode2[ErrorCode2[\"MethodNotFound\"] = -32601] = \"MethodNotFound\";\n  ErrorCode2[ErrorCode2[\"InvalidParams\"] = -32602] = \"InvalidParams\";\n  ErrorCode2[ErrorCode2[\"InternalError\"] = -32603] = \"InternalError\";\n})(ErrorCode || (ErrorCode = {}));\nvar JSONRPCErrorSchema = exports_external.object({\n  jsonrpc: exports_external.literal(JSONRPC_VERSION),\n  id: RequestIdSchema,\n  error: exports_external.object({\n    code: exports_external.number().int(),\n    message: exports_external.string(),\n    data: exports_external.optional(exports_external.unknown())\n  })\n}).strict();\nvar isJSONRPCError = (value) => JSONRPCErrorSchema.safeParse(value).success;\nvar JSONRPCMessageSchema = exports_external.union([\n  JSONRPCRequestSchema,\n  JSONRPCNotificationSchema,\n  JSONRPCResponseSchema,\n  JSONRPCErrorSchema\n]);\nvar EmptyResultSchema = ResultSchema.strict();\nvar CancelledNotificationSchema = NotificationSchema.extend({\n  method: exports_external.literal(\"notifications/cancelled\"),\n  params: BaseNotificationParamsSchema.extend({\n    requestId: RequestIdSchema,\n    reason: exports_external.string().optional()\n  })\n});\nvar BaseMetadataSchema = exports_external.object({\n  name: exports_external.string(),\n  title: exports_external.optional(exports_external.string())\n}).passthrough();\nvar ImplementationSchema = BaseMetadataSchema.extend({\n  version: exports_external.string()\n});\nvar ClientCapabilitiesSchema = exports_external.object({\n  experimental: exports_external.optional(exports_external.object({}).passthrough()),\n  sampling: exports_external.optional(exports_external.object({}).passthrough()),\n  elicitation: exports_external.optional(exports_external.object({}).passthrough()),\n  roots: exports_external.optional(exports_external.object({\n    listChanged: exports_external.optional(exports_external.boolean())\n  }).passthrough())\n}).passthrough();\nvar InitializeRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"initialize\"),\n  params: BaseRequestParamsSchema.extend({\n    protocolVersion: exports_external.string(),\n    capabilities: ClientCapabilitiesSchema,\n    clientInfo: ImplementationSchema\n  })\n});\nvar ServerCapabilitiesSchema = exports_external.object({\n  experimental: exports_external.optional(exports_external.object({}).passthrough()),\n  logging: exports_external.optional(exports_external.object({}).passthrough()),\n  completions: exports_external.optional(exports_external.object({}).passthrough()),\n  prompts: exports_external.optional(exports_external.object({\n    listChanged: exports_external.optional(exports_external.boolean())\n  }).passthrough()),\n  resources: exports_external.optional(exports_external.object({\n    subscribe: exports_external.optional(exports_external.boolean()),\n    listChanged: exports_external.optional(exports_external.boolean())\n  }).passthrough()),\n  tools: exports_external.optional(exports_external.object({\n    listChanged: exports_external.optional(exports_external.boolean())\n  }).passthrough())\n}).passthrough();\nvar InitializeResultSchema = ResultSchema.extend({\n  protocolVersion: exports_external.string(),\n  capabilities: ServerCapabilitiesSchema,\n  serverInfo: ImplementationSchema,\n  instructions: exports_external.optional(exports_external.string())\n});\nvar InitializedNotificationSchema = NotificationSchema.extend({\n  method: exports_external.literal(\"notifications/initialized\")\n});\nvar PingRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"ping\")\n});\nvar ProgressSchema = exports_external.object({\n  progress: exports_external.number(),\n  total: exports_external.optional(exports_external.number()),\n  message: exports_external.optional(exports_external.string())\n}).passthrough();\nvar ProgressNotificationSchema = NotificationSchema.extend({\n  method: exports_external.literal(\"notifications/progress\"),\n  params: BaseNotificationParamsSchema.merge(ProgressSchema).extend({\n    progressToken: ProgressTokenSchema\n  })\n});\nvar PaginatedRequestSchema = RequestSchema.extend({\n  params: BaseRequestParamsSchema.extend({\n    cursor: exports_external.optional(CursorSchema)\n  }).optional()\n});\nvar PaginatedResultSchema = ResultSchema.extend({\n  nextCursor: exports_external.optional(CursorSchema)\n});\nvar ResourceContentsSchema = exports_external.object({\n  uri: exports_external.string(),\n  mimeType: exports_external.optional(exports_external.string()),\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n}).passthrough();\nvar TextResourceContentsSchema = ResourceContentsSchema.extend({\n  text: exports_external.string()\n});\nvar Base64Schema = exports_external.string().refine((val) => {\n  try {\n    atob(val);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}, { message: \"Invalid Base64 string\" });\nvar BlobResourceContentsSchema = ResourceContentsSchema.extend({\n  blob: Base64Schema\n});\nvar ResourceSchema = BaseMetadataSchema.extend({\n  uri: exports_external.string(),\n  description: exports_external.optional(exports_external.string()),\n  mimeType: exports_external.optional(exports_external.string()),\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n});\nvar ResourceTemplateSchema = BaseMetadataSchema.extend({\n  uriTemplate: exports_external.string(),\n  description: exports_external.optional(exports_external.string()),\n  mimeType: exports_external.optional(exports_external.string()),\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n});\nvar ListResourcesRequestSchema = PaginatedRequestSchema.extend({\n  method: exports_external.literal(\"resources/list\")\n});\nvar ListResourcesResultSchema = PaginatedResultSchema.extend({\n  resources: exports_external.array(ResourceSchema)\n});\nvar ListResourceTemplatesRequestSchema = PaginatedRequestSchema.extend({\n  method: exports_external.literal(\"resources/templates/list\")\n});\nvar ListResourceTemplatesResultSchema = PaginatedResultSchema.extend({\n  resourceTemplates: exports_external.array(ResourceTemplateSchema)\n});\nvar ReadResourceRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"resources/read\"),\n  params: BaseRequestParamsSchema.extend({\n    uri: exports_external.string()\n  })\n});\nvar ReadResourceResultSchema = ResultSchema.extend({\n  contents: exports_external.array(exports_external.union([TextResourceContentsSchema, BlobResourceContentsSchema]))\n});\nvar ResourceListChangedNotificationSchema = NotificationSchema.extend({\n  method: exports_external.literal(\"notifications/resources/list_changed\")\n});\nvar SubscribeRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"resources/subscribe\"),\n  params: BaseRequestParamsSchema.extend({\n    uri: exports_external.string()\n  })\n});\nvar UnsubscribeRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"resources/unsubscribe\"),\n  params: BaseRequestParamsSchema.extend({\n    uri: exports_external.string()\n  })\n});\nvar ResourceUpdatedNotificationSchema = NotificationSchema.extend({\n  method: exports_external.literal(\"notifications/resources/updated\"),\n  params: BaseNotificationParamsSchema.extend({\n    uri: exports_external.string()\n  })\n});\nvar PromptArgumentSchema = exports_external.object({\n  name: exports_external.string(),\n  description: exports_external.optional(exports_external.string()),\n  required: exports_external.optional(exports_external.boolean())\n}).passthrough();\nvar PromptSchema = BaseMetadataSchema.extend({\n  description: exports_external.optional(exports_external.string()),\n  arguments: exports_external.optional(exports_external.array(PromptArgumentSchema)),\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n});\nvar ListPromptsRequestSchema = PaginatedRequestSchema.extend({\n  method: exports_external.literal(\"prompts/list\")\n});\nvar ListPromptsResultSchema = PaginatedResultSchema.extend({\n  prompts: exports_external.array(PromptSchema)\n});\nvar GetPromptRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"prompts/get\"),\n  params: BaseRequestParamsSchema.extend({\n    name: exports_external.string(),\n    arguments: exports_external.optional(exports_external.record(exports_external.string()))\n  })\n});\nvar TextContentSchema = exports_external.object({\n  type: exports_external.literal(\"text\"),\n  text: exports_external.string(),\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n}).passthrough();\nvar ImageContentSchema = exports_external.object({\n  type: exports_external.literal(\"image\"),\n  data: Base64Schema,\n  mimeType: exports_external.string(),\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n}).passthrough();\nvar AudioContentSchema = exports_external.object({\n  type: exports_external.literal(\"audio\"),\n  data: Base64Schema,\n  mimeType: exports_external.string(),\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n}).passthrough();\nvar EmbeddedResourceSchema = exports_external.object({\n  type: exports_external.literal(\"resource\"),\n  resource: exports_external.union([TextResourceContentsSchema, BlobResourceContentsSchema]),\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n}).passthrough();\nvar ResourceLinkSchema = ResourceSchema.extend({\n  type: exports_external.literal(\"resource_link\")\n});\nvar ContentBlockSchema = exports_external.union([\n  TextContentSchema,\n  ImageContentSchema,\n  AudioContentSchema,\n  ResourceLinkSchema,\n  EmbeddedResourceSchema\n]);\nvar PromptMessageSchema = exports_external.object({\n  role: exports_external.enum([\"user\", \"assistant\"]),\n  content: ContentBlockSchema\n}).passthrough();\nvar GetPromptResultSchema = ResultSchema.extend({\n  description: exports_external.optional(exports_external.string()),\n  messages: exports_external.array(PromptMessageSchema)\n});\nvar PromptListChangedNotificationSchema = NotificationSchema.extend({\n  method: exports_external.literal(\"notifications/prompts/list_changed\")\n});\nvar ToolAnnotationsSchema = exports_external.object({\n  title: exports_external.optional(exports_external.string()),\n  readOnlyHint: exports_external.optional(exports_external.boolean()),\n  destructiveHint: exports_external.optional(exports_external.boolean()),\n  idempotentHint: exports_external.optional(exports_external.boolean()),\n  openWorldHint: exports_external.optional(exports_external.boolean())\n}).passthrough();\nvar ToolSchema = BaseMetadataSchema.extend({\n  description: exports_external.optional(exports_external.string()),\n  inputSchema: exports_external.object({\n    type: exports_external.literal(\"object\"),\n    properties: exports_external.optional(exports_external.object({}).passthrough()),\n    required: exports_external.optional(exports_external.array(exports_external.string()))\n  }).passthrough(),\n  outputSchema: exports_external.optional(exports_external.object({\n    type: exports_external.literal(\"object\"),\n    properties: exports_external.optional(exports_external.object({}).passthrough()),\n    required: exports_external.optional(exports_external.array(exports_external.string()))\n  }).passthrough()),\n  annotations: exports_external.optional(ToolAnnotationsSchema),\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n});\nvar ListToolsRequestSchema = PaginatedRequestSchema.extend({\n  method: exports_external.literal(\"tools/list\")\n});\nvar ListToolsResultSchema = PaginatedResultSchema.extend({\n  tools: exports_external.array(ToolSchema)\n});\nvar CallToolResultSchema = ResultSchema.extend({\n  content: exports_external.array(ContentBlockSchema).default([]),\n  structuredContent: exports_external.object({}).passthrough().optional(),\n  isError: exports_external.optional(exports_external.boolean())\n});\nvar CompatibilityCallToolResultSchema = CallToolResultSchema.or(ResultSchema.extend({\n  toolResult: exports_external.unknown()\n}));\nvar CallToolRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"tools/call\"),\n  params: BaseRequestParamsSchema.extend({\n    name: exports_external.string(),\n    arguments: exports_external.optional(exports_external.record(exports_external.unknown()))\n  })\n});\nvar ToolListChangedNotificationSchema = NotificationSchema.extend({\n  method: exports_external.literal(\"notifications/tools/list_changed\")\n});\nvar LoggingLevelSchema = exports_external.enum([\n  \"debug\",\n  \"info\",\n  \"notice\",\n  \"warning\",\n  \"error\",\n  \"critical\",\n  \"alert\",\n  \"emergency\"\n]);\nvar SetLevelRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"logging/setLevel\"),\n  params: BaseRequestParamsSchema.extend({\n    level: LoggingLevelSchema\n  })\n});\nvar LoggingMessageNotificationSchema = NotificationSchema.extend({\n  method: exports_external.literal(\"notifications/message\"),\n  params: BaseNotificationParamsSchema.extend({\n    level: LoggingLevelSchema,\n    logger: exports_external.optional(exports_external.string()),\n    data: exports_external.unknown()\n  })\n});\nvar ModelHintSchema = exports_external.object({\n  name: exports_external.string().optional()\n}).passthrough();\nvar ModelPreferencesSchema = exports_external.object({\n  hints: exports_external.optional(exports_external.array(ModelHintSchema)),\n  costPriority: exports_external.optional(exports_external.number().min(0).max(1)),\n  speedPriority: exports_external.optional(exports_external.number().min(0).max(1)),\n  intelligencePriority: exports_external.optional(exports_external.number().min(0).max(1))\n}).passthrough();\nvar SamplingMessageSchema = exports_external.object({\n  role: exports_external.enum([\"user\", \"assistant\"]),\n  content: exports_external.union([TextContentSchema, ImageContentSchema, AudioContentSchema])\n}).passthrough();\nvar CreateMessageRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"sampling/createMessage\"),\n  params: BaseRequestParamsSchema.extend({\n    messages: exports_external.array(SamplingMessageSchema),\n    systemPrompt: exports_external.optional(exports_external.string()),\n    includeContext: exports_external.optional(exports_external.enum([\"none\", \"thisServer\", \"allServers\"])),\n    temperature: exports_external.optional(exports_external.number()),\n    maxTokens: exports_external.number().int(),\n    stopSequences: exports_external.optional(exports_external.array(exports_external.string())),\n    metadata: exports_external.optional(exports_external.object({}).passthrough()),\n    modelPreferences: exports_external.optional(ModelPreferencesSchema)\n  })\n});\nvar CreateMessageResultSchema = ResultSchema.extend({\n  model: exports_external.string(),\n  stopReason: exports_external.optional(exports_external.enum([\"endTurn\", \"stopSequence\", \"maxTokens\"]).or(exports_external.string())),\n  role: exports_external.enum([\"user\", \"assistant\"]),\n  content: exports_external.discriminatedUnion(\"type\", [\n    TextContentSchema,\n    ImageContentSchema,\n    AudioContentSchema\n  ])\n});\nvar BooleanSchemaSchema = exports_external.object({\n  type: exports_external.literal(\"boolean\"),\n  title: exports_external.optional(exports_external.string()),\n  description: exports_external.optional(exports_external.string()),\n  default: exports_external.optional(exports_external.boolean())\n}).passthrough();\nvar StringSchemaSchema = exports_external.object({\n  type: exports_external.literal(\"string\"),\n  title: exports_external.optional(exports_external.string()),\n  description: exports_external.optional(exports_external.string()),\n  minLength: exports_external.optional(exports_external.number()),\n  maxLength: exports_external.optional(exports_external.number()),\n  format: exports_external.optional(exports_external.enum([\"email\", \"uri\", \"date\", \"date-time\"]))\n}).passthrough();\nvar NumberSchemaSchema = exports_external.object({\n  type: exports_external.enum([\"number\", \"integer\"]),\n  title: exports_external.optional(exports_external.string()),\n  description: exports_external.optional(exports_external.string()),\n  minimum: exports_external.optional(exports_external.number()),\n  maximum: exports_external.optional(exports_external.number())\n}).passthrough();\nvar EnumSchemaSchema = exports_external.object({\n  type: exports_external.literal(\"string\"),\n  title: exports_external.optional(exports_external.string()),\n  description: exports_external.optional(exports_external.string()),\n  enum: exports_external.array(exports_external.string()),\n  enumNames: exports_external.optional(exports_external.array(exports_external.string()))\n}).passthrough();\nvar PrimitiveSchemaDefinitionSchema = exports_external.union([\n  BooleanSchemaSchema,\n  StringSchemaSchema,\n  NumberSchemaSchema,\n  EnumSchemaSchema\n]);\nvar ElicitRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"elicitation/create\"),\n  params: BaseRequestParamsSchema.extend({\n    message: exports_external.string(),\n    requestedSchema: exports_external.object({\n      type: exports_external.literal(\"object\"),\n      properties: exports_external.record(exports_external.string(), PrimitiveSchemaDefinitionSchema),\n      required: exports_external.optional(exports_external.array(exports_external.string()))\n    }).passthrough()\n  })\n});\nvar ElicitResultSchema = ResultSchema.extend({\n  action: exports_external.enum([\"accept\", \"decline\", \"cancel\"]),\n  content: exports_external.optional(exports_external.record(exports_external.string(), exports_external.unknown()))\n});\nvar ResourceTemplateReferenceSchema = exports_external.object({\n  type: exports_external.literal(\"ref/resource\"),\n  uri: exports_external.string()\n}).passthrough();\nvar PromptReferenceSchema = exports_external.object({\n  type: exports_external.literal(\"ref/prompt\"),\n  name: exports_external.string()\n}).passthrough();\nvar CompleteRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"completion/complete\"),\n  params: BaseRequestParamsSchema.extend({\n    ref: exports_external.union([PromptReferenceSchema, ResourceTemplateReferenceSchema]),\n    argument: exports_external.object({\n      name: exports_external.string(),\n      value: exports_external.string()\n    }).passthrough(),\n    context: exports_external.optional(exports_external.object({\n      arguments: exports_external.optional(exports_external.record(exports_external.string(), exports_external.string()))\n    }))\n  })\n});\nvar CompleteResultSchema = ResultSchema.extend({\n  completion: exports_external.object({\n    values: exports_external.array(exports_external.string()).max(100),\n    total: exports_external.optional(exports_external.number().int()),\n    hasMore: exports_external.optional(exports_external.boolean())\n  }).passthrough()\n});\nvar RootSchema = exports_external.object({\n  uri: exports_external.string().startsWith(\"file://\"),\n  name: exports_external.optional(exports_external.string()),\n  _meta: exports_external.optional(exports_external.object({}).passthrough())\n}).passthrough();\nvar ListRootsRequestSchema = RequestSchema.extend({\n  method: exports_external.literal(\"roots/list\")\n});\nvar ListRootsResultSchema = ResultSchema.extend({\n  roots: exports_external.array(RootSchema)\n});\nvar RootsListChangedNotificationSchema = NotificationSchema.extend({\n  method: exports_external.literal(\"notifications/roots/list_changed\")\n});\nvar ClientRequestSchema = exports_external.union([\n  PingRequestSchema,\n  InitializeRequestSchema,\n  CompleteRequestSchema,\n  SetLevelRequestSchema,\n  GetPromptRequestSchema,\n  ListPromptsRequestSchema,\n  ListResourcesRequestSchema,\n  ListResourceTemplatesRequestSchema,\n  ReadResourceRequestSchema,\n  SubscribeRequestSchema,\n  UnsubscribeRequestSchema,\n  CallToolRequestSchema,\n  ListToolsRequestSchema\n]);\nvar ClientNotificationSchema = exports_external.union([\n  CancelledNotificationSchema,\n  ProgressNotificationSchema,\n  InitializedNotificationSchema,\n  RootsListChangedNotificationSchema\n]);\nvar ClientResultSchema = exports_external.union([\n  EmptyResultSchema,\n  CreateMessageResultSchema,\n  ElicitResultSchema,\n  ListRootsResultSchema\n]);\nvar ServerRequestSchema = exports_external.union([\n  PingRequestSchema,\n  CreateMessageRequestSchema,\n  ElicitRequestSchema,\n  ListRootsRequestSchema\n]);\nvar ServerNotificationSchema = exports_external.union([\n  CancelledNotificationSchema,\n  ProgressNotificationSchema,\n  LoggingMessageNotificationSchema,\n  ResourceUpdatedNotificationSchema,\n  ResourceListChangedNotificationSchema,\n  ToolListChangedNotificationSchema,\n  PromptListChangedNotificationSchema\n]);\nvar ServerResultSchema = exports_external.union([\n  EmptyResultSchema,\n  InitializeResultSchema,\n  CompleteResultSchema,\n  GetPromptResultSchema,\n  ListPromptsResultSchema,\n  ListResourcesResultSchema,\n  ListResourceTemplatesResultSchema,\n  ReadResourceResultSchema,\n  CallToolResultSchema,\n  ListToolsResultSchema\n]);\n\nclass McpError extends Error {\n  constructor(code, message, data) {\n    super(`MCP error ${code}: ${message}`);\n    this.code = code;\n    this.data = data;\n    this.name = \"McpError\";\n  }\n}\n\n// ../node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js\nvar DEFAULT_REQUEST_TIMEOUT_MSEC = 60000;\n\nclass Protocol {\n  constructor(_options) {\n    this._options = _options;\n    this._requestMessageId = 0;\n    this._requestHandlers = new Map;\n    this._requestHandlerAbortControllers = new Map;\n    this._notificationHandlers = new Map;\n    this._responseHandlers = new Map;\n    this._progressHandlers = new Map;\n    this._timeoutInfo = new Map;\n    this._pendingDebouncedNotifications = new Set;\n    this.setNotificationHandler(CancelledNotificationSchema, (notification) => {\n      const controller = this._requestHandlerAbortControllers.get(notification.params.requestId);\n      controller === null || controller === undefined || controller.abort(notification.params.reason);\n    });\n    this.setNotificationHandler(ProgressNotificationSchema, (notification) => {\n      this._onprogress(notification);\n    });\n    this.setRequestHandler(PingRequestSchema, (_request) => ({}));\n  }\n  _setupTimeout(messageId, timeout, maxTotalTimeout, onTimeout, resetTimeoutOnProgress = false) {\n    this._timeoutInfo.set(messageId, {\n      timeoutId: setTimeout(onTimeout, timeout),\n      startTime: Date.now(),\n      timeout,\n      maxTotalTimeout,\n      resetTimeoutOnProgress,\n      onTimeout\n    });\n  }\n  _resetTimeout(messageId) {\n    const info = this._timeoutInfo.get(messageId);\n    if (!info)\n      return false;\n    const totalElapsed = Date.now() - info.startTime;\n    if (info.maxTotalTimeout && totalElapsed >= info.maxTotalTimeout) {\n      this._timeoutInfo.delete(messageId);\n      throw new McpError(ErrorCode.RequestTimeout, \"Maximum total timeout exceeded\", { maxTotalTimeout: info.maxTotalTimeout, totalElapsed });\n    }\n    clearTimeout(info.timeoutId);\n    info.timeoutId = setTimeout(info.onTimeout, info.timeout);\n    return true;\n  }\n  _cleanupTimeout(messageId) {\n    const info = this._timeoutInfo.get(messageId);\n    if (info) {\n      clearTimeout(info.timeoutId);\n      this._timeoutInfo.delete(messageId);\n    }\n  }\n  async connect(transport) {\n    var _a, _b, _c;\n    this._transport = transport;\n    const _onclose = (_a = this.transport) === null || _a === undefined ? undefined : _a.onclose;\n    this._transport.onclose = () => {\n      _onclose === null || _onclose === undefined || _onclose();\n      this._onclose();\n    };\n    const _onerror = (_b = this.transport) === null || _b === undefined ? undefined : _b.onerror;\n    this._transport.onerror = (error) => {\n      _onerror === null || _onerror === undefined || _onerror(error);\n      this._onerror(error);\n    };\n    const _onmessage = (_c = this._transport) === null || _c === undefined ? undefined : _c.onmessage;\n    this._transport.onmessage = (message, extra) => {\n      _onmessage === null || _onmessage === undefined || _onmessage(message, extra);\n      if (isJSONRPCResponse(message) || isJSONRPCError(message)) {\n        this._onresponse(message);\n      } else if (isJSONRPCRequest(message)) {\n        this._onrequest(message, extra);\n      } else if (isJSONRPCNotification(message)) {\n        this._onnotification(message);\n      } else {\n        this._onerror(new Error(`Unknown message type: ${JSON.stringify(message)}`));\n      }\n    };\n    await this._transport.start();\n  }\n  _onclose() {\n    var _a;\n    const responseHandlers = this._responseHandlers;\n    this._responseHandlers = new Map;\n    this._progressHandlers.clear();\n    this._pendingDebouncedNotifications.clear();\n    this._transport = undefined;\n    (_a = this.onclose) === null || _a === undefined || _a.call(this);\n    const error = new McpError(ErrorCode.ConnectionClosed, \"Connection closed\");\n    for (const handler of responseHandlers.values()) {\n      handler(error);\n    }\n  }\n  _onerror(error) {\n    var _a;\n    (_a = this.onerror) === null || _a === undefined || _a.call(this, error);\n  }\n  _onnotification(notification) {\n    var _a;\n    const handler = (_a = this._notificationHandlers.get(notification.method)) !== null && _a !== undefined ? _a : this.fallbackNotificationHandler;\n    if (handler === undefined) {\n      return;\n    }\n    Promise.resolve().then(() => handler(notification)).catch((error) => this._onerror(new Error(`Uncaught error in notification handler: ${error}`)));\n  }\n  _onrequest(request, extra) {\n    var _a, _b;\n    const handler = (_a = this._requestHandlers.get(request.method)) !== null && _a !== undefined ? _a : this.fallbackRequestHandler;\n    const capturedTransport = this._transport;\n    if (handler === undefined) {\n      capturedTransport === null || capturedTransport === undefined || capturedTransport.send({\n        jsonrpc: \"2.0\",\n        id: request.id,\n        error: {\n          code: ErrorCode.MethodNotFound,\n          message: \"Method not found\"\n        }\n      }).catch((error) => this._onerror(new Error(`Failed to send an error response: ${error}`)));\n      return;\n    }\n    const abortController = new AbortController;\n    this._requestHandlerAbortControllers.set(request.id, abortController);\n    const fullExtra = {\n      signal: abortController.signal,\n      sessionId: capturedTransport === null || capturedTransport === undefined ? undefined : capturedTransport.sessionId,\n      _meta: (_b = request.params) === null || _b === undefined ? undefined : _b._meta,\n      sendNotification: (notification) => this.notification(notification, { relatedRequestId: request.id }),\n      sendRequest: (r, resultSchema, options) => this.request(r, resultSchema, { ...options, relatedRequestId: request.id }),\n      authInfo: extra === null || extra === undefined ? undefined : extra.authInfo,\n      requestId: request.id,\n      requestInfo: extra === null || extra === undefined ? undefined : extra.requestInfo\n    };\n    Promise.resolve().then(() => handler(request, fullExtra)).then((result) => {\n      if (abortController.signal.aborted) {\n        return;\n      }\n      return capturedTransport === null || capturedTransport === undefined ? undefined : capturedTransport.send({\n        result,\n        jsonrpc: \"2.0\",\n        id: request.id\n      });\n    }, (error) => {\n      var _a2;\n      if (abortController.signal.aborted) {\n        return;\n      }\n      return capturedTransport === null || capturedTransport === undefined ? undefined : capturedTransport.send({\n        jsonrpc: \"2.0\",\n        id: request.id,\n        error: {\n          code: Number.isSafeInteger(error[\"code\"]) ? error[\"code\"] : ErrorCode.InternalError,\n          message: (_a2 = error.message) !== null && _a2 !== undefined ? _a2 : \"Internal error\"\n        }\n      });\n    }).catch((error) => this._onerror(new Error(`Failed to send response: ${error}`))).finally(() => {\n      this._requestHandlerAbortControllers.delete(request.id);\n    });\n  }\n  _onprogress(notification) {\n    const { progressToken, ...params } = notification.params;\n    const messageId = Number(progressToken);\n    const handler = this._progressHandlers.get(messageId);\n    if (!handler) {\n      this._onerror(new Error(`Received a progress notification for an unknown token: ${JSON.stringify(notification)}`));\n      return;\n    }\n    const responseHandler = this._responseHandlers.get(messageId);\n    const timeoutInfo = this._timeoutInfo.get(messageId);\n    if (timeoutInfo && responseHandler && timeoutInfo.resetTimeoutOnProgress) {\n      try {\n        this._resetTimeout(messageId);\n      } catch (error) {\n        responseHandler(error);\n        return;\n      }\n    }\n    handler(params);\n  }\n  _onresponse(response) {\n    const messageId = Number(response.id);\n    const handler = this._responseHandlers.get(messageId);\n    if (handler === undefined) {\n      this._onerror(new Error(`Received a response for an unknown message ID: ${JSON.stringify(response)}`));\n      return;\n    }\n    this._responseHandlers.delete(messageId);\n    this._progressHandlers.delete(messageId);\n    this._cleanupTimeout(messageId);\n    if (isJSONRPCResponse(response)) {\n      handler(response);\n    } else {\n      const error = new McpError(response.error.code, response.error.message, response.error.data);\n      handler(error);\n    }\n  }\n  get transport() {\n    return this._transport;\n  }\n  async close() {\n    var _a;\n    await ((_a = this._transport) === null || _a === undefined ? undefined : _a.close());\n  }\n  request(request, resultSchema, options) {\n    const { relatedRequestId, resumptionToken, onresumptiontoken } = options !== null && options !== undefined ? options : {};\n    return new Promise((resolve, reject) => {\n      var _a, _b, _c, _d, _e, _f;\n      if (!this._transport) {\n        reject(new Error(\"Not connected\"));\n        return;\n      }\n      if (((_a = this._options) === null || _a === undefined ? undefined : _a.enforceStrictCapabilities) === true) {\n        this.assertCapabilityForMethod(request.method);\n      }\n      (_b = options === null || options === undefined ? undefined : options.signal) === null || _b === undefined || _b.throwIfAborted();\n      const messageId = this._requestMessageId++;\n      const jsonrpcRequest = {\n        ...request,\n        jsonrpc: \"2.0\",\n        id: messageId\n      };\n      if (options === null || options === undefined ? undefined : options.onprogress) {\n        this._progressHandlers.set(messageId, options.onprogress);\n        jsonrpcRequest.params = {\n          ...request.params,\n          _meta: {\n            ...((_c = request.params) === null || _c === undefined ? undefined : _c._meta) || {},\n            progressToken: messageId\n          }\n        };\n      }\n      const cancel = (reason) => {\n        var _a2;\n        this._responseHandlers.delete(messageId);\n        this._progressHandlers.delete(messageId);\n        this._cleanupTimeout(messageId);\n        (_a2 = this._transport) === null || _a2 === undefined || _a2.send({\n          jsonrpc: \"2.0\",\n          method: \"notifications/cancelled\",\n          params: {\n            requestId: messageId,\n            reason: String(reason)\n          }\n        }, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => this._onerror(new Error(`Failed to send cancellation: ${error}`)));\n        reject(reason);\n      };\n      this._responseHandlers.set(messageId, (response) => {\n        var _a2;\n        if ((_a2 = options === null || options === undefined ? undefined : options.signal) === null || _a2 === undefined ? undefined : _a2.aborted) {\n          return;\n        }\n        if (response instanceof Error) {\n          return reject(response);\n        }\n        try {\n          const result = resultSchema.parse(response.result);\n          resolve(result);\n        } catch (error) {\n          reject(error);\n        }\n      });\n      (_d = options === null || options === undefined ? undefined : options.signal) === null || _d === undefined || _d.addEventListener(\"abort\", () => {\n        var _a2;\n        cancel((_a2 = options === null || options === undefined ? undefined : options.signal) === null || _a2 === undefined ? undefined : _a2.reason);\n      });\n      const timeout = (_e = options === null || options === undefined ? undefined : options.timeout) !== null && _e !== undefined ? _e : DEFAULT_REQUEST_TIMEOUT_MSEC;\n      const timeoutHandler = () => cancel(new McpError(ErrorCode.RequestTimeout, \"Request timed out\", { timeout }));\n      this._setupTimeout(messageId, timeout, options === null || options === undefined ? undefined : options.maxTotalTimeout, timeoutHandler, (_f = options === null || options === undefined ? undefined : options.resetTimeoutOnProgress) !== null && _f !== undefined ? _f : false);\n      this._transport.send(jsonrpcRequest, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => {\n        this._cleanupTimeout(messageId);\n        reject(error);\n      });\n    });\n  }\n  async notification(notification, options) {\n    var _a, _b;\n    if (!this._transport) {\n      throw new Error(\"Not connected\");\n    }\n    this.assertNotificationCapability(notification.method);\n    const debouncedMethods = (_b = (_a = this._options) === null || _a === undefined ? undefined : _a.debouncedNotificationMethods) !== null && _b !== undefined ? _b : [];\n    const canDebounce = debouncedMethods.includes(notification.method) && !notification.params && !(options === null || options === undefined ? undefined : options.relatedRequestId);\n    if (canDebounce) {\n      if (this._pendingDebouncedNotifications.has(notification.method)) {\n        return;\n      }\n      this._pendingDebouncedNotifications.add(notification.method);\n      Promise.resolve().then(() => {\n        var _a2;\n        this._pendingDebouncedNotifications.delete(notification.method);\n        if (!this._transport) {\n          return;\n        }\n        const jsonrpcNotification2 = {\n          ...notification,\n          jsonrpc: \"2.0\"\n        };\n        (_a2 = this._transport) === null || _a2 === undefined || _a2.send(jsonrpcNotification2, options).catch((error) => this._onerror(error));\n      });\n      return;\n    }\n    const jsonrpcNotification = {\n      ...notification,\n      jsonrpc: \"2.0\"\n    };\n    await this._transport.send(jsonrpcNotification, options);\n  }\n  setRequestHandler(requestSchema, handler) {\n    const method = requestSchema.shape.method.value;\n    this.assertRequestHandlerCapability(method);\n    this._requestHandlers.set(method, (request, extra) => {\n      return Promise.resolve(handler(requestSchema.parse(request), extra));\n    });\n  }\n  removeRequestHandler(method) {\n    this._requestHandlers.delete(method);\n  }\n  assertCanSetRequestHandler(method) {\n    if (this._requestHandlers.has(method)) {\n      throw new Error(`A request handler for ${method} already exists, which would be overridden`);\n    }\n  }\n  setNotificationHandler(notificationSchema, handler) {\n    this._notificationHandlers.set(notificationSchema.shape.method.value, (notification) => Promise.resolve(handler(notificationSchema.parse(notification))));\n  }\n  removeNotificationHandler(method) {\n    this._notificationHandlers.delete(method);\n  }\n}\nfunction mergeCapabilities(base, additional) {\n  return Object.entries(additional).reduce((acc, [key, value]) => {\n    if (value && typeof value === \"object\") {\n      acc[key] = acc[key] ? { ...acc[key], ...value } : value;\n    } else {\n      acc[key] = value;\n    }\n    return acc;\n  }, { ...base });\n}\n\n// ../node_modules/@modelcontextprotocol/sdk/dist/esm/server/index.js\nvar import_ajv = __toESM(require_ajv(), 1);\n\nclass Server extends Protocol {\n  constructor(_serverInfo, options) {\n    var _a;\n    super(options);\n    this._serverInfo = _serverInfo;\n    this._capabilities = (_a = options === null || options === undefined ? undefined : options.capabilities) !== null && _a !== undefined ? _a : {};\n    this._instructions = options === null || options === undefined ? undefined : options.instructions;\n    this.setRequestHandler(InitializeRequestSchema, (request) => this._oninitialize(request));\n    this.setNotificationHandler(InitializedNotificationSchema, () => {\n      var _a2;\n      return (_a2 = this.oninitialized) === null || _a2 === undefined ? undefined : _a2.call(this);\n    });\n  }\n  registerCapabilities(capabilities) {\n    if (this.transport) {\n      throw new Error(\"Cannot register capabilities after connecting to transport\");\n    }\n    this._capabilities = mergeCapabilities(this._capabilities, capabilities);\n  }\n  assertCapabilityForMethod(method) {\n    var _a, _b, _c;\n    switch (method) {\n      case \"sampling/createMessage\":\n        if (!((_a = this._clientCapabilities) === null || _a === undefined ? undefined : _a.sampling)) {\n          throw new Error(`Client does not support sampling (required for ${method})`);\n        }\n        break;\n      case \"elicitation/create\":\n        if (!((_b = this._clientCapabilities) === null || _b === undefined ? undefined : _b.elicitation)) {\n          throw new Error(`Client does not support elicitation (required for ${method})`);\n        }\n        break;\n      case \"roots/list\":\n        if (!((_c = this._clientCapabilities) === null || _c === undefined ? undefined : _c.roots)) {\n          throw new Error(`Client does not support listing roots (required for ${method})`);\n        }\n        break;\n      case \"ping\":\n        break;\n    }\n  }\n  assertNotificationCapability(method) {\n    switch (method) {\n      case \"notifications/message\":\n        if (!this._capabilities.logging) {\n          throw new Error(`Server does not support logging (required for ${method})`);\n        }\n        break;\n      case \"notifications/resources/updated\":\n      case \"notifications/resources/list_changed\":\n        if (!this._capabilities.resources) {\n          throw new Error(`Server does not support notifying about resources (required for ${method})`);\n        }\n        break;\n      case \"notifications/tools/list_changed\":\n        if (!this._capabilities.tools) {\n          throw new Error(`Server does not support notifying of tool list changes (required for ${method})`);\n        }\n        break;\n      case \"notifications/prompts/list_changed\":\n        if (!this._capabilities.prompts) {\n          throw new Error(`Server does not support notifying of prompt list changes (required for ${method})`);\n        }\n        break;\n      case \"notifications/cancelled\":\n        break;\n      case \"notifications/progress\":\n        break;\n    }\n  }\n  assertRequestHandlerCapability(method) {\n    switch (method) {\n      case \"sampling/createMessage\":\n        if (!this._capabilities.sampling) {\n          throw new Error(`Server does not support sampling (required for ${method})`);\n        }\n        break;\n      case \"logging/setLevel\":\n        if (!this._capabilities.logging) {\n          throw new Error(`Server does not support logging (required for ${method})`);\n        }\n        break;\n      case \"prompts/get\":\n      case \"prompts/list\":\n        if (!this._capabilities.prompts) {\n          throw new Error(`Server does not support prompts (required for ${method})`);\n        }\n        break;\n      case \"resources/list\":\n      case \"resources/templates/list\":\n      case \"resources/read\":\n        if (!this._capabilities.resources) {\n          throw new Error(`Server does not support resources (required for ${method})`);\n        }\n        break;\n      case \"tools/call\":\n      case \"tools/list\":\n        if (!this._capabilities.tools) {\n          throw new Error(`Server does not support tools (required for ${method})`);\n        }\n        break;\n      case \"ping\":\n      case \"initialize\":\n        break;\n    }\n  }\n  async _oninitialize(request) {\n    const requestedVersion = request.params.protocolVersion;\n    this._clientCapabilities = request.params.capabilities;\n    this._clientVersion = request.params.clientInfo;\n    const protocolVersion = SUPPORTED_PROTOCOL_VERSIONS.includes(requestedVersion) ? requestedVersion : LATEST_PROTOCOL_VERSION;\n    return {\n      protocolVersion,\n      capabilities: this.getCapabilities(),\n      serverInfo: this._serverInfo,\n      ...this._instructions && { instructions: this._instructions }\n    };\n  }\n  getClientCapabilities() {\n    return this._clientCapabilities;\n  }\n  getClientVersion() {\n    return this._clientVersion;\n  }\n  getCapabilities() {\n    return this._capabilities;\n  }\n  async ping() {\n    return this.request({ method: \"ping\" }, EmptyResultSchema);\n  }\n  async createMessage(params, options) {\n    return this.request({ method: \"sampling/createMessage\", params }, CreateMessageResultSchema, options);\n  }\n  async elicitInput(params, options) {\n    const result = await this.request({ method: \"elicitation/create\", params }, ElicitResultSchema, options);\n    if (result.action === \"accept\" && result.content) {\n      try {\n        const ajv = new import_ajv.default;\n        const validate = ajv.compile(params.requestedSchema);\n        const isValid2 = validate(result.content);\n        if (!isValid2) {\n          throw new McpError(ErrorCode.InvalidParams, `Elicitation response content does not match requested schema: ${ajv.errorsText(validate.errors)}`);\n        }\n      } catch (error) {\n        if (error instanceof McpError) {\n          throw error;\n        }\n        throw new McpError(ErrorCode.InternalError, `Error validating elicitation response: ${error}`);\n      }\n    }\n    return result;\n  }\n  async listRoots(params, options) {\n    return this.request({ method: \"roots/list\", params }, ListRootsResultSchema, options);\n  }\n  async sendLoggingMessage(params) {\n    return this.notification({ method: \"notifications/message\", params });\n  }\n  async sendResourceUpdated(params) {\n    return this.notification({\n      method: \"notifications/resources/updated\",\n      params\n    });\n  }\n  async sendResourceListChanged() {\n    return this.notification({\n      method: \"notifications/resources/list_changed\"\n    });\n  }\n  async sendToolListChanged() {\n    return this.notification({ method: \"notifications/tools/list_changed\" });\n  }\n  async sendPromptListChanged() {\n    return this.notification({ method: \"notifications/prompts/list_changed\" });\n  }\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/Options.js\nvar ignoreOverride = Symbol(\"Let zodToJsonSchema decide on which parser to use\");\nvar defaultOptions = {\n  name: undefined,\n  $refStrategy: \"root\",\n  basePath: [\"#\"],\n  effectStrategy: \"input\",\n  pipeStrategy: \"all\",\n  dateStrategy: \"format:date-time\",\n  mapStrategy: \"entries\",\n  removeAdditionalStrategy: \"passthrough\",\n  allowedAdditionalProperties: true,\n  rejectedAdditionalProperties: false,\n  definitionPath: \"definitions\",\n  target: \"jsonSchema7\",\n  strictUnions: false,\n  definitions: {},\n  errorMessages: false,\n  markdownDescription: false,\n  patternStrategy: \"escape\",\n  applyRegexFlags: false,\n  emailStrategy: \"format:email\",\n  base64Strategy: \"contentEncoding:base64\",\n  nameStrategy: \"ref\"\n};\nvar getDefaultOptions = (options) => typeof options === \"string\" ? {\n  ...defaultOptions,\n  name: options\n} : {\n  ...defaultOptions,\n  ...options\n};\n// ../node_modules/zod-to-json-schema/dist/esm/Refs.js\nvar getRefs = (options) => {\n  const _options = getDefaultOptions(options);\n  const currentPath = _options.name !== undefined ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;\n  return {\n    ..._options,\n    currentPath,\n    propertyPath: undefined,\n    seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [\n      def._def,\n      {\n        def: def._def,\n        path: [..._options.basePath, _options.definitionPath, name],\n        jsonSchema: undefined\n      }\n    ]))\n  };\n};\n// ../node_modules/zod-to-json-schema/dist/esm/errorMessages.js\nfunction addErrorMessage(res, key, errorMessage, refs) {\n  if (!refs?.errorMessages)\n    return;\n  if (errorMessage) {\n    res.errorMessage = {\n      ...res.errorMessage,\n      [key]: errorMessage\n    };\n  }\n}\nfunction setResponseValueAndErrors(res, key, value, errorMessage, refs) {\n  res[key] = value;\n  addErrorMessage(res, key, errorMessage, refs);\n}\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/any.js\nfunction parseAnyDef() {\n  return {};\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/array.js\nfunction parseArrayDef(def, refs) {\n  const res = {\n    type: \"array\"\n  };\n  if (def.type?._def && def.type?._def?.typeName !== ZodFirstPartyTypeKind.ZodAny) {\n    res.items = parseDef(def.type._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"items\"]\n    });\n  }\n  if (def.minLength) {\n    setResponseValueAndErrors(res, \"minItems\", def.minLength.value, def.minLength.message, refs);\n  }\n  if (def.maxLength) {\n    setResponseValueAndErrors(res, \"maxItems\", def.maxLength.value, def.maxLength.message, refs);\n  }\n  if (def.exactLength) {\n    setResponseValueAndErrors(res, \"minItems\", def.exactLength.value, def.exactLength.message, refs);\n    setResponseValueAndErrors(res, \"maxItems\", def.exactLength.value, def.exactLength.message, refs);\n  }\n  return res;\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js\nfunction parseBigintDef(def, refs) {\n  const res = {\n    type: \"integer\",\n    format: \"int64\"\n  };\n  if (!def.checks)\n    return res;\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"min\":\n        if (refs.target === \"jsonSchema7\") {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, \"exclusiveMinimum\", check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMinimum = true;\n          }\n          setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n        }\n        break;\n      case \"max\":\n        if (refs.target === \"jsonSchema7\") {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, \"exclusiveMaximum\", check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMaximum = true;\n          }\n          setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n        }\n        break;\n      case \"multipleOf\":\n        setResponseValueAndErrors(res, \"multipleOf\", check.value, check.message, refs);\n        break;\n    }\n  }\n  return res;\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js\nfunction parseBooleanDef() {\n  return {\n    type: \"boolean\"\n  };\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/branded.js\nfunction parseBrandedDef(_def, refs) {\n  return parseDef(_def.type._def, refs);\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/catch.js\nvar parseCatchDef = (def, refs) => {\n  return parseDef(def.innerType._def, refs);\n};\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/date.js\nfunction parseDateDef(def, refs, overrideDateStrategy) {\n  const strategy = overrideDateStrategy ?? refs.dateStrategy;\n  if (Array.isArray(strategy)) {\n    return {\n      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))\n    };\n  }\n  switch (strategy) {\n    case \"string\":\n    case \"format:date-time\":\n      return {\n        type: \"string\",\n        format: \"date-time\"\n      };\n    case \"format:date\":\n      return {\n        type: \"string\",\n        format: \"date\"\n      };\n    case \"integer\":\n      return integerDateParser(def, refs);\n  }\n}\nvar integerDateParser = (def, refs) => {\n  const res = {\n    type: \"integer\",\n    format: \"unix-time\"\n  };\n  if (refs.target === \"openApi3\") {\n    return res;\n  }\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"min\":\n        setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n        break;\n      case \"max\":\n        setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n        break;\n    }\n  }\n  return res;\n};\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/default.js\nfunction parseDefaultDef(_def, refs) {\n  return {\n    ...parseDef(_def.innerType._def, refs),\n    default: _def.defaultValue()\n  };\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/effects.js\nfunction parseEffectsDef(_def, refs) {\n  return refs.effectStrategy === \"input\" ? parseDef(_def.schema._def, refs) : {};\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/enum.js\nfunction parseEnumDef(def) {\n  return {\n    type: \"string\",\n    enum: Array.from(def.values)\n  };\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js\nvar isJsonSchema7AllOfType = (type) => {\n  if (\"type\" in type && type.type === \"string\")\n    return false;\n  return \"allOf\" in type;\n};\nfunction parseIntersectionDef(def, refs) {\n  const allOf = [\n    parseDef(def.left._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"allOf\", \"0\"]\n    }),\n    parseDef(def.right._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"allOf\", \"1\"]\n    })\n  ].filter((x) => !!x);\n  let unevaluatedProperties = refs.target === \"jsonSchema2019-09\" ? { unevaluatedProperties: false } : undefined;\n  const mergedAllOf = [];\n  allOf.forEach((schema) => {\n    if (isJsonSchema7AllOfType(schema)) {\n      mergedAllOf.push(...schema.allOf);\n      if (schema.unevaluatedProperties === undefined) {\n        unevaluatedProperties = undefined;\n      }\n    } else {\n      let nestedSchema = schema;\n      if (\"additionalProperties\" in schema && schema.additionalProperties === false) {\n        const { additionalProperties, ...rest } = schema;\n        nestedSchema = rest;\n      } else {\n        unevaluatedProperties = undefined;\n      }\n      mergedAllOf.push(nestedSchema);\n    }\n  });\n  return mergedAllOf.length ? {\n    allOf: mergedAllOf,\n    ...unevaluatedProperties\n  } : undefined;\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/literal.js\nfunction parseLiteralDef(def, refs) {\n  const parsedType = typeof def.value;\n  if (parsedType !== \"bigint\" && parsedType !== \"number\" && parsedType !== \"boolean\" && parsedType !== \"string\") {\n    return {\n      type: Array.isArray(def.value) ? \"array\" : \"object\"\n    };\n  }\n  if (refs.target === \"openApi3\") {\n    return {\n      type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n      enum: [def.value]\n    };\n  }\n  return {\n    type: parsedType === \"bigint\" ? \"integer\" : parsedType,\n    const: def.value\n  };\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/string.js\nvar emojiRegex2 = undefined;\nvar zodPatterns = {\n  cuid: /^[cC][^\\s-]{8,}$/,\n  cuid2: /^[0-9a-z]+$/,\n  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,\n  email: /^(?!\\.)(?!.*\\.\\.)([a-zA-Z0-9_'+\\-\\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\\-]*\\.)+[a-zA-Z]{2,}$/,\n  emoji: () => {\n    if (emojiRegex2 === undefined) {\n      emojiRegex2 = RegExp(\"^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$\", \"u\");\n    }\n    return emojiRegex2;\n  },\n  uuid: /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/,\n  ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,\n  ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/,\n  ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,\n  ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,\n  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,\n  base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,\n  nanoid: /^[a-zA-Z0-9_-]{21}$/,\n  jwt: /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/\n};\nfunction parseStringDef(def, refs) {\n  const res = {\n    type: \"string\"\n  };\n  if (def.checks) {\n    for (const check of def.checks) {\n      switch (check.kind) {\n        case \"min\":\n          setResponseValueAndErrors(res, \"minLength\", typeof res.minLength === \"number\" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);\n          break;\n        case \"max\":\n          setResponseValueAndErrors(res, \"maxLength\", typeof res.maxLength === \"number\" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);\n          break;\n        case \"email\":\n          switch (refs.emailStrategy) {\n            case \"format:email\":\n              addFormat(res, \"email\", check.message, refs);\n              break;\n            case \"format:idn-email\":\n              addFormat(res, \"idn-email\", check.message, refs);\n              break;\n            case \"pattern:zod\":\n              addPattern(res, zodPatterns.email, check.message, refs);\n              break;\n          }\n          break;\n        case \"url\":\n          addFormat(res, \"uri\", check.message, refs);\n          break;\n        case \"uuid\":\n          addFormat(res, \"uuid\", check.message, refs);\n          break;\n        case \"regex\":\n          addPattern(res, check.regex, check.message, refs);\n          break;\n        case \"cuid\":\n          addPattern(res, zodPatterns.cuid, check.message, refs);\n          break;\n        case \"cuid2\":\n          addPattern(res, zodPatterns.cuid2, check.message, refs);\n          break;\n        case \"startsWith\":\n          addPattern(res, RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`), check.message, refs);\n          break;\n        case \"endsWith\":\n          addPattern(res, RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`), check.message, refs);\n          break;\n        case \"datetime\":\n          addFormat(res, \"date-time\", check.message, refs);\n          break;\n        case \"date\":\n          addFormat(res, \"date\", check.message, refs);\n          break;\n        case \"time\":\n          addFormat(res, \"time\", check.message, refs);\n          break;\n        case \"duration\":\n          addFormat(res, \"duration\", check.message, refs);\n          break;\n        case \"length\":\n          setResponseValueAndErrors(res, \"minLength\", typeof res.minLength === \"number\" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);\n          setResponseValueAndErrors(res, \"maxLength\", typeof res.maxLength === \"number\" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);\n          break;\n        case \"includes\": {\n          addPattern(res, RegExp(escapeLiteralCheckValue(check.value, refs)), check.message, refs);\n          break;\n        }\n        case \"ip\": {\n          if (check.version !== \"v6\") {\n            addFormat(res, \"ipv4\", check.message, refs);\n          }\n          if (check.version !== \"v4\") {\n            addFormat(res, \"ipv6\", check.message, refs);\n          }\n          break;\n        }\n        case \"base64url\":\n          addPattern(res, zodPatterns.base64url, check.message, refs);\n          break;\n        case \"jwt\":\n          addPattern(res, zodPatterns.jwt, check.message, refs);\n          break;\n        case \"cidr\": {\n          if (check.version !== \"v6\") {\n            addPattern(res, zodPatterns.ipv4Cidr, check.message, refs);\n          }\n          if (check.version !== \"v4\") {\n            addPattern(res, zodPatterns.ipv6Cidr, check.message, refs);\n          }\n          break;\n        }\n        case \"emoji\":\n          addPattern(res, zodPatterns.emoji(), check.message, refs);\n          break;\n        case \"ulid\": {\n          addPattern(res, zodPatterns.ulid, check.message, refs);\n          break;\n        }\n        case \"base64\": {\n          switch (refs.base64Strategy) {\n            case \"format:binary\": {\n              addFormat(res, \"binary\", check.message, refs);\n              break;\n            }\n            case \"contentEncoding:base64\": {\n              setResponseValueAndErrors(res, \"contentEncoding\", \"base64\", check.message, refs);\n              break;\n            }\n            case \"pattern:zod\": {\n              addPattern(res, zodPatterns.base64, check.message, refs);\n              break;\n            }\n          }\n          break;\n        }\n        case \"nanoid\": {\n          addPattern(res, zodPatterns.nanoid, check.message, refs);\n        }\n        case \"toLowerCase\":\n        case \"toUpperCase\":\n        case \"trim\":\n          break;\n        default:\n          ((_) => {})(check);\n      }\n    }\n  }\n  return res;\n}\nfunction escapeLiteralCheckValue(literal, refs) {\n  return refs.patternStrategy === \"escape\" ? escapeNonAlphaNumeric(literal) : literal;\n}\nvar ALPHA_NUMERIC = new Set(\"ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789\");\nfunction escapeNonAlphaNumeric(source) {\n  let result = \"\";\n  for (let i = 0;i < source.length; i++) {\n    if (!ALPHA_NUMERIC.has(source[i])) {\n      result += \"\\\\\";\n    }\n    result += source[i];\n  }\n  return result;\n}\nfunction addFormat(schema, value, message, refs) {\n  if (schema.format || schema.anyOf?.some((x) => x.format)) {\n    if (!schema.anyOf) {\n      schema.anyOf = [];\n    }\n    if (schema.format) {\n      schema.anyOf.push({\n        format: schema.format,\n        ...schema.errorMessage && refs.errorMessages && {\n          errorMessage: { format: schema.errorMessage.format }\n        }\n      });\n      delete schema.format;\n      if (schema.errorMessage) {\n        delete schema.errorMessage.format;\n        if (Object.keys(schema.errorMessage).length === 0) {\n          delete schema.errorMessage;\n        }\n      }\n    }\n    schema.anyOf.push({\n      format: value,\n      ...message && refs.errorMessages && { errorMessage: { format: message } }\n    });\n  } else {\n    setResponseValueAndErrors(schema, \"format\", value, message, refs);\n  }\n}\nfunction addPattern(schema, regex, message, refs) {\n  if (schema.pattern || schema.allOf?.some((x) => x.pattern)) {\n    if (!schema.allOf) {\n      schema.allOf = [];\n    }\n    if (schema.pattern) {\n      schema.allOf.push({\n        pattern: schema.pattern,\n        ...schema.errorMessage && refs.errorMessages && {\n          errorMessage: { pattern: schema.errorMessage.pattern }\n        }\n      });\n      delete schema.pattern;\n      if (schema.errorMessage) {\n        delete schema.errorMessage.pattern;\n        if (Object.keys(schema.errorMessage).length === 0) {\n          delete schema.errorMessage;\n        }\n      }\n    }\n    schema.allOf.push({\n      pattern: stringifyRegExpWithFlags(regex, refs),\n      ...message && refs.errorMessages && { errorMessage: { pattern: message } }\n    });\n  } else {\n    setResponseValueAndErrors(schema, \"pattern\", stringifyRegExpWithFlags(regex, refs), message, refs);\n  }\n}\nfunction stringifyRegExpWithFlags(regex, refs) {\n  if (!refs.applyRegexFlags || !regex.flags) {\n    return regex.source;\n  }\n  const flags = {\n    i: regex.flags.includes(\"i\"),\n    m: regex.flags.includes(\"m\"),\n    s: regex.flags.includes(\"s\")\n  };\n  const source = flags.i ? regex.source.toLowerCase() : regex.source;\n  let pattern = \"\";\n  let isEscaped = false;\n  let inCharGroup = false;\n  let inCharRange = false;\n  for (let i = 0;i < source.length; i++) {\n    if (isEscaped) {\n      pattern += source[i];\n      isEscaped = false;\n      continue;\n    }\n    if (flags.i) {\n      if (inCharGroup) {\n        if (source[i].match(/[a-z]/)) {\n          if (inCharRange) {\n            pattern += source[i];\n            pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();\n            inCharRange = false;\n          } else if (source[i + 1] === \"-\" && source[i + 2]?.match(/[a-z]/)) {\n            pattern += source[i];\n            inCharRange = true;\n          } else {\n            pattern += `${source[i]}${source[i].toUpperCase()}`;\n          }\n          continue;\n        }\n      } else if (source[i].match(/[a-z]/)) {\n        pattern += `[${source[i]}${source[i].toUpperCase()}]`;\n        continue;\n      }\n    }\n    if (flags.m) {\n      if (source[i] === \"^\") {\n        pattern += `(^|(?<=[\\r\n]))`;\n        continue;\n      } else if (source[i] === \"$\") {\n        pattern += `($|(?=[\\r\n]))`;\n        continue;\n      }\n    }\n    if (flags.s && source[i] === \".\") {\n      pattern += inCharGroup ? `${source[i]}\\r\n` : `[${source[i]}\\r\n]`;\n      continue;\n    }\n    pattern += source[i];\n    if (source[i] === \"\\\\\") {\n      isEscaped = true;\n    } else if (inCharGroup && source[i] === \"]\") {\n      inCharGroup = false;\n    } else if (!inCharGroup && source[i] === \"[\") {\n      inCharGroup = true;\n    }\n  }\n  try {\n    new RegExp(pattern);\n  } catch {\n    console.warn(`Could not convert regex pattern at ${refs.currentPath.join(\"/\")} to a flag-independent form! Falling back to the flag-ignorant source`);\n    return regex.source;\n  }\n  return pattern;\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/record.js\nfunction parseRecordDef(def, refs) {\n  if (refs.target === \"openAi\") {\n    console.warn(\"Warning: OpenAI may not support records in schemas! Try an array of key-value pairs instead.\");\n  }\n  if (refs.target === \"openApi3\" && def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {\n    return {\n      type: \"object\",\n      required: def.keyType._def.values,\n      properties: def.keyType._def.values.reduce((acc, key) => ({\n        ...acc,\n        [key]: parseDef(def.valueType._def, {\n          ...refs,\n          currentPath: [...refs.currentPath, \"properties\", key]\n        }) ?? {}\n      }), {}),\n      additionalProperties: refs.rejectedAdditionalProperties\n    };\n  }\n  const schema = {\n    type: \"object\",\n    additionalProperties: parseDef(def.valueType._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"additionalProperties\"]\n    }) ?? refs.allowedAdditionalProperties\n  };\n  if (refs.target === \"openApi3\") {\n    return schema;\n  }\n  if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.checks?.length) {\n    const { type, ...keyType } = parseStringDef(def.keyType._def, refs);\n    return {\n      ...schema,\n      propertyNames: keyType\n    };\n  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {\n    return {\n      ...schema,\n      propertyNames: {\n        enum: def.keyType._def.values\n      }\n    };\n  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodBranded && def.keyType._def.type._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.type._def.checks?.length) {\n    const { type, ...keyType } = parseBrandedDef(def.keyType._def, refs);\n    return {\n      ...schema,\n      propertyNames: keyType\n    };\n  }\n  return schema;\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/map.js\nfunction parseMapDef(def, refs) {\n  if (refs.mapStrategy === \"record\") {\n    return parseRecordDef(def, refs);\n  }\n  const keys = parseDef(def.keyType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\", \"items\", \"0\"]\n  }) || {};\n  const values = parseDef(def.valueType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\", \"items\", \"1\"]\n  }) || {};\n  return {\n    type: \"array\",\n    maxItems: 125,\n    items: {\n      type: \"array\",\n      items: [keys, values],\n      minItems: 2,\n      maxItems: 2\n    }\n  };\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js\nfunction parseNativeEnumDef(def) {\n  const object = def.values;\n  const actualKeys = Object.keys(def.values).filter((key) => {\n    return typeof object[object[key]] !== \"number\";\n  });\n  const actualValues = actualKeys.map((key) => object[key]);\n  const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));\n  return {\n    type: parsedTypes.length === 1 ? parsedTypes[0] === \"string\" ? \"string\" : \"number\" : [\"string\", \"number\"],\n    enum: actualValues\n  };\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/never.js\nfunction parseNeverDef() {\n  return {\n    not: {}\n  };\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/null.js\nfunction parseNullDef(refs) {\n  return refs.target === \"openApi3\" ? {\n    enum: [\"null\"],\n    nullable: true\n  } : {\n    type: \"null\"\n  };\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/union.js\nvar primitiveMappings = {\n  ZodString: \"string\",\n  ZodNumber: \"number\",\n  ZodBigInt: \"integer\",\n  ZodBoolean: \"boolean\",\n  ZodNull: \"null\"\n};\nfunction parseUnionDef(def, refs) {\n  if (refs.target === \"openApi3\")\n    return asAnyOf(def, refs);\n  const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;\n  if (options.every((x) => (x._def.typeName in primitiveMappings) && (!x._def.checks || !x._def.checks.length))) {\n    const types2 = options.reduce((types3, x) => {\n      const type = primitiveMappings[x._def.typeName];\n      return type && !types3.includes(type) ? [...types3, type] : types3;\n    }, []);\n    return {\n      type: types2.length > 1 ? types2 : types2[0]\n    };\n  } else if (options.every((x) => x._def.typeName === \"ZodLiteral\" && !x.description)) {\n    const types2 = options.reduce((acc, x) => {\n      const type = typeof x._def.value;\n      switch (type) {\n        case \"string\":\n        case \"number\":\n        case \"boolean\":\n          return [...acc, type];\n        case \"bigint\":\n          return [...acc, \"integer\"];\n        case \"object\":\n          if (x._def.value === null)\n            return [...acc, \"null\"];\n        case \"symbol\":\n        case \"undefined\":\n        case \"function\":\n        default:\n          return acc;\n      }\n    }, []);\n    if (types2.length === options.length) {\n      const uniqueTypes = types2.filter((x, i, a) => a.indexOf(x) === i);\n      return {\n        type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],\n        enum: options.reduce((acc, x) => {\n          return acc.includes(x._def.value) ? acc : [...acc, x._def.value];\n        }, [])\n      };\n    }\n  } else if (options.every((x) => x._def.typeName === \"ZodEnum\")) {\n    return {\n      type: \"string\",\n      enum: options.reduce((acc, x) => [\n        ...acc,\n        ...x._def.values.filter((x2) => !acc.includes(x2))\n      ], [])\n    };\n  }\n  return asAnyOf(def, refs);\n}\nvar asAnyOf = (def, refs) => {\n  const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map((x, i) => parseDef(x._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"anyOf\", `${i}`]\n  })).filter((x) => !!x && (!refs.strictUnions || typeof x === \"object\" && Object.keys(x).length > 0));\n  return anyOf.length ? { anyOf } : undefined;\n};\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js\nfunction parseNullableDef(def, refs) {\n  if ([\"ZodString\", \"ZodNumber\", \"ZodBigInt\", \"ZodBoolean\", \"ZodNull\"].includes(def.innerType._def.typeName) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {\n    if (refs.target === \"openApi3\") {\n      return {\n        type: primitiveMappings[def.innerType._def.typeName],\n        nullable: true\n      };\n    }\n    return {\n      type: [\n        primitiveMappings[def.innerType._def.typeName],\n        \"null\"\n      ]\n    };\n  }\n  if (refs.target === \"openApi3\") {\n    const base2 = parseDef(def.innerType._def, {\n      ...refs,\n      currentPath: [...refs.currentPath]\n    });\n    if (base2 && \"$ref\" in base2)\n      return { allOf: [base2], nullable: true };\n    return base2 && { ...base2, nullable: true };\n  }\n  const base = parseDef(def.innerType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"anyOf\", \"0\"]\n  });\n  return base && { anyOf: [base, { type: \"null\" }] };\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/number.js\nfunction parseNumberDef(def, refs) {\n  const res = {\n    type: \"number\"\n  };\n  if (!def.checks)\n    return res;\n  for (const check of def.checks) {\n    switch (check.kind) {\n      case \"int\":\n        res.type = \"integer\";\n        addErrorMessage(res, \"type\", check.message, refs);\n        break;\n      case \"min\":\n        if (refs.target === \"jsonSchema7\") {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, \"exclusiveMinimum\", check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMinimum = true;\n          }\n          setResponseValueAndErrors(res, \"minimum\", check.value, check.message, refs);\n        }\n        break;\n      case \"max\":\n        if (refs.target === \"jsonSchema7\") {\n          if (check.inclusive) {\n            setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n          } else {\n            setResponseValueAndErrors(res, \"exclusiveMaximum\", check.value, check.message, refs);\n          }\n        } else {\n          if (!check.inclusive) {\n            res.exclusiveMaximum = true;\n          }\n          setResponseValueAndErrors(res, \"maximum\", check.value, check.message, refs);\n        }\n        break;\n      case \"multipleOf\":\n        setResponseValueAndErrors(res, \"multipleOf\", check.value, check.message, refs);\n        break;\n    }\n  }\n  return res;\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/object.js\nfunction parseObjectDef(def, refs) {\n  const forceOptionalIntoNullable = refs.target === \"openAi\";\n  const result = {\n    type: \"object\",\n    properties: {}\n  };\n  const required = [];\n  const shape = def.shape();\n  for (const propName in shape) {\n    let propDef = shape[propName];\n    if (propDef === undefined || propDef._def === undefined) {\n      continue;\n    }\n    let propOptional = safeIsOptional(propDef);\n    if (propOptional && forceOptionalIntoNullable) {\n      if (propDef instanceof ZodOptional) {\n        propDef = propDef._def.innerType;\n      }\n      if (!propDef.isNullable()) {\n        propDef = propDef.nullable();\n      }\n      propOptional = false;\n    }\n    const parsedDef = parseDef(propDef._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"properties\", propName],\n      propertyPath: [...refs.currentPath, \"properties\", propName]\n    });\n    if (parsedDef === undefined) {\n      continue;\n    }\n    result.properties[propName] = parsedDef;\n    if (!propOptional) {\n      required.push(propName);\n    }\n  }\n  if (required.length) {\n    result.required = required;\n  }\n  const additionalProperties = decideAdditionalProperties(def, refs);\n  if (additionalProperties !== undefined) {\n    result.additionalProperties = additionalProperties;\n  }\n  return result;\n}\nfunction decideAdditionalProperties(def, refs) {\n  if (def.catchall._def.typeName !== \"ZodNever\") {\n    return parseDef(def.catchall._def, {\n      ...refs,\n      currentPath: [...refs.currentPath, \"additionalProperties\"]\n    });\n  }\n  switch (def.unknownKeys) {\n    case \"passthrough\":\n      return refs.allowedAdditionalProperties;\n    case \"strict\":\n      return refs.rejectedAdditionalProperties;\n    case \"strip\":\n      return refs.removeAdditionalStrategy === \"strict\" ? refs.allowedAdditionalProperties : refs.rejectedAdditionalProperties;\n  }\n}\nfunction safeIsOptional(schema) {\n  try {\n    return schema.isOptional();\n  } catch {\n    return true;\n  }\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/optional.js\nvar parseOptionalDef = (def, refs) => {\n  if (refs.currentPath.toString() === refs.propertyPath?.toString()) {\n    return parseDef(def.innerType._def, refs);\n  }\n  const innerSchema = parseDef(def.innerType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"anyOf\", \"1\"]\n  });\n  return innerSchema ? {\n    anyOf: [\n      {\n        not: {}\n      },\n      innerSchema\n    ]\n  } : {};\n};\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js\nvar parsePipelineDef = (def, refs) => {\n  if (refs.pipeStrategy === \"input\") {\n    return parseDef(def.in._def, refs);\n  } else if (refs.pipeStrategy === \"output\") {\n    return parseDef(def.out._def, refs);\n  }\n  const a = parseDef(def.in._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"allOf\", \"0\"]\n  });\n  const b = parseDef(def.out._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"allOf\", a ? \"1\" : \"0\"]\n  });\n  return {\n    allOf: [a, b].filter((x) => x !== undefined)\n  };\n};\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/promise.js\nfunction parsePromiseDef(def, refs) {\n  return parseDef(def.type._def, refs);\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/set.js\nfunction parseSetDef(def, refs) {\n  const items = parseDef(def.valueType._def, {\n    ...refs,\n    currentPath: [...refs.currentPath, \"items\"]\n  });\n  const schema = {\n    type: \"array\",\n    uniqueItems: true,\n    items\n  };\n  if (def.minSize) {\n    setResponseValueAndErrors(schema, \"minItems\", def.minSize.value, def.minSize.message, refs);\n  }\n  if (def.maxSize) {\n    setResponseValueAndErrors(schema, \"maxItems\", def.maxSize.value, def.maxSize.message, refs);\n  }\n  return schema;\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js\nfunction parseTupleDef(def, refs) {\n  if (def.rest) {\n    return {\n      type: \"array\",\n      minItems: def.items.length,\n      items: def.items.map((x, i) => parseDef(x._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"items\", `${i}`]\n      })).reduce((acc, x) => x === undefined ? acc : [...acc, x], []),\n      additionalItems: parseDef(def.rest._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"additionalItems\"]\n      })\n    };\n  } else {\n    return {\n      type: \"array\",\n      minItems: def.items.length,\n      maxItems: def.items.length,\n      items: def.items.map((x, i) => parseDef(x._def, {\n        ...refs,\n        currentPath: [...refs.currentPath, \"items\", `${i}`]\n      })).reduce((acc, x) => x === undefined ? acc : [...acc, x], [])\n    };\n  }\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js\nfunction parseUndefinedDef() {\n  return {\n    not: {}\n  };\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js\nfunction parseUnknownDef() {\n  return {};\n}\n\n// ../node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js\nvar parseReadonlyDef = (def, refs) => {\n  return parseDef(def.innerType._def, refs);\n};\n\n// ../node_modules/zod-to-json-schema/dist/esm/selectParser.js\nvar selectParser = (def, typeName, refs) => {\n  switch (typeName) {\n    case ZodFirstPartyTypeKind.ZodString:\n      return parseStringDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodNumber:\n      return parseNumberDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodObject:\n      return parseObjectDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodBigInt:\n      return parseBigintDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodBoolean:\n      return parseBooleanDef();\n    case ZodFirstPartyTypeKind.ZodDate:\n      return parseDateDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodUndefined:\n      return parseUndefinedDef();\n    case ZodFirstPartyTypeKind.ZodNull:\n      return parseNullDef(refs);\n    case ZodFirstPartyTypeKind.ZodArray:\n      return parseArrayDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodUnion:\n    case ZodFirstPartyTypeKind.ZodDiscriminatedUnion:\n      return parseUnionDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodIntersection:\n      return parseIntersectionDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodTuple:\n      return parseTupleDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodRecord:\n      return parseRecordDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodLiteral:\n      return parseLiteralDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodEnum:\n      return parseEnumDef(def);\n    case ZodFirstPartyTypeKind.ZodNativeEnum:\n      return parseNativeEnumDef(def);\n    case ZodFirstPartyTypeKind.ZodNullable:\n      return parseNullableDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodOptional:\n      return parseOptionalDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodMap:\n      return parseMapDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodSet:\n      return parseSetDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodLazy:\n      return () => def.getter()._def;\n    case ZodFirstPartyTypeKind.ZodPromise:\n      return parsePromiseDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodNaN:\n    case ZodFirstPartyTypeKind.ZodNever:\n      return parseNeverDef();\n    case ZodFirstPartyTypeKind.ZodEffects:\n      return parseEffectsDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodAny:\n      return parseAnyDef();\n    case ZodFirstPartyTypeKind.ZodUnknown:\n      return parseUnknownDef();\n    case ZodFirstPartyTypeKind.ZodDefault:\n      return parseDefaultDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodBranded:\n      return parseBrandedDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodReadonly:\n      return parseReadonlyDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodCatch:\n      return parseCatchDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodPipeline:\n      return parsePipelineDef(def, refs);\n    case ZodFirstPartyTypeKind.ZodFunction:\n    case ZodFirstPartyTypeKind.ZodVoid:\n    case ZodFirstPartyTypeKind.ZodSymbol:\n      return;\n    default:\n      return ((_) => {\n        return;\n      })(typeName);\n  }\n};\n\n// ../node_modules/zod-to-json-schema/dist/esm/parseDef.js\nfunction parseDef(def, refs, forceResolution = false) {\n  const seenItem = refs.seen.get(def);\n  if (refs.override) {\n    const overrideResult = refs.override?.(def, refs, seenItem, forceResolution);\n    if (overrideResult !== ignoreOverride) {\n      return overrideResult;\n    }\n  }\n  if (seenItem && !forceResolution) {\n    const seenSchema = get$ref(seenItem, refs);\n    if (seenSchema !== undefined) {\n      return seenSchema;\n    }\n  }\n  const newItem = { def, path: refs.currentPath, jsonSchema: undefined };\n  refs.seen.set(def, newItem);\n  const jsonSchemaOrGetter = selectParser(def, def.typeName, refs);\n  const jsonSchema = typeof jsonSchemaOrGetter === \"function\" ? parseDef(jsonSchemaOrGetter(), refs) : jsonSchemaOrGetter;\n  if (jsonSchema) {\n    addMeta(def, refs, jsonSchema);\n  }\n  if (refs.postProcess) {\n    const postProcessResult = refs.postProcess(jsonSchema, def, refs);\n    newItem.jsonSchema = jsonSchema;\n    return postProcessResult;\n  }\n  newItem.jsonSchema = jsonSchema;\n  return jsonSchema;\n}\nvar get$ref = (item, refs) => {\n  switch (refs.$refStrategy) {\n    case \"root\":\n      return { $ref: item.path.join(\"/\") };\n    case \"relative\":\n      return { $ref: getRelativePath(refs.currentPath, item.path) };\n    case \"none\":\n    case \"seen\": {\n      if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {\n        console.warn(`Recursive reference detected at ${refs.currentPath.join(\"/\")}! Defaulting to any`);\n        return {};\n      }\n      return refs.$refStrategy === \"seen\" ? {} : undefined;\n    }\n  }\n};\nvar getRelativePath = (pathA, pathB) => {\n  let i = 0;\n  for (;i < pathA.length && i < pathB.length; i++) {\n    if (pathA[i] !== pathB[i])\n      break;\n  }\n  return [(pathA.length - i).toString(), ...pathB.slice(i)].join(\"/\");\n};\nvar addMeta = (def, refs, jsonSchema) => {\n  if (def.description) {\n    jsonSchema.description = def.description;\n    if (refs.markdownDescription) {\n      jsonSchema.markdownDescription = def.description;\n    }\n  }\n  return jsonSchema;\n};\n// ../node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js\nvar zodToJsonSchema = (schema, options) => {\n  const refs = getRefs(options);\n  const definitions = typeof options === \"object\" && options.definitions ? Object.entries(options.definitions).reduce((acc, [name2, schema2]) => ({\n    ...acc,\n    [name2]: parseDef(schema2._def, {\n      ...refs,\n      currentPath: [...refs.basePath, refs.definitionPath, name2]\n    }, true) ?? {}\n  }), {}) : undefined;\n  const name = typeof options === \"string\" ? options : options?.nameStrategy === \"title\" ? undefined : options?.name;\n  const main = parseDef(schema._def, name === undefined ? refs : {\n    ...refs,\n    currentPath: [...refs.basePath, refs.definitionPath, name]\n  }, false) ?? {};\n  const title = typeof options === \"object\" && options.name !== undefined && options.nameStrategy === \"title\" ? options.name : undefined;\n  if (title !== undefined) {\n    main.title = title;\n  }\n  const combined = name === undefined ? definitions ? {\n    ...main,\n    [refs.definitionPath]: definitions\n  } : main : {\n    $ref: [\n      ...refs.$refStrategy === \"relative\" ? [] : refs.basePath,\n      refs.definitionPath,\n      name\n    ].join(\"/\"),\n    [refs.definitionPath]: {\n      ...definitions,\n      [name]: main\n    }\n  };\n  if (refs.target === \"jsonSchema7\") {\n    combined.$schema = \"http://json-schema.org/draft-07/schema#\";\n  } else if (refs.target === \"jsonSchema2019-09\" || refs.target === \"openAi\") {\n    combined.$schema = \"https://json-schema.org/draft/2019-09/schema#\";\n  }\n  if (refs.target === \"openAi\" && ((\"anyOf\" in combined) || (\"oneOf\" in combined) || (\"allOf\" in combined) || (\"type\" in combined) && Array.isArray(combined.type))) {\n    console.warn(\"Warning: OpenAI may not support schemas with unions as roots! Try wrapping it in an object property.\");\n  }\n  return combined;\n};\n// ../node_modules/@modelcontextprotocol/sdk/dist/esm/server/completable.js\nvar McpZodTypeKind;\n(function(McpZodTypeKind2) {\n  McpZodTypeKind2[\"Completable\"] = \"McpCompletable\";\n})(McpZodTypeKind || (McpZodTypeKind = {}));\n\nclass Completable extends ZodType {\n  _parse(input) {\n    const { ctx } = this._processInputParams(input);\n    const data = ctx.data;\n    return this._def.type._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n  unwrap() {\n    return this._def.type;\n  }\n}\nCompletable.create = (type, params) => {\n  return new Completable({\n    type,\n    typeName: McpZodTypeKind.Completable,\n    complete: params.complete,\n    ...processCreateParams2(params)\n  });\n};\nfunction processCreateParams2(params) {\n  if (!params)\n    return {};\n  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;\n  if (errorMap2 && (invalid_type_error || required_error)) {\n    throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n  }\n  if (errorMap2)\n    return { errorMap: errorMap2, description };\n  const customMap = (iss, ctx) => {\n    var _a, _b;\n    const { message } = params;\n    if (iss.code === \"invalid_enum_value\") {\n      return { message: message !== null && message !== undefined ? message : ctx.defaultError };\n    }\n    if (typeof ctx.data === \"undefined\") {\n      return { message: (_a = message !== null && message !== undefined ? message : required_error) !== null && _a !== undefined ? _a : ctx.defaultError };\n    }\n    if (iss.code !== \"invalid_type\")\n      return { message: ctx.defaultError };\n    return { message: (_b = message !== null && message !== undefined ? message : invalid_type_error) !== null && _b !== undefined ? _b : ctx.defaultError };\n  };\n  return { errorMap: customMap, description };\n}\n\n// ../node_modules/@modelcontextprotocol/sdk/dist/esm/server/mcp.js\nclass McpServer {\n  constructor(serverInfo, options) {\n    this._registeredResources = {};\n    this._registeredResourceTemplates = {};\n    this._registeredTools = {};\n    this._registeredPrompts = {};\n    this._toolHandlersInitialized = false;\n    this._completionHandlerInitialized = false;\n    this._resourceHandlersInitialized = false;\n    this._promptHandlersInitialized = false;\n    this.server = new Server(serverInfo, options);\n  }\n  async connect(transport) {\n    return await this.server.connect(transport);\n  }\n  async close() {\n    await this.server.close();\n  }\n  setToolRequestHandlers() {\n    if (this._toolHandlersInitialized) {\n      return;\n    }\n    this.server.assertCanSetRequestHandler(ListToolsRequestSchema.shape.method.value);\n    this.server.assertCanSetRequestHandler(CallToolRequestSchema.shape.method.value);\n    this.server.registerCapabilities({\n      tools: {\n        listChanged: true\n      }\n    });\n    this.server.setRequestHandler(ListToolsRequestSchema, () => ({\n      tools: Object.entries(this._registeredTools).filter(([, tool]) => tool.enabled).map(([name, tool]) => {\n        const toolDefinition = {\n          name,\n          title: tool.title,\n          description: tool.description,\n          inputSchema: tool.inputSchema ? zodToJsonSchema(tool.inputSchema, {\n            strictUnions: true\n          }) : EMPTY_OBJECT_JSON_SCHEMA,\n          annotations: tool.annotations\n        };\n        if (tool.outputSchema) {\n          toolDefinition.outputSchema = zodToJsonSchema(tool.outputSchema, { strictUnions: true });\n        }\n        return toolDefinition;\n      })\n    }));\n    this.server.setRequestHandler(CallToolRequestSchema, async (request, extra) => {\n      const tool = this._registeredTools[request.params.name];\n      if (!tool) {\n        throw new McpError(ErrorCode.InvalidParams, `Tool ${request.params.name} not found`);\n      }\n      if (!tool.enabled) {\n        throw new McpError(ErrorCode.InvalidParams, `Tool ${request.params.name} disabled`);\n      }\n      let result;\n      if (tool.inputSchema) {\n        const parseResult = await tool.inputSchema.safeParseAsync(request.params.arguments);\n        if (!parseResult.success) {\n          throw new McpError(ErrorCode.InvalidParams, `Invalid arguments for tool ${request.params.name}: ${parseResult.error.message}`);\n        }\n        const args = parseResult.data;\n        const cb = tool.callback;\n        try {\n          result = await Promise.resolve(cb(args, extra));\n        } catch (error) {\n          result = {\n            content: [\n              {\n                type: \"text\",\n                text: error instanceof Error ? error.message : String(error)\n              }\n            ],\n            isError: true\n          };\n        }\n      } else {\n        const cb = tool.callback;\n        try {\n          result = await Promise.resolve(cb(extra));\n        } catch (error) {\n          result = {\n            content: [\n              {\n                type: \"text\",\n                text: error instanceof Error ? error.message : String(error)\n              }\n            ],\n            isError: true\n          };\n        }\n      }\n      if (tool.outputSchema && !result.isError) {\n        if (!result.structuredContent) {\n          throw new McpError(ErrorCode.InvalidParams, `Tool ${request.params.name} has an output schema but no structured content was provided`);\n        }\n        const parseResult = await tool.outputSchema.safeParseAsync(result.structuredContent);\n        if (!parseResult.success) {\n          throw new McpError(ErrorCode.InvalidParams, `Invalid structured content for tool ${request.params.name}: ${parseResult.error.message}`);\n        }\n      }\n      return result;\n    });\n    this._toolHandlersInitialized = true;\n  }\n  setCompletionRequestHandler() {\n    if (this._completionHandlerInitialized) {\n      return;\n    }\n    this.server.assertCanSetRequestHandler(CompleteRequestSchema.shape.method.value);\n    this.server.registerCapabilities({\n      completions: {}\n    });\n    this.server.setRequestHandler(CompleteRequestSchema, async (request) => {\n      switch (request.params.ref.type) {\n        case \"ref/prompt\":\n          return this.handlePromptCompletion(request, request.params.ref);\n        case \"ref/resource\":\n          return this.handleResourceCompletion(request, request.params.ref);\n        default:\n          throw new McpError(ErrorCode.InvalidParams, `Invalid completion reference: ${request.params.ref}`);\n      }\n    });\n    this._completionHandlerInitialized = true;\n  }\n  async handlePromptCompletion(request, ref) {\n    const prompt = this._registeredPrompts[ref.name];\n    if (!prompt) {\n      throw new McpError(ErrorCode.InvalidParams, `Prompt ${ref.name} not found`);\n    }\n    if (!prompt.enabled) {\n      throw new McpError(ErrorCode.InvalidParams, `Prompt ${ref.name} disabled`);\n    }\n    if (!prompt.argsSchema) {\n      return EMPTY_COMPLETION_RESULT;\n    }\n    const field = prompt.argsSchema.shape[request.params.argument.name];\n    if (!(field instanceof Completable)) {\n      return EMPTY_COMPLETION_RESULT;\n    }\n    const def = field._def;\n    const suggestions = await def.complete(request.params.argument.value, request.params.context);\n    return createCompletionResult(suggestions);\n  }\n  async handleResourceCompletion(request, ref) {\n    const template = Object.values(this._registeredResourceTemplates).find((t) => t.resourceTemplate.uriTemplate.toString() === ref.uri);\n    if (!template) {\n      if (this._registeredResources[ref.uri]) {\n        return EMPTY_COMPLETION_RESULT;\n      }\n      throw new McpError(ErrorCode.InvalidParams, `Resource template ${request.params.ref.uri} not found`);\n    }\n    const completer = template.resourceTemplate.completeCallback(request.params.argument.name);\n    if (!completer) {\n      return EMPTY_COMPLETION_RESULT;\n    }\n    const suggestions = await completer(request.params.argument.value, request.params.context);\n    return createCompletionResult(suggestions);\n  }\n  setResourceRequestHandlers() {\n    if (this._resourceHandlersInitialized) {\n      return;\n    }\n    this.server.assertCanSetRequestHandler(ListResourcesRequestSchema.shape.method.value);\n    this.server.assertCanSetRequestHandler(ListResourceTemplatesRequestSchema.shape.method.value);\n    this.server.assertCanSetRequestHandler(ReadResourceRequestSchema.shape.method.value);\n    this.server.registerCapabilities({\n      resources: {\n        listChanged: true\n      }\n    });\n    this.server.setRequestHandler(ListResourcesRequestSchema, async (request, extra) => {\n      const resources = Object.entries(this._registeredResources).filter(([_, resource]) => resource.enabled).map(([uri, resource]) => ({\n        uri,\n        name: resource.name,\n        ...resource.metadata\n      }));\n      const templateResources = [];\n      for (const template of Object.values(this._registeredResourceTemplates)) {\n        if (!template.resourceTemplate.listCallback) {\n          continue;\n        }\n        const result = await template.resourceTemplate.listCallback(extra);\n        for (const resource of result.resources) {\n          templateResources.push({\n            ...template.metadata,\n            ...resource\n          });\n        }\n      }\n      return { resources: [...resources, ...templateResources] };\n    });\n    this.server.setRequestHandler(ListResourceTemplatesRequestSchema, async () => {\n      const resourceTemplates = Object.entries(this._registeredResourceTemplates).map(([name, template]) => ({\n        name,\n        uriTemplate: template.resourceTemplate.uriTemplate.toString(),\n        ...template.metadata\n      }));\n      return { resourceTemplates };\n    });\n    this.server.setRequestHandler(ReadResourceRequestSchema, async (request, extra) => {\n      const uri = new URL(request.params.uri);\n      const resource = this._registeredResources[uri.toString()];\n      if (resource) {\n        if (!resource.enabled) {\n          throw new McpError(ErrorCode.InvalidParams, `Resource ${uri} disabled`);\n        }\n        return resource.readCallback(uri, extra);\n      }\n      for (const template of Object.values(this._registeredResourceTemplates)) {\n        const variables = template.resourceTemplate.uriTemplate.match(uri.toString());\n        if (variables) {\n          return template.readCallback(uri, variables, extra);\n        }\n      }\n      throw new McpError(ErrorCode.InvalidParams, `Resource ${uri} not found`);\n    });\n    this.setCompletionRequestHandler();\n    this._resourceHandlersInitialized = true;\n  }\n  setPromptRequestHandlers() {\n    if (this._promptHandlersInitialized) {\n      return;\n    }\n    this.server.assertCanSetRequestHandler(ListPromptsRequestSchema.shape.method.value);\n    this.server.assertCanSetRequestHandler(GetPromptRequestSchema.shape.method.value);\n    this.server.registerCapabilities({\n      prompts: {\n        listChanged: true\n      }\n    });\n    this.server.setRequestHandler(ListPromptsRequestSchema, () => ({\n      prompts: Object.entries(this._registeredPrompts).filter(([, prompt]) => prompt.enabled).map(([name, prompt]) => {\n        return {\n          name,\n          title: prompt.title,\n          description: prompt.description,\n          arguments: prompt.argsSchema ? promptArgumentsFromSchema(prompt.argsSchema) : undefined\n        };\n      })\n    }));\n    this.server.setRequestHandler(GetPromptRequestSchema, async (request, extra) => {\n      const prompt = this._registeredPrompts[request.params.name];\n      if (!prompt) {\n        throw new McpError(ErrorCode.InvalidParams, `Prompt ${request.params.name} not found`);\n      }\n      if (!prompt.enabled) {\n        throw new McpError(ErrorCode.InvalidParams, `Prompt ${request.params.name} disabled`);\n      }\n      if (prompt.argsSchema) {\n        const parseResult = await prompt.argsSchema.safeParseAsync(request.params.arguments);\n        if (!parseResult.success) {\n          throw new McpError(ErrorCode.InvalidParams, `Invalid arguments for prompt ${request.params.name}: ${parseResult.error.message}`);\n        }\n        const args = parseResult.data;\n        const cb = prompt.callback;\n        return await Promise.resolve(cb(args, extra));\n      } else {\n        const cb = prompt.callback;\n        return await Promise.resolve(cb(extra));\n      }\n    });\n    this.setCompletionRequestHandler();\n    this._promptHandlersInitialized = true;\n  }\n  resource(name, uriOrTemplate, ...rest) {\n    let metadata;\n    if (typeof rest[0] === \"object\") {\n      metadata = rest.shift();\n    }\n    const readCallback = rest[0];\n    if (typeof uriOrTemplate === \"string\") {\n      if (this._registeredResources[uriOrTemplate]) {\n        throw new Error(`Resource ${uriOrTemplate} is already registered`);\n      }\n      const registeredResource = this._createRegisteredResource(name, undefined, uriOrTemplate, metadata, readCallback);\n      this.setResourceRequestHandlers();\n      this.sendResourceListChanged();\n      return registeredResource;\n    } else {\n      if (this._registeredResourceTemplates[name]) {\n        throw new Error(`Resource template ${name} is already registered`);\n      }\n      const registeredResourceTemplate = this._createRegisteredResourceTemplate(name, undefined, uriOrTemplate, metadata, readCallback);\n      this.setResourceRequestHandlers();\n      this.sendResourceListChanged();\n      return registeredResourceTemplate;\n    }\n  }\n  registerResource(name, uriOrTemplate, config, readCallback) {\n    if (typeof uriOrTemplate === \"string\") {\n      if (this._registeredResources[uriOrTemplate]) {\n        throw new Error(`Resource ${uriOrTemplate} is already registered`);\n      }\n      const registeredResource = this._createRegisteredResource(name, config.title, uriOrTemplate, config, readCallback);\n      this.setResourceRequestHandlers();\n      this.sendResourceListChanged();\n      return registeredResource;\n    } else {\n      if (this._registeredResourceTemplates[name]) {\n        throw new Error(`Resource template ${name} is already registered`);\n      }\n      const registeredResourceTemplate = this._createRegisteredResourceTemplate(name, config.title, uriOrTemplate, config, readCallback);\n      this.setResourceRequestHandlers();\n      this.sendResourceListChanged();\n      return registeredResourceTemplate;\n    }\n  }\n  _createRegisteredResource(name, title, uri, metadata, readCallback) {\n    const registeredResource = {\n      name,\n      title,\n      metadata,\n      readCallback,\n      enabled: true,\n      disable: () => registeredResource.update({ enabled: false }),\n      enable: () => registeredResource.update({ enabled: true }),\n      remove: () => registeredResource.update({ uri: null }),\n      update: (updates) => {\n        if (typeof updates.uri !== \"undefined\" && updates.uri !== uri) {\n          delete this._registeredResources[uri];\n          if (updates.uri)\n            this._registeredResources[updates.uri] = registeredResource;\n        }\n        if (typeof updates.name !== \"undefined\")\n          registeredResource.name = updates.name;\n        if (typeof updates.title !== \"undefined\")\n          registeredResource.title = updates.title;\n        if (typeof updates.metadata !== \"undefined\")\n          registeredResource.metadata = updates.metadata;\n        if (typeof updates.callback !== \"undefined\")\n          registeredResource.readCallback = updates.callback;\n        if (typeof updates.enabled !== \"undefined\")\n          registeredResource.enabled = updates.enabled;\n        this.sendResourceListChanged();\n      }\n    };\n    this._registeredResources[uri] = registeredResource;\n    return registeredResource;\n  }\n  _createRegisteredResourceTemplate(name, title, template, metadata, readCallback) {\n    const registeredResourceTemplate = {\n      resourceTemplate: template,\n      title,\n      metadata,\n      readCallback,\n      enabled: true,\n      disable: () => registeredResourceTemplate.update({ enabled: false }),\n      enable: () => registeredResourceTemplate.update({ enabled: true }),\n      remove: () => registeredResourceTemplate.update({ name: null }),\n      update: (updates) => {\n        if (typeof updates.name !== \"undefined\" && updates.name !== name) {\n          delete this._registeredResourceTemplates[name];\n          if (updates.name)\n            this._registeredResourceTemplates[updates.name] = registeredResourceTemplate;\n        }\n        if (typeof updates.title !== \"undefined\")\n          registeredResourceTemplate.title = updates.title;\n        if (typeof updates.template !== \"undefined\")\n          registeredResourceTemplate.resourceTemplate = updates.template;\n        if (typeof updates.metadata !== \"undefined\")\n          registeredResourceTemplate.metadata = updates.metadata;\n        if (typeof updates.callback !== \"undefined\")\n          registeredResourceTemplate.readCallback = updates.callback;\n        if (typeof updates.enabled !== \"undefined\")\n          registeredResourceTemplate.enabled = updates.enabled;\n        this.sendResourceListChanged();\n      }\n    };\n    this._registeredResourceTemplates[name] = registeredResourceTemplate;\n    return registeredResourceTemplate;\n  }\n  _createRegisteredPrompt(name, title, description, argsSchema, callback) {\n    const registeredPrompt = {\n      title,\n      description,\n      argsSchema: argsSchema === undefined ? undefined : exports_external.object(argsSchema),\n      callback,\n      enabled: true,\n      disable: () => registeredPrompt.update({ enabled: false }),\n      enable: () => registeredPrompt.update({ enabled: true }),\n      remove: () => registeredPrompt.update({ name: null }),\n      update: (updates) => {\n        if (typeof updates.name !== \"undefined\" && updates.name !== name) {\n          delete this._registeredPrompts[name];\n          if (updates.name)\n            this._registeredPrompts[updates.name] = registeredPrompt;\n        }\n        if (typeof updates.title !== \"undefined\")\n          registeredPrompt.title = updates.title;\n        if (typeof updates.description !== \"undefined\")\n          registeredPrompt.description = updates.description;\n        if (typeof updates.argsSchema !== \"undefined\")\n          registeredPrompt.argsSchema = exports_external.object(updates.argsSchema);\n        if (typeof updates.callback !== \"undefined\")\n          registeredPrompt.callback = updates.callback;\n        if (typeof updates.enabled !== \"undefined\")\n          registeredPrompt.enabled = updates.enabled;\n        this.sendPromptListChanged();\n      }\n    };\n    this._registeredPrompts[name] = registeredPrompt;\n    return registeredPrompt;\n  }\n  _createRegisteredTool(name, title, description, inputSchema, outputSchema, annotations, callback) {\n    const registeredTool = {\n      title,\n      description,\n      inputSchema: inputSchema === undefined ? undefined : exports_external.object(inputSchema),\n      outputSchema: outputSchema === undefined ? undefined : exports_external.object(outputSchema),\n      annotations,\n      callback,\n      enabled: true,\n      disable: () => registeredTool.update({ enabled: false }),\n      enable: () => registeredTool.update({ enabled: true }),\n      remove: () => registeredTool.update({ name: null }),\n      update: (updates) => {\n        if (typeof updates.name !== \"undefined\" && updates.name !== name) {\n          delete this._registeredTools[name];\n          if (updates.name)\n            this._registeredTools[updates.name] = registeredTool;\n        }\n        if (typeof updates.title !== \"undefined\")\n          registeredTool.title = updates.title;\n        if (typeof updates.description !== \"undefined\")\n          registeredTool.description = updates.description;\n        if (typeof updates.paramsSchema !== \"undefined\")\n          registeredTool.inputSchema = exports_external.object(updates.paramsSchema);\n        if (typeof updates.callback !== \"undefined\")\n          registeredTool.callback = updates.callback;\n        if (typeof updates.annotations !== \"undefined\")\n          registeredTool.annotations = updates.annotations;\n        if (typeof updates.enabled !== \"undefined\")\n          registeredTool.enabled = updates.enabled;\n        this.sendToolListChanged();\n      }\n    };\n    this._registeredTools[name] = registeredTool;\n    this.setToolRequestHandlers();\n    this.sendToolListChanged();\n    return registeredTool;\n  }\n  tool(name, ...rest) {\n    if (this._registeredTools[name]) {\n      throw new Error(`Tool ${name} is already registered`);\n    }\n    let description;\n    let inputSchema;\n    let outputSchema;\n    let annotations;\n    if (typeof rest[0] === \"string\") {\n      description = rest.shift();\n    }\n    if (rest.length > 1) {\n      const firstArg = rest[0];\n      if (isZodRawShape(firstArg)) {\n        inputSchema = rest.shift();\n        if (rest.length > 1 && typeof rest[0] === \"object\" && rest[0] !== null && !isZodRawShape(rest[0])) {\n          annotations = rest.shift();\n        }\n      } else if (typeof firstArg === \"object\" && firstArg !== null) {\n        annotations = rest.shift();\n      }\n    }\n    const callback = rest[0];\n    return this._createRegisteredTool(name, undefined, description, inputSchema, outputSchema, annotations, callback);\n  }\n  registerTool(name, config, cb) {\n    if (this._registeredTools[name]) {\n      throw new Error(`Tool ${name} is already registered`);\n    }\n    const { title, description, inputSchema, outputSchema, annotations } = config;\n    return this._createRegisteredTool(name, title, description, inputSchema, outputSchema, annotations, cb);\n  }\n  prompt(name, ...rest) {\n    if (this._registeredPrompts[name]) {\n      throw new Error(`Prompt ${name} is already registered`);\n    }\n    let description;\n    if (typeof rest[0] === \"string\") {\n      description = rest.shift();\n    }\n    let argsSchema;\n    if (rest.length > 1) {\n      argsSchema = rest.shift();\n    }\n    const cb = rest[0];\n    const registeredPrompt = this._createRegisteredPrompt(name, undefined, description, argsSchema, cb);\n    this.setPromptRequestHandlers();\n    this.sendPromptListChanged();\n    return registeredPrompt;\n  }\n  registerPrompt(name, config, cb) {\n    if (this._registeredPrompts[name]) {\n      throw new Error(`Prompt ${name} is already registered`);\n    }\n    const { title, description, argsSchema } = config;\n    const registeredPrompt = this._createRegisteredPrompt(name, title, description, argsSchema, cb);\n    this.setPromptRequestHandlers();\n    this.sendPromptListChanged();\n    return registeredPrompt;\n  }\n  isConnected() {\n    return this.server.transport !== undefined;\n  }\n  sendResourceListChanged() {\n    if (this.isConnected()) {\n      this.server.sendResourceListChanged();\n    }\n  }\n  sendToolListChanged() {\n    if (this.isConnected()) {\n      this.server.sendToolListChanged();\n    }\n  }\n  sendPromptListChanged() {\n    if (this.isConnected()) {\n      this.server.sendPromptListChanged();\n    }\n  }\n}\nvar EMPTY_OBJECT_JSON_SCHEMA = {\n  type: \"object\",\n  properties: {}\n};\nfunction isZodRawShape(obj) {\n  if (typeof obj !== \"object\" || obj === null)\n    return false;\n  const isEmptyObject = Object.keys(obj).length === 0;\n  return isEmptyObject || Object.values(obj).some(isZodTypeLike);\n}\nfunction isZodTypeLike(value) {\n  return value !== null && typeof value === \"object\" && \"parse\" in value && typeof value.parse === \"function\" && \"safeParse\" in value && typeof value.safeParse === \"function\";\n}\nfunction promptArgumentsFromSchema(schema) {\n  return Object.entries(schema.shape).map(([name, field]) => ({\n    name,\n    description: field.description,\n    required: !field.isOptional()\n  }));\n}\nfunction createCompletionResult(suggestions) {\n  return {\n    completion: {\n      values: suggestions.slice(0, 100),\n      total: suggestions.length,\n      hasMore: suggestions.length > 100\n    }\n  };\n}\nvar EMPTY_COMPLETION_RESULT = {\n  completion: {\n    values: [],\n    hasMore: false\n  }\n};\n\n// ../src/services/mcp/createSdkMcpServer.ts\nfunction tool(name, description, inputSchema, handler) {\n  return { name, description, inputSchema, handler };\n}\nfunction createSdkMcpServer(options) {\n  const server = new McpServer({\n    name: options.name,\n    version: options.version ?? \"1.0.0\"\n  }, {\n    capabilities: {\n      tools: options.tools ? {} : undefined\n    }\n  });\n  if (options.tools) {\n    options.tools.forEach((toolDef) => {\n      server.tool(toolDef.name, toolDef.description, toolDef.inputSchema, toolDef.handler);\n    });\n  }\n  return {\n    type: \"sdk\",\n    name: options.name,\n    instance: server\n  };\n}\n// ../src/entrypoints/agentSdk.ts\nfunction query({\n  prompt,\n  options\n}) {\n  const { systemPrompt, settingSources, ...rest } = options ?? {};\n  let customSystemPrompt;\n  let appendSystemPrompt;\n  if (systemPrompt === undefined) {\n    customSystemPrompt = \"\";\n  } else if (typeof systemPrompt === \"string\") {\n    customSystemPrompt = systemPrompt;\n  } else if (systemPrompt.type === \"preset\") {\n    appendSystemPrompt = systemPrompt.append;\n  }\n  let pathToClaudeCodeExecutable = rest.pathToClaudeCodeExecutable;\n  if (!pathToClaudeCodeExecutable) {\n    const filename = (0,url__WEBPACK_IMPORTED_MODULE_1__.fileURLToPath)(\"file:///Users/bc/Desktop/pip-agent-autonomous/node_modules/@anthropic-ai/claude-agent-sdk/sdk.mjs\");\n    const dirname2 = (0,path__WEBPACK_IMPORTED_MODULE_0__.join)(filename, \"..\");\n    pathToClaudeCodeExecutable = (0,path__WEBPACK_IMPORTED_MODULE_0__.join)(dirname2, \"cli.js\");\n  }\n  process.env.CLAUDE_AGENT_SDK_VERSION = \"0.1.14\";\n  return createSharedQuery({\n    prompt,\n    options: {\n      ...rest,\n      pathToClaudeCodeExecutable,\n      customSystemPrompt,\n      appendSystemPrompt,\n      settingSources: settingSources ?? []\n    }\n  });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/claude-agent-sdk/sdk.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs":
/*!***********************************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   partialParse: () => (/* binding */ partialParse)\n/* harmony export */ });\nconst tokenize = (input) => {\n    let current = 0;\n    let tokens = [];\n    while (current < input.length) {\n        let char = input[current];\n        if (char === '\\\\') {\n            current++;\n            continue;\n        }\n        if (char === '{') {\n            tokens.push({\n                type: 'brace',\n                value: '{',\n            });\n            current++;\n            continue;\n        }\n        if (char === '}') {\n            tokens.push({\n                type: 'brace',\n                value: '}',\n            });\n            current++;\n            continue;\n        }\n        if (char === '[') {\n            tokens.push({\n                type: 'paren',\n                value: '[',\n            });\n            current++;\n            continue;\n        }\n        if (char === ']') {\n            tokens.push({\n                type: 'paren',\n                value: ']',\n            });\n            current++;\n            continue;\n        }\n        if (char === ':') {\n            tokens.push({\n                type: 'separator',\n                value: ':',\n            });\n            current++;\n            continue;\n        }\n        if (char === ',') {\n            tokens.push({\n                type: 'delimiter',\n                value: ',',\n            });\n            current++;\n            continue;\n        }\n        if (char === '\"') {\n            let value = '';\n            let danglingQuote = false;\n            char = input[++current];\n            while (char !== '\"') {\n                if (current === input.length) {\n                    danglingQuote = true;\n                    break;\n                }\n                if (char === '\\\\') {\n                    current++;\n                    if (current === input.length) {\n                        danglingQuote = true;\n                        break;\n                    }\n                    value += char + input[current];\n                    char = input[++current];\n                }\n                else {\n                    value += char;\n                    char = input[++current];\n                }\n            }\n            char = input[++current];\n            if (!danglingQuote) {\n                tokens.push({\n                    type: 'string',\n                    value,\n                });\n            }\n            continue;\n        }\n        let WHITESPACE = /\\s/;\n        if (char && WHITESPACE.test(char)) {\n            current++;\n            continue;\n        }\n        let NUMBERS = /[0-9]/;\n        if ((char && NUMBERS.test(char)) || char === '-' || char === '.') {\n            let value = '';\n            if (char === '-') {\n                value += char;\n                char = input[++current];\n            }\n            while ((char && NUMBERS.test(char)) || char === '.') {\n                value += char;\n                char = input[++current];\n            }\n            tokens.push({\n                type: 'number',\n                value,\n            });\n            continue;\n        }\n        let LETTERS = /[a-z]/i;\n        if (char && LETTERS.test(char)) {\n            let value = '';\n            while (char && LETTERS.test(char)) {\n                if (current === input.length) {\n                    break;\n                }\n                value += char;\n                char = input[++current];\n            }\n            if (value == 'true' || value == 'false' || value === 'null') {\n                tokens.push({\n                    type: 'name',\n                    value,\n                });\n            }\n            else {\n                // unknown token, e.g. `nul` which isn't quite `null`\n                current++;\n                continue;\n            }\n            continue;\n        }\n        current++;\n    }\n    return tokens;\n}, strip = (tokens) => {\n    if (tokens.length === 0) {\n        return tokens;\n    }\n    let lastToken = tokens[tokens.length - 1];\n    switch (lastToken.type) {\n        case 'separator':\n            tokens = tokens.slice(0, tokens.length - 1);\n            return strip(tokens);\n            break;\n        case 'number':\n            let lastCharacterOfLastToken = lastToken.value[lastToken.value.length - 1];\n            if (lastCharacterOfLastToken === '.' || lastCharacterOfLastToken === '-') {\n                tokens = tokens.slice(0, tokens.length - 1);\n                return strip(tokens);\n            }\n        case 'string':\n            let tokenBeforeTheLastToken = tokens[tokens.length - 2];\n            if (tokenBeforeTheLastToken?.type === 'delimiter') {\n                tokens = tokens.slice(0, tokens.length - 1);\n                return strip(tokens);\n            }\n            else if (tokenBeforeTheLastToken?.type === 'brace' && tokenBeforeTheLastToken.value === '{') {\n                tokens = tokens.slice(0, tokens.length - 1);\n                return strip(tokens);\n            }\n            break;\n        case 'delimiter':\n            tokens = tokens.slice(0, tokens.length - 1);\n            return strip(tokens);\n            break;\n    }\n    return tokens;\n}, unstrip = (tokens) => {\n    let tail = [];\n    tokens.map((token) => {\n        if (token.type === 'brace') {\n            if (token.value === '{') {\n                tail.push('}');\n            }\n            else {\n                tail.splice(tail.lastIndexOf('}'), 1);\n            }\n        }\n        if (token.type === 'paren') {\n            if (token.value === '[') {\n                tail.push(']');\n            }\n            else {\n                tail.splice(tail.lastIndexOf(']'), 1);\n            }\n        }\n    });\n    if (tail.length > 0) {\n        tail.reverse().map((item) => {\n            if (item === '}') {\n                tokens.push({\n                    type: 'brace',\n                    value: '}',\n                });\n            }\n            else if (item === ']') {\n                tokens.push({\n                    type: 'paren',\n                    value: ']',\n                });\n            }\n        });\n    }\n    return tokens;\n}, generate = (tokens) => {\n    let output = '';\n    tokens.map((token) => {\n        switch (token.type) {\n            case 'string':\n                output += '\"' + token.value + '\"';\n                break;\n            default:\n                output += token.value;\n                break;\n        }\n    });\n    return output;\n}, partialParse = (input) => JSON.parse(generate(unstrip(strip(tokenize(input)))));\n\n//# sourceMappingURL=parser.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL192ZW5kb3IvcGFydGlhbC1qc29uLXBhcnNlci9wYXJzZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0dBQXNHO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7QUFDdUI7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLy4uLy4uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9fdmVuZG9yL3BhcnRpYWwtanNvbi1wYXJzZXIvcGFyc2VyLm1qcz85MjVmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRva2VuaXplID0gKGlucHV0KSA9PiB7XG4gICAgbGV0IGN1cnJlbnQgPSAwO1xuICAgIGxldCB0b2tlbnMgPSBbXTtcbiAgICB3aGlsZSAoY3VycmVudCA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICBsZXQgY2hhciA9IGlucHV0W2N1cnJlbnRdO1xuICAgICAgICBpZiAoY2hhciA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhciA9PT0gJ3snKSB7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2JyYWNlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ3snLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhciA9PT0gJ30nKSB7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2JyYWNlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ30nLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhciA9PT0gJ1snKSB7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3BhcmVuJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ1snLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhciA9PT0gJ10nKSB7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3BhcmVuJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ10nLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhciA9PT0gJzonKSB7XG4gICAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NlcGFyYXRvcicsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICc6JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY3VycmVudCsrO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYXIgPT09ICcsJykge1xuICAgICAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdkZWxpbWl0ZXInLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnLCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGN1cnJlbnQrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFyID09PSAnXCInKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSAnJztcbiAgICAgICAgICAgIGxldCBkYW5nbGluZ1F1b3RlID0gZmFsc2U7XG4gICAgICAgICAgICBjaGFyID0gaW5wdXRbKytjdXJyZW50XTtcbiAgICAgICAgICAgIHdoaWxlIChjaGFyICE9PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBkYW5nbGluZ1F1b3RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYW5nbGluZ1F1b3RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IGNoYXIgKyBpbnB1dFtjdXJyZW50XTtcbiAgICAgICAgICAgICAgICAgICAgY2hhciA9IGlucHV0WysrY3VycmVudF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBjaGFyO1xuICAgICAgICAgICAgICAgICAgICBjaGFyID0gaW5wdXRbKytjdXJyZW50XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGFyID0gaW5wdXRbKytjdXJyZW50XTtcbiAgICAgICAgICAgIGlmICghZGFuZ2xpbmdRdW90ZSkge1xuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IFdISVRFU1BBQ0UgPSAvXFxzLztcbiAgICAgICAgaWYgKGNoYXIgJiYgV0hJVEVTUEFDRS50ZXN0KGNoYXIpKSB7XG4gICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgTlVNQkVSUyA9IC9bMC05XS87XG4gICAgICAgIGlmICgoY2hhciAmJiBOVU1CRVJTLnRlc3QoY2hhcikpIHx8IGNoYXIgPT09ICctJyB8fCBjaGFyID09PSAnLicpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICcnO1xuICAgICAgICAgICAgaWYgKGNoYXIgPT09ICctJykge1xuICAgICAgICAgICAgICAgIHZhbHVlICs9IGNoYXI7XG4gICAgICAgICAgICAgICAgY2hhciA9IGlucHV0WysrY3VycmVudF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoKGNoYXIgJiYgTlVNQkVSUy50ZXN0KGNoYXIpKSB8fCBjaGFyID09PSAnLicpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSArPSBjaGFyO1xuICAgICAgICAgICAgICAgIGNoYXIgPSBpbnB1dFsrK2N1cnJlbnRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgTEVUVEVSUyA9IC9bYS16XS9pO1xuICAgICAgICBpZiAoY2hhciAmJiBMRVRURVJTLnRlc3QoY2hhcikpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICcnO1xuICAgICAgICAgICAgd2hpbGUgKGNoYXIgJiYgTEVUVEVSUy50ZXN0KGNoYXIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gY2hhcjtcbiAgICAgICAgICAgICAgICBjaGFyID0gaW5wdXRbKytjdXJyZW50XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAndHJ1ZScgfHwgdmFsdWUgPT0gJ2ZhbHNlJyB8fCB2YWx1ZSA9PT0gJ251bGwnKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbmFtZScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdW5rbm93biB0b2tlbiwgZS5nLiBgbnVsYCB3aGljaCBpc24ndCBxdWl0ZSBgbnVsbGBcbiAgICAgICAgICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50Kys7XG4gICAgfVxuICAgIHJldHVybiB0b2tlbnM7XG59LCBzdHJpcCA9ICh0b2tlbnMpID0+IHtcbiAgICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH1cbiAgICBsZXQgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICBzd2l0Y2ggKGxhc3RUb2tlbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3NlcGFyYXRvcic6XG4gICAgICAgICAgICB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoMCwgdG9rZW5zLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmlwKHRva2Vucyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgIGxldCBsYXN0Q2hhcmFjdGVyT2ZMYXN0VG9rZW4gPSBsYXN0VG9rZW4udmFsdWVbbGFzdFRva2VuLnZhbHVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGxhc3RDaGFyYWN0ZXJPZkxhc3RUb2tlbiA9PT0gJy4nIHx8IGxhc3RDaGFyYWN0ZXJPZkxhc3RUb2tlbiA9PT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zID0gdG9rZW5zLnNsaWNlKDAsIHRva2Vucy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaXAodG9rZW5zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIGxldCB0b2tlbkJlZm9yZVRoZUxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMl07XG4gICAgICAgICAgICBpZiAodG9rZW5CZWZvcmVUaGVMYXN0VG9rZW4/LnR5cGUgPT09ICdkZWxpbWl0ZXInKSB7XG4gICAgICAgICAgICAgICAgdG9rZW5zID0gdG9rZW5zLnNsaWNlKDAsIHRva2Vucy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaXAodG9rZW5zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRva2VuQmVmb3JlVGhlTGFzdFRva2VuPy50eXBlID09PSAnYnJhY2UnICYmIHRva2VuQmVmb3JlVGhlTGFzdFRva2VuLnZhbHVlID09PSAneycpIHtcbiAgICAgICAgICAgICAgICB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoMCwgdG9rZW5zLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpcCh0b2tlbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RlbGltaXRlcic6XG4gICAgICAgICAgICB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoMCwgdG9rZW5zLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHN0cmlwKHRva2Vucyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHRva2Vucztcbn0sIHVuc3RyaXAgPSAodG9rZW5zKSA9PiB7XG4gICAgbGV0IHRhaWwgPSBbXTtcbiAgICB0b2tlbnMubWFwKCh0b2tlbikgPT4ge1xuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2JyYWNlJykge1xuICAgICAgICAgICAgaWYgKHRva2VuLnZhbHVlID09PSAneycpIHtcbiAgICAgICAgICAgICAgICB0YWlsLnB1c2goJ30nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhaWwuc3BsaWNlKHRhaWwubGFzdEluZGV4T2YoJ30nKSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdwYXJlbicpIHtcbiAgICAgICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gJ1snKSB7XG4gICAgICAgICAgICAgICAgdGFpbC5wdXNoKCddJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YWlsLnNwbGljZSh0YWlsLmxhc3RJbmRleE9mKCddJyksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRhaWwubGVuZ3RoID4gMCkge1xuICAgICAgICB0YWlsLnJldmVyc2UoKS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtID09PSAnfScpIHtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdicmFjZScsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnfScsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpdGVtID09PSAnXScpIHtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdwYXJlbicsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnXScsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdG9rZW5zO1xufSwgZ2VuZXJhdGUgPSAodG9rZW5zKSA9PiB7XG4gICAgbGV0IG91dHB1dCA9ICcnO1xuICAgIHRva2Vucy5tYXAoKHRva2VuKSA9PiB7XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gJ1wiJyArIHRva2VuLnZhbHVlICsgJ1wiJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IHRva2VuLnZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG91dHB1dDtcbn0sIHBhcnRpYWxQYXJzZSA9IChpbnB1dCkgPT4gSlNPTi5wYXJzZShnZW5lcmF0ZSh1bnN0cmlwKHN0cmlwKHRva2VuaXplKGlucHV0KSkpKSk7XG5leHBvcnQgeyBwYXJ0aWFsUGFyc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlci5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/client.mjs":
/*!*******************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/client.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AI_PROMPT: () => (/* binding */ AI_PROMPT),\n/* harmony export */   Anthropic: () => (/* binding */ Anthropic),\n/* harmony export */   BaseAnthropic: () => (/* binding */ BaseAnthropic),\n/* harmony export */   HUMAN_PROMPT: () => (/* binding */ HUMAN_PROMPT)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/tslib.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _internal_utils_uuid_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/utils/uuid.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/uuid.mjs\");\n/* harmony import */ var _internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/utils/values.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/values.mjs\");\n/* harmony import */ var _internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/utils/sleep.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/sleep.mjs\");\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/errors.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/errors.mjs\");\n/* harmony import */ var _internal_detect_platform_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/detect-platform.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/detect-platform.mjs\");\n/* harmony import */ var _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/shims.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/shims.mjs\");\n/* harmony import */ var _internal_request_options_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/request-options.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/request-options.mjs\");\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./version.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/version.mjs\");\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./core/error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/error.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./core/pagination.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./core/uploads.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/uploads.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/index.mjs\");\n/* harmony import */ var _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./core/api-promise.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/api-promise.mjs\");\n/* harmony import */ var _resources_completions_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./resources/completions.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/completions.mjs\");\n/* harmony import */ var _resources_models_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./resources/models.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/models.mjs\");\n/* harmony import */ var _resources_beta_beta_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./resources/beta/beta.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs\");\n/* harmony import */ var _resources_messages_messages_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./resources/messages/messages.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./internal/headers.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./internal/utils/env.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/env.mjs\");\n/* harmony import */ var _internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./internal/utils/log.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/log.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _BaseAnthropic_instances, _a, _BaseAnthropic_encoder, _BaseAnthropic_baseURLOverridden;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst HUMAN_PROMPT = '\\\\n\\\\nHuman:';\nconst AI_PROMPT = '\\\\n\\\\nAssistant:';\n/**\n * Base class for Anthropic API clients.\n */\nclass BaseAnthropic {\n    /**\n     * API Client for interfacing with the Anthropic API.\n     *\n     * @param {string | null | undefined} [opts.apiKey=process.env['ANTHROPIC_API_KEY'] ?? null]\n     * @param {string | null | undefined} [opts.authToken=process.env['ANTHROPIC_AUTH_TOKEN'] ?? null]\n     * @param {string} [opts.baseURL=process.env['ANTHROPIC_BASE_URL'] ?? https://api.anthropic.com] - Override the default base URL for the API.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {MergedRequestInit} [opts.fetchOptions] - Additional `RequestInit` options to be passed to `fetch` calls.\n     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {HeadersLike} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Record<string, string | undefined>} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */\n    constructor({ baseURL = (0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_19__.readEnv)('ANTHROPIC_BASE_URL'), apiKey = (0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_19__.readEnv)('ANTHROPIC_API_KEY') ?? null, authToken = (0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_19__.readEnv)('ANTHROPIC_AUTH_TOKEN') ?? null, ...opts } = {}) {\n        _BaseAnthropic_instances.add(this);\n        _BaseAnthropic_encoder.set(this, void 0);\n        const options = {\n            apiKey,\n            authToken,\n            ...opts,\n            baseURL: baseURL || `https://api.anthropic.com`,\n        };\n        if (!options.dangerouslyAllowBrowser && (0,_internal_detect_platform_mjs__WEBPACK_IMPORTED_MODULE_5__.isRunningInBrowser)()) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.AnthropicError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew Anthropic({ apiKey, dangerouslyAllowBrowser: true });\\n\");\n        }\n        this.baseURL = options.baseURL;\n        this.timeout = options.timeout ?? _a.DEFAULT_TIMEOUT /* 10 minutes */;\n        this.logger = options.logger ?? console;\n        const defaultLogLevel = 'warn';\n        // Set default logLevel early so that we can log a warning in parseLogLevel.\n        this.logLevel = defaultLogLevel;\n        this.logLevel =\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.parseLogLevel)(options.logLevel, 'ClientOptions.logLevel', this) ??\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.parseLogLevel)((0,_internal_utils_env_mjs__WEBPACK_IMPORTED_MODULE_19__.readEnv)('ANTHROPIC_LOG'), \"process.env['ANTHROPIC_LOG']\", this) ??\n                defaultLogLevel;\n        this.fetchOptions = options.fetchOptions;\n        this.maxRetries = options.maxRetries ?? 2;\n        this.fetch = options.fetch ?? _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_6__.getDefaultFetch();\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BaseAnthropic_encoder, _internal_request_options_mjs__WEBPACK_IMPORTED_MODULE_7__.FallbackEncoder, \"f\");\n        this._options = options;\n        this.apiKey = apiKey;\n        this.authToken = authToken;\n    }\n    /**\n     * Create a new client instance re-using the same options given to the current client with optional overriding.\n     */\n    withOptions(options) {\n        const client = new this.constructor({\n            ...this._options,\n            baseURL: this.baseURL,\n            maxRetries: this.maxRetries,\n            timeout: this.timeout,\n            logger: this.logger,\n            logLevel: this.logLevel,\n            fetch: this.fetch,\n            fetchOptions: this.fetchOptions,\n            apiKey: this.apiKey,\n            authToken: this.authToken,\n            ...options,\n        });\n        return client;\n    }\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    validateHeaders({ values, nulls }) {\n        if (this.apiKey && values.get('x-api-key')) {\n            return;\n        }\n        if (nulls.has('x-api-key')) {\n            return;\n        }\n        if (this.authToken && values.get('authorization')) {\n            return;\n        }\n        if (nulls.has('authorization')) {\n            return;\n        }\n        throw new Error('Could not resolve authentication method. Expected either apiKey or authToken to be set. Or for one of the \"X-Api-Key\" or \"Authorization\" headers to be explicitly omitted');\n    }\n    async authHeaders(opts) {\n        return (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_18__.buildHeaders)([await this.apiKeyAuth(opts), await this.bearerAuth(opts)]);\n    }\n    async apiKeyAuth(opts) {\n        if (this.apiKey == null) {\n            return undefined;\n        }\n        return (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_18__.buildHeaders)([{ 'X-Api-Key': this.apiKey }]);\n    }\n    async bearerAuth(opts) {\n        if (this.authToken == null) {\n            return undefined;\n        }\n        return (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_18__.buildHeaders)([{ Authorization: `Bearer ${this.authToken}` }]);\n    }\n    /**\n     * Basic re-implementation of `qs.stringify` for primitive types.\n     */\n    stringifyQuery(query) {\n        return Object.entries(query)\n            .filter(([_, value]) => typeof value !== 'undefined')\n            .map(([key, value]) => {\n            if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n            }\n            if (value === null) {\n                return `${encodeURIComponent(key)}=`;\n            }\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.AnthropicError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n        })\n            .join('&');\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${_version_mjs__WEBPACK_IMPORTED_MODULE_8__.VERSION}`;\n    }\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${(0,_internal_utils_uuid_mjs__WEBPACK_IMPORTED_MODULE_1__.uuid4)()}`;\n    }\n    makeStatusError(status, error, message, headers) {\n        return _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.APIError.generate(status, error, message, headers);\n    }\n    buildURL(path, query, defaultBaseURL) {\n        const baseURL = (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BaseAnthropic_instances, \"m\", _BaseAnthropic_baseURLOverridden).call(this) && defaultBaseURL) || this.baseURL;\n        const url = (0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isAbsoluteURL)(path) ?\n            new URL(path)\n            : new URL(baseURL + (baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!(0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.isEmptyObj)(defaultQuery)) {\n            query = { ...defaultQuery, ...query };\n        }\n        if (typeof query === 'object' && query && !Array.isArray(query)) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    _calculateNonstreamingTimeout(maxTokens) {\n        const defaultTimeout = 10 * 60;\n        const expectedTimeout = (60 * 60 * maxTokens) / 128000;\n        if (expectedTimeout > defaultTimeout) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.AnthropicError('Streaming is required for operations that may take longer than 10 minutes. ' +\n                'See https://github.com/anthropics/anthropic-sdk-typescript#streaming-responses for more details');\n        }\n        return defaultTimeout * 1000;\n    }\n    /**\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\n     */\n    async prepareOptions(options) { }\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */\n    async prepareRequest(request, { url, options }) { }\n    get(path, opts) {\n        return this.methodRequest('get', path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest('post', path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest('patch', path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest('put', path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest('delete', path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then((opts) => {\n            return { method, path, ...opts };\n        }));\n    }\n    request(options, remainingRetries = null) {\n        return new _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_13__.APIPromise(this, this.makeRequest(options, remainingRetries, undefined));\n    }\n    async makeRequest(optionsInput, retriesRemaining, retryOfRequestLogID) {\n        const options = await optionsInput;\n        const maxRetries = options.maxRetries ?? this.maxRetries;\n        if (retriesRemaining == null) {\n            retriesRemaining = maxRetries;\n        }\n        await this.prepareOptions(options);\n        const { req, url, timeout } = await this.buildRequest(options, {\n            retryCount: maxRetries - retriesRemaining,\n        });\n        await this.prepareRequest(req, { url, options });\n        /** Not an API request ID, just for correlating local log entries. */\n        const requestLogID = 'log_' + ((Math.random() * (1 << 24)) | 0).toString(16).padStart(6, '0');\n        const retryLogStr = retryOfRequestLogID === undefined ? '' : `, retryOf: ${retryOfRequestLogID}`;\n        const startTime = Date.now();\n        (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.loggerFor)(this).debug(`[${requestLogID}] sending request`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.formatRequestDetails)({\n            retryOfRequestLogID,\n            method: options.method,\n            url,\n            options,\n            headers: req.headers,\n        }));\n        if (options.signal?.aborted) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__.castToError);\n        const headersTime = Date.now();\n        if (response instanceof globalThis.Error) {\n            const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n            if (options.signal?.aborted) {\n                throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.APIUserAbortError();\n            }\n            // detect native connection timeout errors\n            // deno throws \"TypeError: error sending request for url (https://example/): client error (Connect): tcp connect error: Operation timed out (os error 60): Operation timed out (os error 60)\"\n            // undici throws \"TypeError: fetch failed\" with cause \"ConnectTimeoutError: Connect Timeout Error (attempted address: example:443, timeout: 1ms)\"\n            // others do not provide enough information to distinguish timeouts from other connection errors\n            const isTimeout = (0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__.isAbortError)(response) ||\n                /timed? ?out/i.test(String(response) + ('cause' in response ? String(response.cause) : ''));\n            if (retriesRemaining) {\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.loggerFor)(this).info(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} - ${retryMessage}`);\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.loggerFor)(this).debug(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} (${retryMessage})`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.formatRequestDetails)({\n                    retryOfRequestLogID,\n                    url,\n                    durationMs: headersTime - startTime,\n                    message: response.message,\n                }));\n                return this.retryRequest(options, retriesRemaining, retryOfRequestLogID ?? requestLogID);\n            }\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.loggerFor)(this).info(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} - error; no more retries left`);\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.loggerFor)(this).debug(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} (error; no more retries left)`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.formatRequestDetails)({\n                retryOfRequestLogID,\n                url,\n                durationMs: headersTime - startTime,\n                message: response.message,\n            }));\n            if (isTimeout) {\n                throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.APIConnectionTimeoutError();\n            }\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.APIConnectionError({ cause: response });\n        }\n        const specialHeaders = [...response.headers.entries()]\n            .filter(([name]) => name === 'request-id')\n            .map(([name, value]) => ', ' + name + ': ' + JSON.stringify(value))\n            .join('');\n        const responseInfo = `[${requestLogID}${retryLogStr}${specialHeaders}] ${req.method} ${url} ${response.ok ? 'succeeded' : 'failed'} with status ${response.status} in ${headersTime - startTime}ms`;\n        if (!response.ok) {\n            const shouldRetry = await this.shouldRetry(response);\n            if (retriesRemaining && shouldRetry) {\n                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n                // We don't need the body of this response.\n                await _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_6__.CancelReadableStream(response.body);\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.loggerFor)(this).info(`${responseInfo} - ${retryMessage}`);\n                (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.loggerFor)(this).debug(`[${requestLogID}] response error (${retryMessage})`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.formatRequestDetails)({\n                    retryOfRequestLogID,\n                    url: response.url,\n                    status: response.status,\n                    headers: response.headers,\n                    durationMs: headersTime - startTime,\n                }));\n                return this.retryRequest(options, retriesRemaining, retryOfRequestLogID ?? requestLogID, response.headers);\n            }\n            const retryMessage = shouldRetry ? `error; no more retries left` : `error; not retryable`;\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.loggerFor)(this).info(`${responseInfo} - ${retryMessage}`);\n            const errText = await response.text().catch((err) => (0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__.castToError)(err).message);\n            const errJSON = (0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.safeJSON)(errText);\n            const errMessage = errJSON ? undefined : errText;\n            (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.loggerFor)(this).debug(`[${requestLogID}] response error (${retryMessage})`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.formatRequestDetails)({\n                retryOfRequestLogID,\n                url: response.url,\n                status: response.status,\n                headers: response.headers,\n                message: errMessage,\n                durationMs: Date.now() - startTime,\n            }));\n            const err = this.makeStatusError(response.status, errJSON, errMessage, response.headers);\n            throw err;\n        }\n        (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.loggerFor)(this).info(responseInfo);\n        (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.loggerFor)(this).debug(`[${requestLogID}] response start`, (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_20__.formatRequestDetails)({\n            retryOfRequestLogID,\n            url: response.url,\n            status: response.status,\n            headers: response.headers,\n            durationMs: headersTime - startTime,\n        }));\n        return { response, options, controller, requestLogID, retryOfRequestLogID, startTime };\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, { method: 'get', path, ...opts });\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null, undefined);\n        return new _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_10__.PagePromise(this, request, Page);\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, method, ...options } = init || {};\n        if (signal)\n            signal.addEventListener('abort', () => controller.abort());\n        const timeout = setTimeout(() => controller.abort(), ms);\n        const isReadableBody = (globalThis.ReadableStream && options.body instanceof globalThis.ReadableStream) ||\n            (typeof options.body === 'object' && options.body !== null && Symbol.asyncIterator in options.body);\n        const fetchOptions = {\n            signal: controller.signal,\n            ...(isReadableBody ? { duplex: 'half' } : {}),\n            method: 'GET',\n            ...options,\n        };\n        if (method) {\n            // Custom methods like 'patch' need to be uppercased\n            // See https://github.com/nodejs/undici/issues/2294\n            fetchOptions.method = method.toUpperCase();\n        }\n        try {\n            // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n            return await this.fetch.call(undefined, url, fetchOptions);\n        }\n        finally {\n            clearTimeout(timeout);\n        }\n    }\n    async shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get('x-should-retry');\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === 'true')\n            return true;\n        if (shouldRetryHeader === 'false')\n            return false;\n        // Retry on request timeouts.\n        if (response.status === 408)\n            return true;\n        // Retry on lock timeouts.\n        if (response.status === 409)\n            return true;\n        // Retry on rate limits.\n        if (response.status === 429)\n            return true;\n        // Retry internal errors.\n        if (response.status >= 500)\n            return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, requestLogID, responseHeaders) {\n        let timeoutMillis;\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n        const retryAfterMillisHeader = responseHeaders?.get('retry-after-ms');\n        if (retryAfterMillisHeader) {\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\n            if (!Number.isNaN(timeoutMs)) {\n                timeoutMillis = timeoutMs;\n            }\n        }\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        const retryAfterHeader = responseHeaders?.get('retry-after');\n        if (retryAfterHeader && !timeoutMillis) {\n            const timeoutSeconds = parseFloat(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            }\n            else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n            const maxRetries = options.maxRetries ?? this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await (0,_internal_utils_sleep_mjs__WEBPACK_IMPORTED_MODULE_3__.sleep)(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1, requestLogID);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    calculateNonstreamingTimeout(maxTokens, maxNonstreamingTokens) {\n        const maxTime = 60 * 60 * 1000; // 60 minutes\n        const defaultTime = 60 * 10 * 1000; // 10 minutes\n        const expectedTime = (maxTime * maxTokens) / 128000;\n        if (expectedTime > defaultTime || (maxNonstreamingTokens != null && maxTokens > maxNonstreamingTokens)) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.AnthropicError('Streaming is required for operations that may take longer than 10 minutes. See https://github.com/anthropics/anthropic-sdk-typescript#long-requests for more details');\n        }\n        return defaultTime;\n    }\n    async buildRequest(inputOptions, { retryCount = 0 } = {}) {\n        const options = { ...inputOptions };\n        const { method, path, query, defaultBaseURL } = options;\n        const url = this.buildURL(path, query, defaultBaseURL);\n        if ('timeout' in options)\n            (0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_2__.validatePositiveInteger)('timeout', options.timeout);\n        options.timeout = options.timeout ?? this.timeout;\n        const { bodyHeaders, body } = this.buildBody({ options });\n        const reqHeaders = await this.buildHeaders({ options: inputOptions, method, bodyHeaders, retryCount });\n        const req = {\n            method,\n            headers: reqHeaders,\n            ...(options.signal && { signal: options.signal }),\n            ...(globalThis.ReadableStream &&\n                body instanceof globalThis.ReadableStream && { duplex: 'half' }),\n            ...(body && { body }),\n            ...(this.fetchOptions ?? {}),\n            ...(options.fetchOptions ?? {}),\n        };\n        return { req, url, timeout: options.timeout };\n    }\n    async buildHeaders({ options, method, bodyHeaders, retryCount, }) {\n        let idempotencyHeaders = {};\n        if (this.idempotencyHeader && method !== 'get') {\n            if (!options.idempotencyKey)\n                options.idempotencyKey = this.defaultIdempotencyKey();\n            idempotencyHeaders[this.idempotencyHeader] = options.idempotencyKey;\n        }\n        const headers = (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_18__.buildHeaders)([\n            idempotencyHeaders,\n            {\n                Accept: 'application/json',\n                'User-Agent': this.getUserAgent(),\n                'X-Stainless-Retry-Count': String(retryCount),\n                ...(options.timeout ? { 'X-Stainless-Timeout': String(Math.trunc(options.timeout / 1000)) } : {}),\n                ...(0,_internal_detect_platform_mjs__WEBPACK_IMPORTED_MODULE_5__.getPlatformHeaders)(),\n                ...(this._options.dangerouslyAllowBrowser ?\n                    { 'anthropic-dangerous-direct-browser-access': 'true' }\n                    : undefined),\n                'anthropic-version': '2023-06-01',\n            },\n            await this.authHeaders(options),\n            this._options.defaultHeaders,\n            bodyHeaders,\n            options.headers,\n        ]);\n        this.validateHeaders(headers);\n        return headers.values;\n    }\n    buildBody({ options: { body, headers: rawHeaders } }) {\n        if (!body) {\n            return { bodyHeaders: undefined, body: undefined };\n        }\n        const headers = (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_18__.buildHeaders)([rawHeaders]);\n        if (\n        // Pass raw type verbatim\n        ArrayBuffer.isView(body) ||\n            body instanceof ArrayBuffer ||\n            body instanceof DataView ||\n            (typeof body === 'string' &&\n                // Preserve legacy string encoding behavior for now\n                headers.values.has('content-type')) ||\n            // `Blob` is superset of `File`\n            (globalThis.Blob && body instanceof globalThis.Blob) ||\n            // `FormData` -> `multipart/form-data`\n            body instanceof FormData ||\n            // `URLSearchParams` -> `application/x-www-form-urlencoded`\n            body instanceof URLSearchParams ||\n            // Send chunked stream (each chunk has own `length`)\n            (globalThis.ReadableStream && body instanceof globalThis.ReadableStream)) {\n            return { bodyHeaders: undefined, body: body };\n        }\n        else if (typeof body === 'object' &&\n            (Symbol.asyncIterator in body ||\n                (Symbol.iterator in body && 'next' in body && typeof body.next === 'function'))) {\n            return { bodyHeaders: undefined, body: _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_6__.ReadableStreamFrom(body) };\n        }\n        else {\n            return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BaseAnthropic_encoder, \"f\").call(this, { body, headers });\n        }\n    }\n}\n_a = BaseAnthropic, _BaseAnthropic_encoder = new WeakMap(), _BaseAnthropic_instances = new WeakSet(), _BaseAnthropic_baseURLOverridden = function _BaseAnthropic_baseURLOverridden() {\n    return this.baseURL !== 'https://api.anthropic.com';\n};\nBaseAnthropic.Anthropic = _a;\nBaseAnthropic.HUMAN_PROMPT = HUMAN_PROMPT;\nBaseAnthropic.AI_PROMPT = AI_PROMPT;\nBaseAnthropic.DEFAULT_TIMEOUT = 600000; // 10 minutes\nBaseAnthropic.AnthropicError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.AnthropicError;\nBaseAnthropic.APIError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.APIError;\nBaseAnthropic.APIConnectionError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.APIConnectionError;\nBaseAnthropic.APIConnectionTimeoutError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.APIConnectionTimeoutError;\nBaseAnthropic.APIUserAbortError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.APIUserAbortError;\nBaseAnthropic.NotFoundError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.NotFoundError;\nBaseAnthropic.ConflictError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.ConflictError;\nBaseAnthropic.RateLimitError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.RateLimitError;\nBaseAnthropic.BadRequestError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.BadRequestError;\nBaseAnthropic.AuthenticationError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.AuthenticationError;\nBaseAnthropic.InternalServerError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.InternalServerError;\nBaseAnthropic.PermissionDeniedError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.PermissionDeniedError;\nBaseAnthropic.UnprocessableEntityError = _core_error_mjs__WEBPACK_IMPORTED_MODULE_9__.UnprocessableEntityError;\nBaseAnthropic.toFile = _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_11__.toFile;\n/**\n * API Client for interfacing with the Anthropic API.\n */\nclass Anthropic extends BaseAnthropic {\n    constructor() {\n        super(...arguments);\n        this.completions = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__.Completions(this);\n        this.messages = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__.Messages(this);\n        this.models = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__.Models(this);\n        this.beta = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_12__.Beta(this);\n    }\n}\nAnthropic.Completions = _resources_completions_mjs__WEBPACK_IMPORTED_MODULE_14__.Completions;\nAnthropic.Messages = _resources_messages_messages_mjs__WEBPACK_IMPORTED_MODULE_17__.Messages;\nAnthropic.Models = _resources_models_mjs__WEBPACK_IMPORTED_MODULE_15__.Models;\nAnthropic.Beta = _resources_beta_beta_mjs__WEBPACK_IMPORTED_MODULE_16__.Beta;\n//# sourceMappingURL=client.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/client.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/core/api-promise.mjs":
/*!*****************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/core/api-promise.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIPromise: () => (/* binding */ APIPromise)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _internal_parse_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/parse.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/parse.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _APIPromise_client;\n\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nclass APIPromise extends Promise {\n    constructor(client, responsePromise, parseResponse = _internal_parse_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultParseResponse) {\n        super((resolve) => {\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n        _APIPromise_client.set(this, void 0);\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _APIPromise_client, client, \"f\");\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _APIPromise_client, \"f\"), this.responsePromise, async (client, props) => (0,_internal_parse_mjs__WEBPACK_IMPORTED_MODULE_1__.addRequestID)(transform(await this.parseResponse(client, props), props), props.response));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n     * to your `tsconfig.json`.\n     */\n    asResponse() {\n        return this.responsePromise.then((p) => p.response);\n    }\n    /**\n     * Gets the parsed response data, the raw `Response` instance and the ID of the request,\n     * returned via the `request-id` header which is useful for debugging requests and resporting\n     * issues to Anthropic.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n     * to your `tsconfig.json`.\n     */\n    async withResponse() {\n        const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n        return { data, response, request_id: response.headers.get('request-id') };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then((data) => this.parseResponse((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _APIPromise_client, \"f\"), data));\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\n_APIPromise_client = new WeakMap();\n//# sourceMappingURL=api-promise.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2NvcmUvYXBpLXByb21pc2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDdUY7QUFDWDtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AseURBQXlELHFFQUFvQjtBQUM3RTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSwyRUFBc0I7QUFDOUI7QUFDQTtBQUNBLDhCQUE4QiwyRUFBc0IsZ0ZBQWdGLGlFQUFZO0FBQ2hKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixxQkFBcUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0Esd0ZBQXdGLDJFQUFzQjtBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLy4uLy4uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9jb3JlL2FwaS1wcm9taXNlLm1qcz84YzExIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG52YXIgX0FQSVByb21pc2VfY2xpZW50O1xuaW1wb3J0IHsgX19jbGFzc1ByaXZhdGVGaWVsZEdldCwgX19jbGFzc1ByaXZhdGVGaWVsZFNldCB9IGZyb20gXCIuLi9pbnRlcm5hbC90c2xpYi5tanNcIjtcbmltcG9ydCB7IGRlZmF1bHRQYXJzZVJlc3BvbnNlLCBhZGRSZXF1ZXN0SUQsIH0gZnJvbSBcIi4uL2ludGVybmFsL3BhcnNlLm1qc1wiO1xuLyoqXG4gKiBBIHN1YmNsYXNzIG9mIGBQcm9taXNlYCBwcm92aWRpbmcgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kc1xuICogZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIFNESy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFQSVByb21pc2UgZXh0ZW5kcyBQcm9taXNlIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIHJlc3BvbnNlUHJvbWlzZSwgcGFyc2VSZXNwb25zZSA9IGRlZmF1bHRQYXJzZVJlc3BvbnNlKSB7XG4gICAgICAgIHN1cGVyKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG1heWJlIGEgYml0IHdlaXJkIGJ1dCB0aGlzIGhhcyB0byBiZSBhIG5vLW9wIHRvIG5vdCBpbXBsaWNpdGx5XG4gICAgICAgICAgICAvLyBwYXJzZSB0aGUgcmVzcG9uc2UgYm9keTsgaW5zdGVhZCAudGhlbiwgLmNhdGNoLCAuZmluYWxseSBhcmUgb3ZlcnJpZGRlblxuICAgICAgICAgICAgLy8gdG8gcGFyc2UgdGhlIHJlc3BvbnNlXG4gICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXNwb25zZVByb21pc2UgPSByZXNwb25zZVByb21pc2U7XG4gICAgICAgIHRoaXMucGFyc2VSZXNwb25zZSA9IHBhcnNlUmVzcG9uc2U7XG4gICAgICAgIF9BUElQcm9taXNlX2NsaWVudC5zZXQodGhpcywgdm9pZCAwKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfQVBJUHJvbWlzZV9jbGllbnQsIGNsaWVudCwgXCJmXCIpO1xuICAgIH1cbiAgICBfdGhlblVud3JhcCh0cmFuc2Zvcm0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBUElQcm9taXNlKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX0FQSVByb21pc2VfY2xpZW50LCBcImZcIiksIHRoaXMucmVzcG9uc2VQcm9taXNlLCBhc3luYyAoY2xpZW50LCBwcm9wcykgPT4gYWRkUmVxdWVzdElEKHRyYW5zZm9ybShhd2FpdCB0aGlzLnBhcnNlUmVzcG9uc2UoY2xpZW50LCBwcm9wcyksIHByb3BzKSwgcHJvcHMucmVzcG9uc2UpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcmF3IGBSZXNwb25zZWAgaW5zdGFuY2UgaW5zdGVhZCBvZiBwYXJzaW5nIHRoZSByZXNwb25zZVxuICAgICAqIGRhdGEuXG4gICAgICpcbiAgICAgKiBJZiB5b3Ugd2FudCB0byBwYXJzZSB0aGUgcmVzcG9uc2UgYm9keSBidXQgc3RpbGwgZ2V0IHRoZSBgUmVzcG9uc2VgXG4gICAgICogaW5zdGFuY2UsIHlvdSBjYW4gdXNlIHtAbGluayB3aXRoUmVzcG9uc2UoKX0uXG4gICAgICpcbiAgICAgKiDwn5GLIEdldHRpbmcgdGhlIHdyb25nIFR5cGVTY3JpcHQgdHlwZSBmb3IgYFJlc3BvbnNlYD9cbiAgICAgKiBUcnkgc2V0dGluZyBgXCJtb2R1bGVSZXNvbHV0aW9uXCI6IFwiTm9kZU5leHRcImAgb3IgYWRkIGBcImxpYlwiOiBbXCJET01cIl1gXG4gICAgICogdG8geW91ciBgdHNjb25maWcuanNvbmAuXG4gICAgICovXG4gICAgYXNSZXNwb25zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2VQcm9taXNlLnRoZW4oKHApID0+IHAucmVzcG9uc2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJzZWQgcmVzcG9uc2UgZGF0YSwgdGhlIHJhdyBgUmVzcG9uc2VgIGluc3RhbmNlIGFuZCB0aGUgSUQgb2YgdGhlIHJlcXVlc3QsXG4gICAgICogcmV0dXJuZWQgdmlhIHRoZSBgcmVxdWVzdC1pZGAgaGVhZGVyIHdoaWNoIGlzIHVzZWZ1bCBmb3IgZGVidWdnaW5nIHJlcXVlc3RzIGFuZCByZXNwb3J0aW5nXG4gICAgICogaXNzdWVzIHRvIEFudGhyb3BpYy5cbiAgICAgKlxuICAgICAqIElmIHlvdSBqdXN0IHdhbnQgdG8gZ2V0IHRoZSByYXcgYFJlc3BvbnNlYCBpbnN0YW5jZSB3aXRob3V0IHBhcnNpbmcgaXQsXG4gICAgICogeW91IGNhbiB1c2Uge0BsaW5rIGFzUmVzcG9uc2UoKX0uXG4gICAgICpcbiAgICAgKiDwn5GLIEdldHRpbmcgdGhlIHdyb25nIFR5cGVTY3JpcHQgdHlwZSBmb3IgYFJlc3BvbnNlYD9cbiAgICAgKiBUcnkgc2V0dGluZyBgXCJtb2R1bGVSZXNvbHV0aW9uXCI6IFwiTm9kZU5leHRcImAgb3IgYWRkIGBcImxpYlwiOiBbXCJET01cIl1gXG4gICAgICogdG8geW91ciBgdHNjb25maWcuanNvbmAuXG4gICAgICovXG4gICAgYXN5bmMgd2l0aFJlc3BvbnNlKCkge1xuICAgICAgICBjb25zdCBbZGF0YSwgcmVzcG9uc2VdID0gYXdhaXQgUHJvbWlzZS5hbGwoW3RoaXMucGFyc2UoKSwgdGhpcy5hc1Jlc3BvbnNlKCldKTtcbiAgICAgICAgcmV0dXJuIHsgZGF0YSwgcmVzcG9uc2UsIHJlcXVlc3RfaWQ6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdyZXF1ZXN0LWlkJykgfTtcbiAgICB9XG4gICAgcGFyc2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5wYXJzZWRQcm9taXNlKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlZFByb21pc2UgPSB0aGlzLnJlc3BvbnNlUHJvbWlzZS50aGVuKChkYXRhKSA9PiB0aGlzLnBhcnNlUmVzcG9uc2UoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfQVBJUHJvbWlzZV9jbGllbnQsIFwiZlwiKSwgZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlZFByb21pc2U7XG4gICAgfVxuICAgIHRoZW4ob25mdWxmaWxsZWQsIG9ucmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UoKS50aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKTtcbiAgICB9XG4gICAgY2F0Y2gob25yZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZSgpLmNhdGNoKG9ucmVqZWN0ZWQpO1xuICAgIH1cbiAgICBmaW5hbGx5KG9uZmluYWxseSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZSgpLmZpbmFsbHkob25maW5hbGx5KTtcbiAgICB9XG59XG5fQVBJUHJvbWlzZV9jbGllbnQgPSBuZXcgV2Vha01hcCgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLXByb21pc2UubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/core/api-promise.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/core/error.mjs":
/*!***********************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/core/error.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AnthropicError: () => (/* binding */ AnthropicError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/errors.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/errors.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nclass AnthropicError extends Error {\n}\nclass APIError extends AnthropicError {\n    constructor(status, error, message, headers) {\n        super(`${APIError.makeMessage(status, error, message)}`);\n        this.status = status;\n        this.headers = headers;\n        this.requestID = headers?.get('request-id');\n        this.error = error;\n    }\n    static makeMessage(status, error, message) {\n        const msg = error?.message ?\n            typeof error.message === 'string' ?\n                error.message\n                : JSON.stringify(error.message)\n            : error ? JSON.stringify(error)\n                : message;\n        if (status && msg) {\n            return `${status} ${msg}`;\n        }\n        if (status) {\n            return `${status} status code (no body)`;\n        }\n        if (msg) {\n            return msg;\n        }\n        return '(no status code or body)';\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status || !headers) {\n            return new APIConnectionError({ message, cause: (0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_0__.castToError)(errorResponse) });\n        }\n        const error = errorResponse;\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nclass APIUserAbortError extends APIError {\n    constructor({ message } = {}) {\n        super(undefined, undefined, message || 'Request was aborted.', undefined);\n    }\n}\nclass APIConnectionError extends APIError {\n    constructor({ message, cause }) {\n        super(undefined, undefined, message || 'Connection error.', undefined);\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause)\n            this.cause = cause;\n    }\n}\nclass APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}) {\n        super({ message: message ?? 'Request timed out.' });\n    }\n}\nclass BadRequestError extends APIError {\n}\nclass AuthenticationError extends APIError {\n}\nclass PermissionDeniedError extends APIError {\n}\nclass NotFoundError extends APIError {\n}\nclass ConflictError extends APIError {\n}\nclass UnprocessableEntityError extends APIError {\n}\nclass RateLimitError extends APIError {\n}\nclass InternalServerError extends APIError {\n}\n//# sourceMappingURL=error.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2NvcmUvZXJyb3IubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDcUQ7QUFDOUM7QUFDUDtBQUNPO0FBQ1A7QUFDQSxpQkFBaUIsNkNBQTZDO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVEsRUFBRSxJQUFJO0FBQ3BDO0FBQ0E7QUFDQSxzQkFBc0IsUUFBUTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGdCQUFnQixpRUFBVyxpQkFBaUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asa0JBQWtCLFVBQVUsSUFBSTtBQUNoQztBQUNBO0FBQ0E7QUFDTztBQUNQLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGtCQUFrQixVQUFVLElBQUk7QUFDaEMsZ0JBQWdCLDBDQUEwQztBQUMxRDtBQUNBO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2NvcmUvZXJyb3IubWpzP2I5ZmUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IGNhc3RUb0Vycm9yIH0gZnJvbSBcIi4uL2ludGVybmFsL2Vycm9ycy5tanNcIjtcbmV4cG9ydCBjbGFzcyBBbnRocm9waWNFcnJvciBleHRlbmRzIEVycm9yIHtcbn1cbmV4cG9ydCBjbGFzcyBBUElFcnJvciBleHRlbmRzIEFudGhyb3BpY0Vycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKSB7XG4gICAgICAgIHN1cGVyKGAke0FQSUVycm9yLm1ha2VNZXNzYWdlKHN0YXR1cywgZXJyb3IsIG1lc3NhZ2UpfWApO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgICAgdGhpcy5yZXF1ZXN0SUQgPSBoZWFkZXJzPy5nZXQoJ3JlcXVlc3QtaWQnKTtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgIH1cbiAgICBzdGF0aWMgbWFrZU1lc3NhZ2Uoc3RhdHVzLCBlcnJvciwgbWVzc2FnZSkge1xuICAgICAgICBjb25zdCBtc2cgPSBlcnJvcj8ubWVzc2FnZSA/XG4gICAgICAgICAgICB0eXBlb2YgZXJyb3IubWVzc2FnZSA9PT0gJ3N0cmluZycgP1xuICAgICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA6IEpTT04uc3RyaW5naWZ5KGVycm9yLm1lc3NhZ2UpXG4gICAgICAgICAgICA6IGVycm9yID8gSlNPTi5zdHJpbmdpZnkoZXJyb3IpXG4gICAgICAgICAgICAgICAgOiBtZXNzYWdlO1xuICAgICAgICBpZiAoc3RhdHVzICYmIG1zZykge1xuICAgICAgICAgICAgcmV0dXJuIGAke3N0YXR1c30gJHttc2d9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7c3RhdHVzfSBzdGF0dXMgY29kZSAobm8gYm9keSlgO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtc2cpIHtcbiAgICAgICAgICAgIHJldHVybiBtc2c7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcobm8gc3RhdHVzIGNvZGUgb3IgYm9keSknO1xuICAgIH1cbiAgICBzdGF0aWMgZ2VuZXJhdGUoc3RhdHVzLCBlcnJvclJlc3BvbnNlLCBtZXNzYWdlLCBoZWFkZXJzKSB7XG4gICAgICAgIGlmICghc3RhdHVzIHx8ICFoZWFkZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFQSUNvbm5lY3Rpb25FcnJvcih7IG1lc3NhZ2UsIGNhdXNlOiBjYXN0VG9FcnJvcihlcnJvclJlc3BvbnNlKSB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlcnJvciA9IGVycm9yUmVzcG9uc2U7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IDQwMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCYWRSZXF1ZXN0RXJyb3Ioc3RhdHVzLCBlcnJvciwgbWVzc2FnZSwgaGVhZGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3Ioc3RhdHVzLCBlcnJvciwgbWVzc2FnZSwgaGVhZGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gNDAzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBlcm1pc3Npb25EZW5pZWRFcnJvcihzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm90Rm91bmRFcnJvcihzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdHVzID09PSA0MDkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29uZmxpY3RFcnJvcihzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdHVzID09PSA0MjIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVW5wcm9jZXNzYWJsZUVudGl0eUVycm9yKHN0YXR1cywgZXJyb3IsIG1lc3NhZ2UsIGhlYWRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0dXMgPT09IDQyOSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSYXRlTGltaXRFcnJvcihzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdHVzID49IDUwMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnRlcm5hbFNlcnZlckVycm9yKHN0YXR1cywgZXJyb3IsIG1lc3NhZ2UsIGhlYWRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQVBJRXJyb3Ioc3RhdHVzLCBlcnJvciwgbWVzc2FnZSwgaGVhZGVycyk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFQSVVzZXJBYm9ydEVycm9yIGV4dGVuZHMgQVBJRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgbWVzc2FnZSB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIodW5kZWZpbmVkLCB1bmRlZmluZWQsIG1lc3NhZ2UgfHwgJ1JlcXVlc3Qgd2FzIGFib3J0ZWQuJywgdW5kZWZpbmVkKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQVBJQ29ubmVjdGlvbkVycm9yIGV4dGVuZHMgQVBJRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgbWVzc2FnZSwgY2F1c2UgfSkge1xuICAgICAgICBzdXBlcih1bmRlZmluZWQsIHVuZGVmaW5lZCwgbWVzc2FnZSB8fCAnQ29ubmVjdGlvbiBlcnJvci4nLCB1bmRlZmluZWQpO1xuICAgICAgICAvLyBpbiBzb21lIGVudmlyb25tZW50cyB0aGUgJ2NhdXNlJyBwcm9wZXJ0eSBpcyBhbHJlYWR5IGRlY2xhcmVkXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGNhdXNlKVxuICAgICAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBUElDb25uZWN0aW9uVGltZW91dEVycm9yIGV4dGVuZHMgQVBJQ29ubmVjdGlvbkVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IG1lc3NhZ2UgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHsgbWVzc2FnZTogbWVzc2FnZSA/PyAnUmVxdWVzdCB0aW1lZCBvdXQuJyB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQmFkUmVxdWVzdEVycm9yIGV4dGVuZHMgQVBJRXJyb3Ige1xufVxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uRXJyb3IgZXh0ZW5kcyBBUElFcnJvciB7XG59XG5leHBvcnQgY2xhc3MgUGVybWlzc2lvbkRlbmllZEVycm9yIGV4dGVuZHMgQVBJRXJyb3Ige1xufVxuZXhwb3J0IGNsYXNzIE5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBBUElFcnJvciB7XG59XG5leHBvcnQgY2xhc3MgQ29uZmxpY3RFcnJvciBleHRlbmRzIEFQSUVycm9yIHtcbn1cbmV4cG9ydCBjbGFzcyBVbnByb2Nlc3NhYmxlRW50aXR5RXJyb3IgZXh0ZW5kcyBBUElFcnJvciB7XG59XG5leHBvcnQgY2xhc3MgUmF0ZUxpbWl0RXJyb3IgZXh0ZW5kcyBBUElFcnJvciB7XG59XG5leHBvcnQgY2xhc3MgSW50ZXJuYWxTZXJ2ZXJFcnJvciBleHRlbmRzIEFQSUVycm9yIHtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/core/error.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/core/pagination.mjs":
/*!****************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/core/pagination.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractPage: () => (/* binding */ AbstractPage),\n/* harmony export */   Page: () => (/* binding */ Page),\n/* harmony export */   PagePromise: () => (/* binding */ PagePromise)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/error.mjs\");\n/* harmony import */ var _internal_parse_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/parse.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/parse.mjs\");\n/* harmony import */ var _api_promise_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./api-promise.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/api-promise.mjs\");\n/* harmony import */ var _internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/utils/values.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/values.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _AbstractPage_client;\n\n\n\n\n\nclass AbstractPage {\n    constructor(client, response, body, options) {\n        _AbstractPage_client.set(this, void 0);\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length)\n            return false;\n        return this.nextPageRequestOptions() != null;\n    }\n    async getNextPage() {\n        const nextOptions = this.nextPageRequestOptions();\n        if (!nextOptions) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AnthropicError('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');\n        }\n        return await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        let page = this;\n        yield page;\n        while (page.hasNextPage()) {\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()) {\n            for (const item of page.getPaginatedItems()) {\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nclass PagePromise extends _api_promise_mjs__WEBPACK_IMPORTED_MODULE_3__.APIPromise {\n    constructor(client, request, Page) {\n        super(client, request, async (client, props) => new Page(client, props.response, await (0,_internal_parse_mjs__WEBPACK_IMPORTED_MODULE_2__.defaultParseResponse)(client, props), props.options));\n    }\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */\n    async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page) {\n            yield item;\n        }\n    }\n}\nclass Page extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.data = body.data || [];\n        this.has_more = body.has_more || false;\n        this.first_id = body.first_id || null;\n        this.last_id = body.last_id || null;\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    hasNextPage() {\n        if (this.has_more === false) {\n            return false;\n        }\n        return super.hasNextPage();\n    }\n    nextPageRequestOptions() {\n        if (this.options.query?.['before_id']) {\n            // in reverse\n            const first_id = this.first_id;\n            if (!first_id) {\n                return null;\n            }\n            return {\n                ...this.options,\n                query: {\n                    ...(0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_4__.maybeObj)(this.options.query),\n                    before_id: first_id,\n                },\n            };\n        }\n        const cursor = this.last_id;\n        if (!cursor) {\n            return null;\n        }\n        return {\n            ...this.options,\n            query: {\n                ...(0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_4__.maybeObj)(this.options.query),\n                after_id: cursor,\n            },\n        };\n    }\n}\n//# sourceMappingURL=pagination.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2NvcmUvcGFnaW5hdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3VGO0FBQzFDO0FBQ2dCO0FBQ2Q7QUFDUztBQUNqRDtBQUNQO0FBQ0E7QUFDQSxRQUFRLDJFQUFzQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzREFBYyx5QkFBeUI7QUFDN0Q7QUFDQSxxQkFBcUIsMkVBQXNCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywwQkFBMEIsd0RBQVU7QUFDM0M7QUFDQSwrRkFBK0YseUVBQW9CO0FBQ25IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvRUFBUTtBQUMvQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsb0VBQVE7QUFDM0I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLy4uLy4uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9jb3JlL3BhZ2luYXRpb24ubWpzP2MwOWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbnZhciBfQWJzdHJhY3RQYWdlX2NsaWVudDtcbmltcG9ydCB7IF9fY2xhc3NQcml2YXRlRmllbGRHZXQsIF9fY2xhc3NQcml2YXRlRmllbGRTZXQgfSBmcm9tIFwiLi4vaW50ZXJuYWwvdHNsaWIubWpzXCI7XG5pbXBvcnQgeyBBbnRocm9waWNFcnJvciB9IGZyb20gXCIuL2Vycm9yLm1qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdFBhcnNlUmVzcG9uc2UgfSBmcm9tIFwiLi4vaW50ZXJuYWwvcGFyc2UubWpzXCI7XG5pbXBvcnQgeyBBUElQcm9taXNlIH0gZnJvbSBcIi4vYXBpLXByb21pc2UubWpzXCI7XG5pbXBvcnQgeyBtYXliZU9iaiB9IGZyb20gXCIuLi9pbnRlcm5hbC91dGlscy92YWx1ZXMubWpzXCI7XG5leHBvcnQgY2xhc3MgQWJzdHJhY3RQYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIF9BYnN0cmFjdFBhZ2VfY2xpZW50LnNldCh0aGlzLCB2b2lkIDApO1xuICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9BYnN0cmFjdFBhZ2VfY2xpZW50LCBjbGllbnQsIFwiZlwiKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIH1cbiAgICBoYXNOZXh0UGFnZSgpIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLmdldFBhZ2luYXRlZEl0ZW1zKCk7XG4gICAgICAgIGlmICghaXRlbXMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5uZXh0UGFnZVJlcXVlc3RPcHRpb25zKCkgIT0gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TmV4dFBhZ2UoKSB7XG4gICAgICAgIGNvbnN0IG5leHRPcHRpb25zID0gdGhpcy5uZXh0UGFnZVJlcXVlc3RPcHRpb25zKCk7XG4gICAgICAgIGlmICghbmV4dE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcignTm8gbmV4dCBwYWdlIGV4cGVjdGVkOyBwbGVhc2UgY2hlY2sgYC5oYXNOZXh0UGFnZSgpYCBiZWZvcmUgY2FsbGluZyBgLmdldE5leHRQYWdlKClgLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9BYnN0cmFjdFBhZ2VfY2xpZW50LCBcImZcIikucmVxdWVzdEFQSUxpc3QodGhpcy5jb25zdHJ1Y3RvciwgbmV4dE9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyAqaXRlclBhZ2VzKCkge1xuICAgICAgICBsZXQgcGFnZSA9IHRoaXM7XG4gICAgICAgIHlpZWxkIHBhZ2U7XG4gICAgICAgIHdoaWxlIChwYWdlLmhhc05leHRQYWdlKCkpIHtcbiAgICAgICAgICAgIHBhZ2UgPSBhd2FpdCBwYWdlLmdldE5leHRQYWdlKCk7XG4gICAgICAgICAgICB5aWVsZCBwYWdlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jICpbKF9BYnN0cmFjdFBhZ2VfY2xpZW50ID0gbmV3IFdlYWtNYXAoKSwgU3ltYm9sLmFzeW5jSXRlcmF0b3IpXSgpIHtcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBwYWdlIG9mIHRoaXMuaXRlclBhZ2VzKCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBwYWdlLmdldFBhZ2luYXRlZEl0ZW1zKCkpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIHN1YmNsYXNzIG9mIFByb21pc2Ugd2lsbCByZXNvbHZlIHRvIGFuIGluc3RhbnRpYXRlZCBQYWdlIG9uY2UgdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICpcbiAqIEl0IGFsc28gaW1wbGVtZW50cyBBc3luY0l0ZXJhYmxlIHRvIGFsbG93IGF1dG8tcGFnaW5hdGluZyBpdGVyYXRpb24gb24gYW4gdW5hd2FpdGVkIGxpc3QgY2FsbCwgZWc6XG4gKlxuICogICAgZm9yIGF3YWl0IChjb25zdCBpdGVtIG9mIGNsaWVudC5pdGVtcy5saXN0KCkpIHtcbiAqICAgICAgY29uc29sZS5sb2coaXRlbSlcbiAqICAgIH1cbiAqL1xuZXhwb3J0IGNsYXNzIFBhZ2VQcm9taXNlIGV4dGVuZHMgQVBJUHJvbWlzZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCByZXF1ZXN0LCBQYWdlKSB7XG4gICAgICAgIHN1cGVyKGNsaWVudCwgcmVxdWVzdCwgYXN5bmMgKGNsaWVudCwgcHJvcHMpID0+IG5ldyBQYWdlKGNsaWVudCwgcHJvcHMucmVzcG9uc2UsIGF3YWl0IGRlZmF1bHRQYXJzZVJlc3BvbnNlKGNsaWVudCwgcHJvcHMpLCBwcm9wcy5vcHRpb25zKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsbG93IGF1dG8tcGFnaW5hdGluZyBpdGVyYXRpb24gb24gYW4gdW5hd2FpdGVkIGxpc3QgY2FsbCwgZWc6XG4gICAgICpcbiAgICAgKiAgICBmb3IgYXdhaXQgKGNvbnN0IGl0ZW0gb2YgY2xpZW50Lml0ZW1zLmxpc3QoKSkge1xuICAgICAqICAgICAgY29uc29sZS5sb2coaXRlbSlcbiAgICAgKiAgICB9XG4gICAgICovXG4gICAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCB0aGlzO1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGl0ZW0gb2YgcGFnZSkge1xuICAgICAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBQYWdlIGV4dGVuZHMgQWJzdHJhY3RQYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNsaWVudCwgcmVzcG9uc2UsIGJvZHksIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmRhdGEgPSBib2R5LmRhdGEgfHwgW107XG4gICAgICAgIHRoaXMuaGFzX21vcmUgPSBib2R5Lmhhc19tb3JlIHx8IGZhbHNlO1xuICAgICAgICB0aGlzLmZpcnN0X2lkID0gYm9keS5maXJzdF9pZCB8fCBudWxsO1xuICAgICAgICB0aGlzLmxhc3RfaWQgPSBib2R5Lmxhc3RfaWQgfHwgbnVsbDtcbiAgICB9XG4gICAgZ2V0UGFnaW5hdGVkSXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEgPz8gW107XG4gICAgfVxuICAgIGhhc05leHRQYWdlKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNfbW9yZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuaGFzTmV4dFBhZ2UoKTtcbiAgICB9XG4gICAgbmV4dFBhZ2VSZXF1ZXN0T3B0aW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5xdWVyeT8uWydiZWZvcmVfaWQnXSkge1xuICAgICAgICAgICAgLy8gaW4gcmV2ZXJzZVxuICAgICAgICAgICAgY29uc3QgZmlyc3RfaWQgPSB0aGlzLmZpcnN0X2lkO1xuICAgICAgICAgICAgaWYgKCFmaXJzdF9pZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ubWF5YmVPYmoodGhpcy5vcHRpb25zLnF1ZXJ5KSxcbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlX2lkOiBmaXJzdF9pZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJzb3IgPSB0aGlzLmxhc3RfaWQ7XG4gICAgICAgIGlmICghY3Vyc29yKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICAuLi5tYXliZU9iaih0aGlzLm9wdGlvbnMucXVlcnkpLFxuICAgICAgICAgICAgICAgIGFmdGVyX2lkOiBjdXJzb3IsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2luYXRpb24ubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/core/pagination.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/core/resource.mjs":
/*!**************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/core/resource.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIResource: () => (/* binding */ APIResource)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nclass APIResource {\n    constructor(client) {\n        this._client = client;\n    }\n}\n//# sourceMappingURL=resource.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2NvcmUvcmVzb3VyY2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2NvcmUvcmVzb3VyY2UubWpzPzNiZmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmV4cG9ydCBjbGFzcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvdXJjZS5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/core/resource.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/core/streaming.mjs":
/*!***************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/core/streaming.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* binding */ Stream),\n/* harmony export */   _iterSSEMessages: () => (/* binding */ _iterSSEMessages)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/error.mjs\");\n/* harmony import */ var _internal_shims_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/shims.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/shims.mjs\");\n/* harmony import */ var _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/decoders/line.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs\");\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/errors.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/errors.mjs\");\n/* harmony import */ var _internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../internal/utils/values.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/values.mjs\");\n/* harmony import */ var _internal_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../internal/utils/bytes.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/bytes.mjs\");\n/* harmony import */ var _internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../internal/utils/log.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/log.mjs\");\nvar _Stream_client;\n\n\n\n\n\n\n\n\n\n\nclass Stream {\n    constructor(iterator, controller, client) {\n        this.iterator = iterator;\n        _Stream_client.set(this, void 0);\n        this.controller = controller;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _Stream_client, client, \"f\");\n    }\n    static fromSSEResponse(response, controller, client) {\n        let consumed = false;\n        const logger = client ? (0,_internal_utils_log_mjs__WEBPACK_IMPORTED_MODULE_7__.loggerFor)(client) : console;\n        async function* iterator() {\n            if (consumed) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AnthropicError('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of _iterSSEMessages(response, controller)) {\n                    if (sse.event === 'completion') {\n                        try {\n                            yield JSON.parse(sse.data);\n                        }\n                        catch (e) {\n                            logger.error(`Could not parse message into JSON:`, sse.data);\n                            logger.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                    }\n                    if (sse.event === 'message_start' ||\n                        sse.event === 'message_delta' ||\n                        sse.event === 'message_stop' ||\n                        sse.event === 'content_block_start' ||\n                        sse.event === 'content_block_delta' ||\n                        sse.event === 'content_block_stop') {\n                        try {\n                            yield JSON.parse(sse.data);\n                        }\n                        catch (e) {\n                            logger.error(`Could not parse message into JSON:`, sse.data);\n                            logger.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                    }\n                    if (sse.event === 'ping') {\n                        continue;\n                    }\n                    if (sse.event === 'error') {\n                        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError(undefined, (0,_internal_utils_values_mjs__WEBPACK_IMPORTED_MODULE_5__.safeJSON)(sse.data) ?? sse.data, undefined, response.headers);\n                    }\n                }\n                done = true;\n            }\n            catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if ((0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__.isAbortError)(e))\n                    return;\n                throw e;\n            }\n            finally {\n                // If the user `break`s, abort the ongoing request.\n                if (!done)\n                    controller.abort();\n            }\n        }\n        return new Stream(iterator, controller, client);\n    }\n    /**\n     * Generates a Stream from a newline-separated ReadableStream\n     * where each item is a JSON value.\n     */\n    static fromReadableStream(readableStream, controller, client) {\n        let consumed = false;\n        async function* iterLines() {\n            const lineDecoder = new _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__.LineDecoder();\n            const iter = (0,_internal_shims_mjs__WEBPACK_IMPORTED_MODULE_2__.ReadableStreamToAsyncIterable)(readableStream);\n            for await (const chunk of iter) {\n                for (const line of lineDecoder.decode(chunk)) {\n                    yield line;\n                }\n            }\n            for (const line of lineDecoder.flush()) {\n                yield line;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AnthropicError('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const line of iterLines()) {\n                    if (done)\n                        continue;\n                    if (line)\n                        yield JSON.parse(line);\n                }\n                done = true;\n            }\n            catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if ((0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_4__.isAbortError)(e))\n                    return;\n                throw e;\n            }\n            finally {\n                // If the user `break`s, abort the ongoing request.\n                if (!done)\n                    controller.abort();\n            }\n        }\n        return new Stream(iterator, controller, client);\n    }\n    [(_Stream_client = new WeakMap(), Symbol.asyncIterator)]() {\n        return this.iterator();\n    }\n    /**\n     * Splits the stream into two streams which can be\n     * independently read from at different speeds.\n     */\n    tee() {\n        const left = [];\n        const right = [];\n        const iterator = this.iterator();\n        const teeIterator = (queue) => {\n            return {\n                next: () => {\n                    if (queue.length === 0) {\n                        const result = iterator.next();\n                        left.push(result);\n                        right.push(result);\n                    }\n                    return queue.shift();\n                },\n            };\n        };\n        return [\n            new Stream(() => teeIterator(left), this.controller, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Stream_client, \"f\")),\n            new Stream(() => teeIterator(right), this.controller, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _Stream_client, \"f\")),\n        ];\n    }\n    /**\n     * Converts this stream to a newline-separated ReadableStream of\n     * JSON stringified values in the stream\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n     */\n    toReadableStream() {\n        const self = this;\n        let iter;\n        return (0,_internal_shims_mjs__WEBPACK_IMPORTED_MODULE_2__.makeReadableStream)({\n            async start() {\n                iter = self[Symbol.asyncIterator]();\n            },\n            async pull(ctrl) {\n                try {\n                    const { value, done } = await iter.next();\n                    if (done)\n                        return ctrl.close();\n                    const bytes = (0,_internal_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_6__.encodeUTF8)(JSON.stringify(value) + '\\n');\n                    ctrl.enqueue(bytes);\n                }\n                catch (err) {\n                    ctrl.error(err);\n                }\n            },\n            async cancel() {\n                await iter.return?.();\n            },\n        });\n    }\n}\nasync function* _iterSSEMessages(response, controller) {\n    if (!response.body) {\n        controller.abort();\n        if (typeof globalThis.navigator !== 'undefined' &&\n            globalThis.navigator.product === 'ReactNative') {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AnthropicError(`The default react-native fetch implementation does not support streaming. Please use expo/fetch: https://docs.expo.dev/versions/latest/sdk/expo/#expofetch-api`);\n        }\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AnthropicError(`Attempted to iterate over a response with no body`);\n    }\n    const sseDecoder = new SSEDecoder();\n    const lineDecoder = new _internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__.LineDecoder();\n    const iter = (0,_internal_shims_mjs__WEBPACK_IMPORTED_MODULE_2__.ReadableStreamToAsyncIterable)(response.body);\n    for await (const sseChunk of iterSSEChunks(iter)) {\n        for (const line of lineDecoder.decode(sseChunk)) {\n            const sse = sseDecoder.decode(line);\n            if (sse)\n                yield sse;\n        }\n    }\n    for (const line of lineDecoder.flush()) {\n        const sse = sseDecoder.decode(line);\n        if (sse)\n            yield sse;\n    }\n}\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */\nasync function* iterSSEChunks(iterator) {\n    let data = new Uint8Array();\n    for await (const chunk of iterator) {\n        if (chunk == null) {\n            continue;\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n            : typeof chunk === 'string' ? (0,_internal_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_6__.encodeUTF8)(chunk)\n                : chunk;\n        let newData = new Uint8Array(data.length + binaryChunk.length);\n        newData.set(data);\n        newData.set(binaryChunk, data.length);\n        data = newData;\n        let patternIndex;\n        while ((patternIndex = (0,_internal_decoders_line_mjs__WEBPACK_IMPORTED_MODULE_3__.findDoubleNewlineIndex)(data)) !== -1) {\n            yield data.slice(0, patternIndex);\n            data = data.slice(patternIndex);\n        }\n    }\n    if (data.length > 0) {\n        yield data;\n    }\n}\nclass SSEDecoder {\n    constructor() {\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith('\\r')) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length)\n                return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join('\\n'),\n                raw: this.chunks,\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(':')) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, ':');\n        if (value.startsWith(' ')) {\n            value = value.substring(1);\n        }\n        if (fieldname === 'event') {\n            this.event = value;\n        }\n        else if (fieldname === 'data') {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n    }\n    return [str, '', ''];\n}\n//# sourceMappingURL=streaming.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/core/streaming.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/core/uploads.mjs":
/*!*************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/core/uploads.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toFile: () => (/* reexport safe */ _internal_to_file_mjs__WEBPACK_IMPORTED_MODULE_0__.toFile)\n/* harmony export */ });\n/* harmony import */ var _internal_to_file_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/to-file.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/to-file.mjs\");\n\n//# sourceMappingURL=uploads.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2NvcmUvdXBsb2Fkcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUQ7QUFDakQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLy4uLy4uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9jb3JlL3VwbG9hZHMubWpzPzBhZDgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgdG9GaWxlIH0gZnJvbSBcIi4uL2ludGVybmFsL3RvLWZpbGUubWpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cGxvYWRzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/core/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/error.mjs":
/*!******************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/error.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIError),\n/* harmony export */   APIUserAbortError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError),\n/* harmony export */   AnthropicError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError),\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.BadRequestError),\n/* harmony export */   ConflictError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.ConflictError),\n/* harmony export */   InternalServerError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.InternalServerError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.NotFoundError),\n/* harmony export */   PermissionDeniedError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/error.mjs\");\n\n//# sourceMappingURL=error.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2Vycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFpQztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2Vycm9yLm1qcz8yZmZhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2NvcmUvZXJyb3IubWpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/error.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/index.mjs":
/*!******************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AI_PROMPT: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AI_PROMPT),\n/* harmony export */   APIConnectionError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIError),\n/* harmony export */   APIPromise: () => (/* reexport safe */ _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_2__.APIPromise),\n/* harmony export */   APIUserAbortError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.APIUserAbortError),\n/* harmony export */   Anthropic: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.Anthropic),\n/* harmony export */   AnthropicError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.AnthropicError),\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.BadRequestError),\n/* harmony export */   BaseAnthropic: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseAnthropic),\n/* harmony export */   ConflictError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.ConflictError),\n/* harmony export */   HUMAN_PROMPT: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.HUMAN_PROMPT),\n/* harmony export */   InternalServerError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.InternalServerError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.NotFoundError),\n/* harmony export */   PagePromise: () => (/* reexport safe */ _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_3__.PagePromise),\n/* harmony export */   PermissionDeniedError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* reexport safe */ _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__.UnprocessableEntityError),\n/* harmony export */   \"default\": () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.Anthropic),\n/* harmony export */   toFile: () => (/* reexport safe */ _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.toFile)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/client.mjs\");\n/* harmony import */ var _core_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/uploads.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/uploads.mjs\");\n/* harmony import */ var _core_api_promise_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/api-promise.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/api-promise.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/pagination.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/error.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ29EO0FBQ1I7QUFDUTtBQUM2QjtBQUM3QjtBQUNxTztBQUN6UiIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2luZGV4Lm1qcz82N2RhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQgeyBBbnRocm9waWMgYXMgZGVmYXVsdCB9IGZyb20gXCIuL2NsaWVudC5tanNcIjtcbmV4cG9ydCB7IHRvRmlsZSB9IGZyb20gXCIuL2NvcmUvdXBsb2Fkcy5tanNcIjtcbmV4cG9ydCB7IEFQSVByb21pc2UgfSBmcm9tIFwiLi9jb3JlL2FwaS1wcm9taXNlLm1qc1wiO1xuZXhwb3J0IHsgQmFzZUFudGhyb3BpYywgQW50aHJvcGljLCBIVU1BTl9QUk9NUFQsIEFJX1BST01QVCB9IGZyb20gXCIuL2NsaWVudC5tanNcIjtcbmV4cG9ydCB7IFBhZ2VQcm9taXNlIH0gZnJvbSBcIi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuZXhwb3J0IHsgQW50aHJvcGljRXJyb3IsIEFQSUVycm9yLCBBUElDb25uZWN0aW9uRXJyb3IsIEFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IsIEFQSVVzZXJBYm9ydEVycm9yLCBOb3RGb3VuZEVycm9yLCBDb25mbGljdEVycm9yLCBSYXRlTGltaXRFcnJvciwgQmFkUmVxdWVzdEVycm9yLCBBdXRoZW50aWNhdGlvbkVycm9yLCBJbnRlcm5hbFNlcnZlckVycm9yLCBQZXJtaXNzaW9uRGVuaWVkRXJyb3IsIFVucHJvY2Vzc2FibGVFbnRpdHlFcnJvciwgfSBmcm9tIFwiLi9jb3JlL2Vycm9yLm1qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/constants.mjs":
/*!*******************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/constants.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MODEL_NONSTREAMING_TOKENS: () => (/* binding */ MODEL_NONSTREAMING_TOKENS)\n/* harmony export */ });\n// File containing shared constants\n/**\n * Model-specific timeout constraints for non-streaming requests\n */\nconst MODEL_NONSTREAMING_TOKENS = {\n    'claude-opus-4-20250514': 8192,\n    'claude-opus-4-0': 8192,\n    'claude-4-opus-20250514': 8192,\n    'anthropic.claude-opus-4-20250514-v1:0': 8192,\n    'claude-opus-4@20250514': 8192,\n    'claude-opus-4-1-20250805': 8192,\n    'anthropic.claude-opus-4-1-20250805-v1:0': 8192,\n    'claude-opus-4-1@20250805': 8192,\n};\n//# sourceMappingURL=constants.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL2NvbnN0YW50cy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL2NvbnN0YW50cy5tanM/MDRjMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGNvbnRhaW5pbmcgc2hhcmVkIGNvbnN0YW50c1xuLyoqXG4gKiBNb2RlbC1zcGVjaWZpYyB0aW1lb3V0IGNvbnN0cmFpbnRzIGZvciBub24tc3RyZWFtaW5nIHJlcXVlc3RzXG4gKi9cbmV4cG9ydCBjb25zdCBNT0RFTF9OT05TVFJFQU1JTkdfVE9LRU5TID0ge1xuICAgICdjbGF1ZGUtb3B1cy00LTIwMjUwNTE0JzogODE5MixcbiAgICAnY2xhdWRlLW9wdXMtNC0wJzogODE5MixcbiAgICAnY2xhdWRlLTQtb3B1cy0yMDI1MDUxNCc6IDgxOTIsXG4gICAgJ2FudGhyb3BpYy5jbGF1ZGUtb3B1cy00LTIwMjUwNTE0LXYxOjAnOiA4MTkyLFxuICAgICdjbGF1ZGUtb3B1cy00QDIwMjUwNTE0JzogODE5MixcbiAgICAnY2xhdWRlLW9wdXMtNC0xLTIwMjUwODA1JzogODE5MixcbiAgICAnYW50aHJvcGljLmNsYXVkZS1vcHVzLTQtMS0yMDI1MDgwNS12MTowJzogODE5MixcbiAgICAnY2xhdWRlLW9wdXMtNC0xQDIwMjUwODA1JzogODE5Mixcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/constants.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs":
/*!************************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JSONLDecoder: () => (/* binding */ JSONLDecoder)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/error.mjs\");\n/* harmony import */ var _shims_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shims.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/shims.mjs\");\n/* harmony import */ var _line_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs\");\n\n\n\nclass JSONLDecoder {\n    constructor(iterator, controller) {\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n    async *decoder() {\n        const lineDecoder = new _line_mjs__WEBPACK_IMPORTED_MODULE_2__.LineDecoder();\n        for await (const chunk of this.iterator) {\n            for (const line of lineDecoder.decode(chunk)) {\n                yield JSON.parse(line);\n            }\n        }\n        for (const line of lineDecoder.flush()) {\n            yield JSON.parse(line);\n        }\n    }\n    [Symbol.asyncIterator]() {\n        return this.decoder();\n    }\n    static fromResponse(response, controller) {\n        if (!response.body) {\n            controller.abort();\n            if (typeof globalThis.navigator !== 'undefined' &&\n                globalThis.navigator.product === 'ReactNative') {\n                throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`The default react-native fetch implementation does not support streaming. Please use expo/fetch: https://docs.expo.dev/versions/latest/sdk/expo/#expofetch-api`);\n            }\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`Attempted to iterate over a response with no body`);\n        }\n        return new JSONLDecoder((0,_shims_mjs__WEBPACK_IMPORTED_MODULE_1__.ReadableStreamToAsyncIterable)(response.body), controller);\n    }\n}\n//# sourceMappingURL=jsonl.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL2RlY29kZXJzL2pzb25sLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNEO0FBQ087QUFDcEI7QUFDbEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtEQUFXO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsMkRBQWM7QUFDeEM7QUFDQSxzQkFBc0IsMkRBQWM7QUFDcEM7QUFDQSxnQ0FBZ0MseUVBQTZCO0FBQzdEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL2RlY29kZXJzL2pzb25sLm1qcz8zZGMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFudGhyb3BpY0Vycm9yIH0gZnJvbSBcIi4uLy4uL2NvcmUvZXJyb3IubWpzXCI7XG5pbXBvcnQgeyBSZWFkYWJsZVN0cmVhbVRvQXN5bmNJdGVyYWJsZSB9IGZyb20gXCIuLi9zaGltcy5tanNcIjtcbmltcG9ydCB7IExpbmVEZWNvZGVyIH0gZnJvbSBcIi4vbGluZS5tanNcIjtcbmV4cG9ydCBjbGFzcyBKU09OTERlY29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGl0ZXJhdG9yLCBjb250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMuaXRlcmF0b3IgPSBpdGVyYXRvcjtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgICB9XG4gICAgYXN5bmMgKmRlY29kZXIoKSB7XG4gICAgICAgIGNvbnN0IGxpbmVEZWNvZGVyID0gbmV3IExpbmVEZWNvZGVyKCk7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgdGhpcy5pdGVyYXRvcikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVEZWNvZGVyLmRlY29kZShjaHVuaykpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBKU09OLnBhcnNlKGxpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5mbHVzaCgpKSB7XG4gICAgICAgICAgICB5aWVsZCBKU09OLnBhcnNlKGxpbmUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlY29kZXIoKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21SZXNwb25zZShyZXNwb25zZSwgY29udHJvbGxlcikge1xuICAgICAgICBpZiAoIXJlc3BvbnNlLmJvZHkpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcy5uYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5uYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihgVGhlIGRlZmF1bHQgcmVhY3QtbmF0aXZlIGZldGNoIGltcGxlbWVudGF0aW9uIGRvZXMgbm90IHN1cHBvcnQgc3RyZWFtaW5nLiBQbGVhc2UgdXNlIGV4cG8vZmV0Y2g6IGh0dHBzOi8vZG9jcy5leHBvLmRldi92ZXJzaW9ucy9sYXRlc3Qvc2RrL2V4cG8vI2V4cG9mZXRjaC1hcGlgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihgQXR0ZW1wdGVkIHRvIGl0ZXJhdGUgb3ZlciBhIHJlc3BvbnNlIHdpdGggbm8gYm9keWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgSlNPTkxEZWNvZGVyKFJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlKHJlc3BvbnNlLmJvZHkpLCBjb250cm9sbGVyKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29ubC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs":
/*!***********************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LineDecoder: () => (/* binding */ LineDecoder),\n/* harmony export */   findDoubleNewlineIndex: () => (/* binding */ findDoubleNewlineIndex)\n/* harmony export */ });\n/* harmony import */ var _tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tslib.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/bytes.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/bytes.mjs\");\nvar _LineDecoder_buffer, _LineDecoder_carriageReturnIndex;\n\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n    constructor() {\n        _LineDecoder_buffer.set(this, void 0);\n        _LineDecoder_carriageReturnIndex.set(this, void 0);\n        (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, new Uint8Array(), \"f\");\n        (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n    }\n    decode(chunk) {\n        if (chunk == null) {\n            return [];\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n            : typeof chunk === 'string' ? (0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.encodeUTF8)(chunk)\n                : chunk;\n        (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, (0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.concatBytes)([(0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\"), binaryChunk]), \"f\");\n        const lines = [];\n        let patternIndex;\n        while ((patternIndex = findNewlineIndex((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\"), (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\"))) != null) {\n            if (patternIndex.carriage && (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") == null) {\n                // skip until we either get a corresponding `\\n`, a new `\\r` or nothing\n                (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, patternIndex.index, \"f\");\n                continue;\n            }\n            // we got double \\r or \\rtext\\n\n            if ((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") != null &&\n                (patternIndex.index !== (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") + 1 || patternIndex.carriage)) {\n                lines.push((0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.decodeUTF8)((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray(0, (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") - 1)));\n                (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\")), \"f\");\n                (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n                continue;\n            }\n            const endIndex = (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_carriageReturnIndex, \"f\") !== null ? patternIndex.preceding - 1 : patternIndex.preceding;\n            const line = (0,_utils_bytes_mjs__WEBPACK_IMPORTED_MODULE_1__.decodeUTF8)((0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray(0, endIndex));\n            lines.push(line);\n            (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_buffer, (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").subarray(patternIndex.index), \"f\");\n            (0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n        }\n        return lines;\n    }\n    flush() {\n        if (!(0,_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _LineDecoder_buffer, \"f\").length) {\n            return [];\n        }\n        return this.decode('\\n');\n    }\n}\n_LineDecoder_buffer = new WeakMap(), _LineDecoder_carriageReturnIndex = new WeakMap();\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r']);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n/**\n * This function searches the buffer for the end patterns, (\\r or \\n)\n * and returns an object with the index preceding the matched newline and the\n * index after the newline char. `null` is returned if no new line is found.\n *\n * ```ts\n * findNewLineIndex('abc\\ndef') -> { preceding: 2, index: 3 }\n * ```\n */\nfunction findNewlineIndex(buffer, startIndex) {\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for (let i = startIndex ?? 0; i < buffer.length; i++) {\n        if (buffer[i] === newline) {\n            return { preceding: i, index: i + 1, carriage: false };\n        }\n        if (buffer[i] === carriage) {\n            return { preceding: i, index: i + 1, carriage: true };\n        }\n    }\n    return null;\n}\nfunction findDoubleNewlineIndex(buffer) {\n    // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n    // and returns the index right after the first occurrence of any pattern,\n    // or -1 if none of the patterns are found.\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for (let i = 0; i < buffer.length - 1; i++) {\n        if (buffer[i] === newline && buffer[i + 1] === newline) {\n            // \\n\\n\n            return i + 2;\n        }\n        if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n            // \\r\\r\n            return i + 2;\n        }\n        if (buffer[i] === carriage &&\n            buffer[i + 1] === newline &&\n            i + 3 < buffer.length &&\n            buffer[i + 2] === carriage &&\n            buffer[i + 3] === newline) {\n            // \\r\\n\\r\\n\n            return i + 4;\n        }\n    }\n    return -1;\n}\n//# sourceMappingURL=line.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/decoders/line.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/detect-platform.mjs":
/*!*************************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/detect-platform.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPlatformHeaders: () => (/* binding */ getPlatformHeaders),\n/* harmony export */   isRunningInBrowser: () => (/* binding */ isRunningInBrowser)\n/* harmony export */ });\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/version.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nconst isRunningInBrowser = () => {\n    return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n        // @ts-ignore\n        typeof window.document !== 'undefined' &&\n        // @ts-ignore\n        typeof navigator !== 'undefined');\n};\n/**\n * Note this does not detect 'browser'; for that, use getBrowserInfo().\n */\nfunction getDetectedPlatform() {\n    if (typeof Deno !== 'undefined' && Deno.build != null) {\n        return 'deno';\n    }\n    if (typeof EdgeRuntime !== 'undefined') {\n        return 'edge';\n    }\n    if (Object.prototype.toString.call(typeof globalThis.process !== 'undefined' ? globalThis.process : 0) === '[object process]') {\n        return 'node';\n    }\n    return 'unknown';\n}\nconst getPlatformProperties = () => {\n    const detectedPlatform = getDetectedPlatform();\n    if (detectedPlatform === 'deno') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            'X-Stainless-OS': normalizePlatform(Deno.build.os),\n            'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n            'X-Stainless-Runtime': 'deno',\n            'X-Stainless-Runtime-Version': typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown',\n        };\n    }\n    if (typeof EdgeRuntime !== 'undefined') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': `other:${EdgeRuntime}`,\n            'X-Stainless-Runtime': 'edge',\n            'X-Stainless-Runtime-Version': globalThis.process.version,\n        };\n    }\n    // Check if Node.js\n    if (detectedPlatform === 'node') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            'X-Stainless-OS': normalizePlatform(globalThis.process.platform ?? 'unknown'),\n            'X-Stainless-Arch': normalizeArch(globalThis.process.arch ?? 'unknown'),\n            'X-Stainless-Runtime': 'node',\n            'X-Stainless-Runtime-Version': globalThis.process.version ?? 'unknown',\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': 'unknown',\n            'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n            'X-Stainless-Runtime-Version': browserInfo.version,\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        'X-Stainless-Lang': 'js',\n        'X-Stainless-Package-Version': _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n        'X-Stainless-OS': 'Unknown',\n        'X-Stainless-Arch': 'unknown',\n        'X-Stainless-Runtime': 'unknown',\n        'X-Stainless-Runtime-Version': 'unknown',\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === 'undefined' || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        { key: 'edge', pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'chrome', pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'firefox', pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'safari', pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns) {\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return { browser: key, version: `${major}.${minor}.${patch}` };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch) => {\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === 'x32')\n        return 'x32';\n    if (arch === 'x86_64' || arch === 'x64')\n        return 'x64';\n    if (arch === 'arm')\n        return 'arm';\n    if (arch === 'aarch64' || arch === 'arm64')\n        return 'arm64';\n    if (arch)\n        return `other:${arch}`;\n    return 'unknown';\n};\nconst normalizePlatform = (platform) => {\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes('ios'))\n        return 'iOS';\n    if (platform === 'android')\n        return 'Android';\n    if (platform === 'darwin')\n        return 'MacOS';\n    if (platform === 'win32')\n        return 'Windows';\n    if (platform === 'freebsd')\n        return 'FreeBSD';\n    if (platform === 'openbsd')\n        return 'OpenBSD';\n    if (platform === 'linux')\n        return 'Linux';\n    if (platform)\n        return `Other:${platform}`;\n    return 'Unknown';\n};\nlet _platformHeaders;\nconst getPlatformHeaders = () => {\n    return (_platformHeaders ?? (_platformHeaders = getPlatformProperties()));\n};\n//# sourceMappingURL=detect-platform.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/detect-platform.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/errors.mjs":
/*!****************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/errors.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   castToError: () => (/* binding */ castToError),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nfunction isAbortError(err) {\n    return (typeof err === 'object' &&\n        err !== null &&\n        // Spec-compliant fetch implementations\n        (('name' in err && err.name === 'AbortError') ||\n            // Expo fetch\n            ('message' in err && String(err.message).includes('FetchRequestCanceledException'))));\n}\nconst castToError = (err) => {\n    if (err instanceof Error)\n        return err;\n    if (typeof err === 'object' && err !== null) {\n        try {\n            if (Object.prototype.toString.call(err) === '[object Error]') {\n                // @ts-ignore - not all envs have native support for cause yet\n                const error = new Error(err.message, err.cause ? { cause: err.cause } : {});\n                if (err.stack)\n                    error.stack = err.stack;\n                // @ts-ignore - not all envs have native support for cause yet\n                if (err.cause && !error.cause)\n                    error.cause = err.cause;\n                if (err.name)\n                    error.name = err.name;\n                return error;\n            }\n        }\n        catch { }\n        try {\n            return new Error(JSON.stringify(err));\n        }\n        catch { }\n    }\n    return new Error(err);\n};\n//# sourceMappingURL=errors.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL2Vycm9ycy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxtQkFBbUIsSUFBSTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL2Vycm9ycy5tanM/ZjBkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuZXhwb3J0IGZ1bmN0aW9uIGlzQWJvcnRFcnJvcihlcnIpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBlcnIgPT09ICdvYmplY3QnICYmXG4gICAgICAgIGVyciAhPT0gbnVsbCAmJlxuICAgICAgICAvLyBTcGVjLWNvbXBsaWFudCBmZXRjaCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgKCgnbmFtZScgaW4gZXJyICYmIGVyci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHx8XG4gICAgICAgICAgICAvLyBFeHBvIGZldGNoXG4gICAgICAgICAgICAoJ21lc3NhZ2UnIGluIGVyciAmJiBTdHJpbmcoZXJyLm1lc3NhZ2UpLmluY2x1ZGVzKCdGZXRjaFJlcXVlc3RDYW5jZWxlZEV4Y2VwdGlvbicpKSkpO1xufVxuZXhwb3J0IGNvbnN0IGNhc3RUb0Vycm9yID0gKGVycikgPT4ge1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcilcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICBpZiAodHlwZW9mIGVyciA9PT0gJ29iamVjdCcgJiYgZXJyICE9PSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGVycikgPT09ICdbb2JqZWN0IEVycm9yXScpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIC0gbm90IGFsbCBlbnZzIGhhdmUgbmF0aXZlIHN1cHBvcnQgZm9yIGNhdXNlIHlldFxuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGVyci5tZXNzYWdlLCBlcnIuY2F1c2UgPyB7IGNhdXNlOiBlcnIuY2F1c2UgfSA6IHt9KTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLnN0YWNrKVxuICAgICAgICAgICAgICAgICAgICBlcnJvci5zdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIC0gbm90IGFsbCBlbnZzIGhhdmUgbmF0aXZlIHN1cHBvcnQgZm9yIGNhdXNlIHlldFxuICAgICAgICAgICAgICAgIGlmIChlcnIuY2F1c2UgJiYgIWVycm9yLmNhdXNlKVxuICAgICAgICAgICAgICAgICAgICBlcnJvci5jYXVzZSA9IGVyci5jYXVzZTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLm5hbWUgPSBlcnIubmFtZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggeyB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KGVycikpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHsgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IEVycm9yKGVycik7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/errors.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/headers.mjs":
/*!*****************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/headers.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildHeaders: () => (/* binding */ buildHeaders),\n/* harmony export */   isEmptyHeaders: () => (/* binding */ isEmptyHeaders)\n/* harmony export */ });\n/* harmony import */ var _utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/values.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/values.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nconst brand_privateNullableHeaders = Symbol.for('brand.privateNullableHeaders');\nfunction* iterateHeaders(headers) {\n    if (!headers)\n        return;\n    if (brand_privateNullableHeaders in headers) {\n        const { values, nulls } = headers;\n        yield* values.entries();\n        for (const name of nulls) {\n            yield [name, null];\n        }\n        return;\n    }\n    let shouldClear = false;\n    let iter;\n    if (headers instanceof Headers) {\n        iter = headers.entries();\n    }\n    else if ((0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.isReadonlyArray)(headers)) {\n        iter = headers;\n    }\n    else {\n        shouldClear = true;\n        iter = Object.entries(headers ?? {});\n    }\n    for (let row of iter) {\n        const name = row[0];\n        if (typeof name !== 'string')\n            throw new TypeError('expected header name to be a string');\n        const values = (0,_utils_values_mjs__WEBPACK_IMPORTED_MODULE_0__.isReadonlyArray)(row[1]) ? row[1] : [row[1]];\n        let didClear = false;\n        for (const value of values) {\n            if (value === undefined)\n                continue;\n            // Objects keys always overwrite older headers, they never append.\n            // Yield a null to clear the header before adding the new values.\n            if (shouldClear && !didClear) {\n                didClear = true;\n                yield [name, null];\n            }\n            yield [name, value];\n        }\n    }\n}\nconst buildHeaders = (newHeaders) => {\n    const targetHeaders = new Headers();\n    const nullHeaders = new Set();\n    for (const headers of newHeaders) {\n        const seenHeaders = new Set();\n        for (const [name, value] of iterateHeaders(headers)) {\n            const lowerName = name.toLowerCase();\n            if (!seenHeaders.has(lowerName)) {\n                targetHeaders.delete(name);\n                seenHeaders.add(lowerName);\n            }\n            if (value === null) {\n                targetHeaders.delete(name);\n                nullHeaders.add(lowerName);\n            }\n            else {\n                targetHeaders.append(name, value);\n                nullHeaders.delete(lowerName);\n            }\n        }\n    }\n    return { [brand_privateNullableHeaders]: true, values: targetHeaders, nulls: nullHeaders };\n};\nconst isEmptyHeaders = (headers) => {\n    for (const _ of iterateHeaders(headers))\n        return false;\n    return true;\n};\n//# sourceMappingURL=headers.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL2hlYWRlcnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ3FEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0JBQWdCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGtFQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0VBQWU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL2hlYWRlcnMubWpzPzdkZTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IGlzUmVhZG9ubHlBcnJheSB9IGZyb20gXCIuL3V0aWxzL3ZhbHVlcy5tanNcIjtcbmNvbnN0IGJyYW5kX3ByaXZhdGVOdWxsYWJsZUhlYWRlcnMgPSBTeW1ib2wuZm9yKCdicmFuZC5wcml2YXRlTnVsbGFibGVIZWFkZXJzJyk7XG5mdW5jdGlvbiogaXRlcmF0ZUhlYWRlcnMoaGVhZGVycykge1xuICAgIGlmICghaGVhZGVycylcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChicmFuZF9wcml2YXRlTnVsbGFibGVIZWFkZXJzIGluIGhlYWRlcnMpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZXMsIG51bGxzIH0gPSBoZWFkZXJzO1xuICAgICAgICB5aWVsZCogdmFsdWVzLmVudHJpZXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG51bGxzKSB7XG4gICAgICAgICAgICB5aWVsZCBbbmFtZSwgbnVsbF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc2hvdWxkQ2xlYXIgPSBmYWxzZTtcbiAgICBsZXQgaXRlcjtcbiAgICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICAgICAgaXRlciA9IGhlYWRlcnMuZW50cmllcygpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1JlYWRvbmx5QXJyYXkoaGVhZGVycykpIHtcbiAgICAgICAgaXRlciA9IGhlYWRlcnM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzaG91bGRDbGVhciA9IHRydWU7XG4gICAgICAgIGl0ZXIgPSBPYmplY3QuZW50cmllcyhoZWFkZXJzID8/IHt9KTtcbiAgICB9XG4gICAgZm9yIChsZXQgcm93IG9mIGl0ZXIpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHJvd1swXTtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4cGVjdGVkIGhlYWRlciBuYW1lIHRvIGJlIGEgc3RyaW5nJyk7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IGlzUmVhZG9ubHlBcnJheShyb3dbMV0pID8gcm93WzFdIDogW3Jvd1sxXV07XG4gICAgICAgIGxldCBkaWRDbGVhciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAvLyBPYmplY3RzIGtleXMgYWx3YXlzIG92ZXJ3cml0ZSBvbGRlciBoZWFkZXJzLCB0aGV5IG5ldmVyIGFwcGVuZC5cbiAgICAgICAgICAgIC8vIFlpZWxkIGEgbnVsbCB0byBjbGVhciB0aGUgaGVhZGVyIGJlZm9yZSBhZGRpbmcgdGhlIG5ldyB2YWx1ZXMuXG4gICAgICAgICAgICBpZiAoc2hvdWxkQ2xlYXIgJiYgIWRpZENsZWFyKSB7XG4gICAgICAgICAgICAgICAgZGlkQ2xlYXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHlpZWxkIFtuYW1lLCBudWxsXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIFtuYW1lLCB2YWx1ZV07XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY29uc3QgYnVpbGRIZWFkZXJzID0gKG5ld0hlYWRlcnMpID0+IHtcbiAgICBjb25zdCB0YXJnZXRIZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICBjb25zdCBudWxsSGVhZGVycyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IGhlYWRlcnMgb2YgbmV3SGVhZGVycykge1xuICAgICAgICBjb25zdCBzZWVuSGVhZGVycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIGl0ZXJhdGVIZWFkZXJzKGhlYWRlcnMpKSB7XG4gICAgICAgICAgICBjb25zdCBsb3dlck5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAoIXNlZW5IZWFkZXJzLmhhcyhsb3dlck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0SGVhZGVycy5kZWxldGUobmFtZSk7XG4gICAgICAgICAgICAgICAgc2VlbkhlYWRlcnMuYWRkKGxvd2VyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRIZWFkZXJzLmRlbGV0ZShuYW1lKTtcbiAgICAgICAgICAgICAgICBudWxsSGVhZGVycy5hZGQobG93ZXJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldEhlYWRlcnMuYXBwZW5kKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBudWxsSGVhZGVycy5kZWxldGUobG93ZXJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBbYnJhbmRfcHJpdmF0ZU51bGxhYmxlSGVhZGVyc106IHRydWUsIHZhbHVlczogdGFyZ2V0SGVhZGVycywgbnVsbHM6IG51bGxIZWFkZXJzIH07XG59O1xuZXhwb3J0IGNvbnN0IGlzRW1wdHlIZWFkZXJzID0gKGhlYWRlcnMpID0+IHtcbiAgICBmb3IgKGNvbnN0IF8gb2YgaXRlcmF0ZUhlYWRlcnMoaGVhZGVycykpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFkZXJzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/headers.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/parse.mjs":
/*!***************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/parse.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addRequestID: () => (/* binding */ addRequestID),\n/* harmony export */   defaultParseResponse: () => (/* binding */ defaultParseResponse)\n/* harmony export */ });\n/* harmony import */ var _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/streaming.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/streaming.mjs\");\n/* harmony import */ var _utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/log.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/log.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nasync function defaultParseResponse(client, props) {\n    const { response, requestLogID, retryOfRequestLogID, startTime } = props;\n    const body = await (async () => {\n        if (props.options.stream) {\n            (0,_utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__.loggerFor)(client).debug('response', response.status, response.url, response.headers, response.body);\n            // Note: there is an invariant here that isn't represented in the type system\n            // that if you set `stream: true` the response type must also be `Stream<T>`\n            if (props.options.__streamClass) {\n                return props.options.__streamClass.fromSSEResponse(response, props.controller);\n            }\n            return _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__.Stream.fromSSEResponse(response, props.controller);\n        }\n        // fetch refuses to read the body when the status code is 204.\n        if (response.status === 204) {\n            return null;\n        }\n        if (props.options.__binaryResponse) {\n            return response;\n        }\n        const contentType = response.headers.get('content-type');\n        const mediaType = contentType?.split(';')[0]?.trim();\n        const isJSON = mediaType?.includes('application/json') || mediaType?.endsWith('+json');\n        if (isJSON) {\n            const json = await response.json();\n            return addRequestID(json, response);\n        }\n        const text = await response.text();\n        return text;\n    })();\n    (0,_utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__.loggerFor)(client).debug(`[${requestLogID}] response parsed`, (0,_utils_log_mjs__WEBPACK_IMPORTED_MODULE_1__.formatRequestDetails)({\n        retryOfRequestLogID,\n        url: response.url,\n        status: response.status,\n        body,\n        durationMs: Date.now() - startTime,\n    }));\n    return body;\n}\nfunction addRequestID(value, response) {\n    if (!value || typeof value !== 'object' || Array.isArray(value)) {\n        return value;\n    }\n    return Object.defineProperty(value, '_request_id', {\n        value: response.headers.get('request-id'),\n        enumerable: false,\n    });\n}\n//# sourceMappingURL=parse.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3BhcnNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDK0M7QUFDbUI7QUFDM0Q7QUFDUCxZQUFZLHlEQUF5RDtBQUNyRTtBQUNBO0FBQ0EsWUFBWSx5REFBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVEQUFNO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJLHlEQUFTLG1CQUFtQixhQUFhLG9CQUFvQixvRUFBb0I7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3BhcnNlLm1qcz85NDM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tIFwiLi4vY29yZS9zdHJlYW1pbmcubWpzXCI7XG5pbXBvcnQgeyBmb3JtYXRSZXF1ZXN0RGV0YWlscywgbG9nZ2VyRm9yIH0gZnJvbSBcIi4vdXRpbHMvbG9nLm1qc1wiO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlZmF1bHRQYXJzZVJlc3BvbnNlKGNsaWVudCwgcHJvcHMpIHtcbiAgICBjb25zdCB7IHJlc3BvbnNlLCByZXF1ZXN0TG9nSUQsIHJldHJ5T2ZSZXF1ZXN0TG9nSUQsIHN0YXJ0VGltZSB9ID0gcHJvcHM7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChwcm9wcy5vcHRpb25zLnN0cmVhbSkge1xuICAgICAgICAgICAgbG9nZ2VyRm9yKGNsaWVudCkuZGVidWcoJ3Jlc3BvbnNlJywgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS51cmwsIHJlc3BvbnNlLmhlYWRlcnMsIHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAgICAgLy8gTm90ZTogdGhlcmUgaXMgYW4gaW52YXJpYW50IGhlcmUgdGhhdCBpc24ndCByZXByZXNlbnRlZCBpbiB0aGUgdHlwZSBzeXN0ZW1cbiAgICAgICAgICAgIC8vIHRoYXQgaWYgeW91IHNldCBgc3RyZWFtOiB0cnVlYCB0aGUgcmVzcG9uc2UgdHlwZSBtdXN0IGFsc28gYmUgYFN0cmVhbTxUPmBcbiAgICAgICAgICAgIGlmIChwcm9wcy5vcHRpb25zLl9fc3RyZWFtQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHMub3B0aW9ucy5fX3N0cmVhbUNsYXNzLmZyb21TU0VSZXNwb25zZShyZXNwb25zZSwgcHJvcHMuY29udHJvbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gU3RyZWFtLmZyb21TU0VSZXNwb25zZShyZXNwb25zZSwgcHJvcHMuY29udHJvbGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZmV0Y2ggcmVmdXNlcyB0byByZWFkIHRoZSBib2R5IHdoZW4gdGhlIHN0YXR1cyBjb2RlIGlzIDIwNC5cbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjA0KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMub3B0aW9ucy5fX2JpbmFyeVJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGVudFR5cGUgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJyk7XG4gICAgICAgIGNvbnN0IG1lZGlhVHlwZSA9IGNvbnRlbnRUeXBlPy5zcGxpdCgnOycpWzBdPy50cmltKCk7XG4gICAgICAgIGNvbnN0IGlzSlNPTiA9IG1lZGlhVHlwZT8uaW5jbHVkZXMoJ2FwcGxpY2F0aW9uL2pzb24nKSB8fCBtZWRpYVR5cGU/LmVuZHNXaXRoKCcranNvbicpO1xuICAgICAgICBpZiAoaXNKU09OKSB7XG4gICAgICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgcmV0dXJuIGFkZFJlcXVlc3RJRChqc29uLCByZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfSkoKTtcbiAgICBsb2dnZXJGb3IoY2xpZW50KS5kZWJ1ZyhgWyR7cmVxdWVzdExvZ0lEfV0gcmVzcG9uc2UgcGFyc2VkYCwgZm9ybWF0UmVxdWVzdERldGFpbHMoe1xuICAgICAgICByZXRyeU9mUmVxdWVzdExvZ0lELFxuICAgICAgICB1cmw6IHJlc3BvbnNlLnVybCxcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgIGJvZHksXG4gICAgICAgIGR1cmF0aW9uTXM6IERhdGUubm93KCkgLSBzdGFydFRpbWUsXG4gICAgfSkpO1xuICAgIHJldHVybiBib2R5O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJlcXVlc3RJRCh2YWx1ZSwgcmVzcG9uc2UpIHtcbiAgICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlLCAnX3JlcXVlc3RfaWQnLCB7XG4gICAgICAgIHZhbHVlOiByZXNwb25zZS5oZWFkZXJzLmdldCgncmVxdWVzdC1pZCcpLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/parse.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/request-options.mjs":
/*!*************************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/request-options.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FallbackEncoder: () => (/* binding */ FallbackEncoder)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nconst FallbackEncoder = ({ headers, body }) => {\n    return {\n        bodyHeaders: {\n            'content-type': 'application/json',\n        },\n        body: JSON.stringify(body),\n    };\n};\n//# sourceMappingURL=request-options.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3JlcXVlc3Qtb3B0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ08sMkJBQTJCLGVBQWU7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBpcC91aS8uLi8uLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvcmVxdWVzdC1vcHRpb25zLm1qcz81YWFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQgY29uc3QgRmFsbGJhY2tFbmNvZGVyID0gKHsgaGVhZGVycywgYm9keSB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYm9keUhlYWRlcnM6IHtcbiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1vcHRpb25zLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/request-options.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/shims.mjs":
/*!***************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/shims.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CancelReadableStream: () => (/* binding */ CancelReadableStream),\n/* harmony export */   ReadableStreamFrom: () => (/* binding */ ReadableStreamFrom),\n/* harmony export */   ReadableStreamToAsyncIterable: () => (/* binding */ ReadableStreamToAsyncIterable),\n/* harmony export */   getDefaultFetch: () => (/* binding */ getDefaultFetch),\n/* harmony export */   makeReadableStream: () => (/* binding */ makeReadableStream)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nfunction getDefaultFetch() {\n    if (typeof fetch !== 'undefined') {\n        return fetch;\n    }\n    throw new Error('`fetch` is not defined as a global; Either pass `fetch` to the client, `new Anthropic({ fetch })` or polyfill the global, `globalThis.fetch = fetch`');\n}\nfunction makeReadableStream(...args) {\n    const ReadableStream = globalThis.ReadableStream;\n    if (typeof ReadableStream === 'undefined') {\n        // Note: All of the platforms / runtimes we officially support already define\n        // `ReadableStream` as a global, so this should only ever be hit on unsupported runtimes.\n        throw new Error('`ReadableStream` is not defined as a global; You will need to polyfill it, `globalThis.ReadableStream = ReadableStream`');\n    }\n    return new ReadableStream(...args);\n}\nfunction ReadableStreamFrom(iterable) {\n    let iter = Symbol.asyncIterator in iterable ? iterable[Symbol.asyncIterator]() : iterable[Symbol.iterator]();\n    return makeReadableStream({\n        start() { },\n        async pull(controller) {\n            const { done, value } = await iter.next();\n            if (done) {\n                controller.close();\n            }\n            else {\n                controller.enqueue(value);\n            }\n        },\n        async cancel() {\n            await iter.return?.();\n        },\n    });\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nfunction ReadableStreamToAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator])\n        return stream;\n    const reader = stream.getReader();\n    return {\n        async next() {\n            try {\n                const result = await reader.read();\n                if (result?.done)\n                    reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            }\n            catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return() {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return { done: true, value: undefined };\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\n/**\n * Cancels a ReadableStream we don't need to consume.\n * See https://undici.nodejs.org/#/?id=garbage-collection\n */\nasync function CancelReadableStream(stream) {\n    if (stream === null || typeof stream !== 'object')\n        return;\n    if (stream[Symbol.asyncIterator]) {\n        await stream[Symbol.asyncIterator]().return?.();\n        return;\n    }\n    const reader = stream.getReader();\n    const cancelPromise = reader.cancel();\n    reader.releaseLock();\n    await cancelPromise;\n}\n//# sourceMappingURL=shims.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3NoaW1zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsb0RBQW9ELE9BQU87QUFDcEg7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFO0FBQ3RFO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3NoaW1zLm1qcz9lYzlkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdEZldGNoKCkge1xuICAgIGlmICh0eXBlb2YgZmV0Y2ggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmZXRjaDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgZmV0Y2hgIGlzIG5vdCBkZWZpbmVkIGFzIGEgZ2xvYmFsOyBFaXRoZXIgcGFzcyBgZmV0Y2hgIHRvIHRoZSBjbGllbnQsIGBuZXcgQW50aHJvcGljKHsgZmV0Y2ggfSlgIG9yIHBvbHlmaWxsIHRoZSBnbG9iYWwsIGBnbG9iYWxUaGlzLmZldGNoID0gZmV0Y2hgJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZVJlYWRhYmxlU3RyZWFtKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBSZWFkYWJsZVN0cmVhbSA9IGdsb2JhbFRoaXMuUmVhZGFibGVTdHJlYW07XG4gICAgaWYgKHR5cGVvZiBSZWFkYWJsZVN0cmVhbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gTm90ZTogQWxsIG9mIHRoZSBwbGF0Zm9ybXMgLyBydW50aW1lcyB3ZSBvZmZpY2lhbGx5IHN1cHBvcnQgYWxyZWFkeSBkZWZpbmVcbiAgICAgICAgLy8gYFJlYWRhYmxlU3RyZWFtYCBhcyBhIGdsb2JhbCwgc28gdGhpcyBzaG91bGQgb25seSBldmVyIGJlIGhpdCBvbiB1bnN1cHBvcnRlZCBydW50aW1lcy5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgUmVhZGFibGVTdHJlYW1gIGlzIG5vdCBkZWZpbmVkIGFzIGEgZ2xvYmFsOyBZb3Ugd2lsbCBuZWVkIHRvIHBvbHlmaWxsIGl0LCBgZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbSA9IFJlYWRhYmxlU3RyZWFtYCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKC4uLmFyZ3MpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRnJvbShpdGVyYWJsZSkge1xuICAgIGxldCBpdGVyID0gU3ltYm9sLmFzeW5jSXRlcmF0b3IgaW4gaXRlcmFibGUgPyBpdGVyYWJsZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSA6IGl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICByZXR1cm4gbWFrZVJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgc3RhcnQoKSB7IH0sXG4gICAgICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgaXRlci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGNhbmNlbCgpIHtcbiAgICAgICAgICAgIGF3YWl0IGl0ZXIucmV0dXJuPy4oKTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbi8qKlxuICogTW9zdCBicm93c2VycyBkb24ndCB5ZXQgaGF2ZSBhc3luYyBpdGVyYWJsZSBzdXBwb3J0IGZvciBSZWFkYWJsZVN0cmVhbSxcbiAqIGFuZCBOb2RlIGhhcyBhIHZlcnkgZGlmZmVyZW50IHdheSBvZiByZWFkaW5nIGJ5dGVzIGZyb20gaXRzIFwiUmVhZGFibGVTdHJlYW1cIi5cbiAqXG4gKiBUaGlzIHBvbHlmaWxsIHdhcyBwdWxsZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vTWF0dGlhc0J1ZWxlbnMvd2ViLXN0cmVhbXMtcG9seWZpbGwvcHVsbC8xMjIjaXNzdWVjb21tZW50LTE2MjczNTQ0OTBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlKHN0cmVhbSkge1xuICAgIGlmIChzdHJlYW1bU3ltYm9sLmFzeW5jSXRlcmF0b3JdKVxuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhc3luYyBuZXh0KCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQ/LmRvbmUpXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgd2hlbiBzdHJlYW0gYmVjb21lcyBjbG9zZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTsgLy8gcmVsZWFzZSBsb2NrIHdoZW4gc3RyZWFtIGJlY29tZXMgZXJyb3JlZFxuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHJldHVybigpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbFByb21pc2UgPSByZWFkZXIuY2FuY2VsKCk7XG4gICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgICAgICAgIGF3YWl0IGNhbmNlbFByb21pc2U7XG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XG4gICAgICAgIH0sXG4gICAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBDYW5jZWxzIGEgUmVhZGFibGVTdHJlYW0gd2UgZG9uJ3QgbmVlZCB0byBjb25zdW1lLlxuICogU2VlIGh0dHBzOi8vdW5kaWNpLm5vZGVqcy5vcmcvIy8/aWQ9Z2FyYmFnZS1jb2xsZWN0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBDYW5jZWxSZWFkYWJsZVN0cmVhbShzdHJlYW0pIHtcbiAgICBpZiAoc3RyZWFtID09PSBudWxsIHx8IHR5cGVvZiBzdHJlYW0gIT09ICdvYmplY3QnKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKHN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pIHtcbiAgICAgICAgYXdhaXQgc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpLnJldHVybj8uKCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICAgIGNvbnN0IGNhbmNlbFByb21pc2UgPSByZWFkZXIuY2FuY2VsKCk7XG4gICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgYXdhaXQgY2FuY2VsUHJvbWlzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoaW1zLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/shims.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/to-file.mjs":
/*!*****************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/to-file.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/uploads.mjs\");\n\n\n/**\n * This check adds the arrayBuffer() method type because it is available and used at runtime\n */\nconst isBlobLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.size === 'number' &&\n    typeof value.type === 'string' &&\n    typeof value.text === 'function' &&\n    typeof value.slice === 'function' &&\n    typeof value.arrayBuffer === 'function';\n/**\n * This check adds the arrayBuffer() method type because it is available and used at runtime\n */\nconst isFileLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.name === 'string' &&\n    typeof value.lastModified === 'number' &&\n    isBlobLike(value);\nconst isResponseLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.url === 'string' &&\n    typeof value.blob === 'function';\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nasync function toFile(value, name, options) {\n    (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.checkFileSupport)();\n    // If it's a promise, resolve it.\n    value = await value;\n    name || (name = (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.getName)(value));\n    // If we've been given a `File` we don't need to do anything if the name / options\n    // have not been customised.\n    if (isFileLike(value)) {\n        if (value instanceof File && name == null && options == null) {\n            return value;\n        }\n        return (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.makeFile)([await value.arrayBuffer()], name ?? value.name, {\n            type: value.type,\n            lastModified: value.lastModified,\n            ...options,\n        });\n    }\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop());\n        return (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.makeFile)(await getBytes(blob), name, options);\n    }\n    const parts = await getBytes(value);\n    if (!options?.type) {\n        const type = parts.find((part) => typeof part === 'object' && 'type' in part && part.type);\n        if (typeof type === 'string') {\n            options = { ...options, type };\n        }\n    }\n    return (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.makeFile)(parts, name, options);\n}\nasync function getBytes(value) {\n    let parts = [];\n    if (typeof value === 'string' ||\n        ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n        value instanceof ArrayBuffer) {\n        parts.push(value);\n    }\n    else if (isBlobLike(value)) {\n        parts.push(value instanceof Blob ? value : await value.arrayBuffer());\n    }\n    else if ((0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value) {\n            parts.push(...(await getBytes(chunk))); // TODO, consider validating?\n        }\n    }\n    else {\n        const constructor = value?.constructor?.name;\n        throw new Error(`Unexpected data type: ${typeof value}${constructor ? `; constructor: ${constructor}` : ''}${propsForError(value)}`);\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    if (typeof value !== 'object' || value === null)\n        return '';\n    const props = Object.getOwnPropertyNames(value);\n    return `; props: [${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\n//# sourceMappingURL=to-file.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3RvLWZpbGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1FO0FBQ2xCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsWUFBWTtBQUN0Qyx5REFBeUQsaUJBQWlCLEdBQUcsbUJBQW1CLE1BQU0scUJBQXFCLElBQUksbUJBQW1CO0FBQ2xKLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixlQUFlLFlBQVk7QUFDM0I7QUFDTztBQUNQLElBQUksOERBQWdCO0FBQ3BCO0FBQ0E7QUFDQSxvQkFBb0IscURBQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxzREFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNEQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBLFdBQVcsc0RBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNkRBQWU7QUFDNUI7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxhQUFhLEVBQUUsaUJBQWlCLGVBQWUsWUFBWSxPQUFPLEVBQUUscUJBQXFCO0FBQzFJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxVQUFVLHFCQUFxQixFQUFFLGVBQWU7QUFDOUQ7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3RvLWZpbGUubWpzPzQ4NzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0TmFtZSwgbWFrZUZpbGUsIGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gXCIuL3VwbG9hZHMubWpzXCI7XG5pbXBvcnQgeyBjaGVja0ZpbGVTdXBwb3J0IH0gZnJvbSBcIi4vdXBsb2Fkcy5tanNcIjtcbi8qKlxuICogVGhpcyBjaGVjayBhZGRzIHRoZSBhcnJheUJ1ZmZlcigpIG1ldGhvZCB0eXBlIGJlY2F1c2UgaXQgaXMgYXZhaWxhYmxlIGFuZCB1c2VkIGF0IHJ1bnRpbWVcbiAqL1xuY29uc3QgaXNCbG9iTGlrZSA9ICh2YWx1ZSkgPT4gdmFsdWUgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2YgdmFsdWUuc2l6ZSA9PT0gJ251bWJlcicgJiZcbiAgICB0eXBlb2YgdmFsdWUudHlwZSA9PT0gJ3N0cmluZycgJiZcbiAgICB0eXBlb2YgdmFsdWUudGV4dCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWx1ZS5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWx1ZS5hcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcbi8qKlxuICogVGhpcyBjaGVjayBhZGRzIHRoZSBhcnJheUJ1ZmZlcigpIG1ldGhvZCB0eXBlIGJlY2F1c2UgaXQgaXMgYXZhaWxhYmxlIGFuZCB1c2VkIGF0IHJ1bnRpbWVcbiAqL1xuY29uc3QgaXNGaWxlTGlrZSA9ICh2YWx1ZSkgPT4gdmFsdWUgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICB0eXBlb2YgdmFsdWUubmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgICB0eXBlb2YgdmFsdWUubGFzdE1vZGlmaWVkID09PSAnbnVtYmVyJyAmJlxuICAgIGlzQmxvYkxpa2UodmFsdWUpO1xuY29uc3QgaXNSZXNwb25zZUxpa2UgPSAodmFsdWUpID0+IHZhbHVlICE9IG51bGwgJiZcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIHZhbHVlLnVybCA9PT0gJ3N0cmluZycgJiZcbiAgICB0eXBlb2YgdmFsdWUuYmxvYiA9PT0gJ2Z1bmN0aW9uJztcbi8qKlxuICogSGVscGVyIGZvciBjcmVhdGluZyBhIHtAbGluayBGaWxlfSB0byBwYXNzIHRvIGFuIFNESyB1cGxvYWQgbWV0aG9kIGZyb20gYSB2YXJpZXR5IG9mIGRpZmZlcmVudCBkYXRhIGZvcm1hdHNcbiAqIEBwYXJhbSB2YWx1ZSB0aGUgcmF3IGNvbnRlbnQgb2YgdGhlIGZpbGUuICBDYW4gYmUgYW4ge0BsaW5rIFVwbG9hZGFibGV9LCB7QGxpbmsgQmxvYkxpa2VQYXJ0fSwgb3Ige0BsaW5rIEFzeW5jSXRlcmFibGV9IG9mIHtAbGluayBCbG9iTGlrZVBhcnR9c1xuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBmaWxlLiBJZiBvbWl0dGVkLCB0b0ZpbGUgd2lsbCB0cnkgdG8gZGV0ZXJtaW5lIGEgZmlsZSBuYW1lIGZyb20gYml0cyBpZiBwb3NzaWJsZVxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIGFkZGl0aW9uYWwgcHJvcGVydGllc1xuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRpb25zLnR5cGUgdGhlIE1JTUUgdHlwZSBvZiB0aGUgY29udGVudFxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRpb25zLmxhc3RNb2RpZmllZCB0aGUgbGFzdCBtb2RpZmllZCB0aW1lc3RhbXBcbiAqIEByZXR1cm5zIGEge0BsaW5rIEZpbGV9IHdpdGggdGhlIGdpdmVuIHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRvRmlsZSh2YWx1ZSwgbmFtZSwgb3B0aW9ucykge1xuICAgIGNoZWNrRmlsZVN1cHBvcnQoKTtcbiAgICAvLyBJZiBpdCdzIGEgcHJvbWlzZSwgcmVzb2x2ZSBpdC5cbiAgICB2YWx1ZSA9IGF3YWl0IHZhbHVlO1xuICAgIG5hbWUgfHwgKG5hbWUgPSBnZXROYW1lKHZhbHVlKSk7XG4gICAgLy8gSWYgd2UndmUgYmVlbiBnaXZlbiBhIGBGaWxlYCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nIGlmIHRoZSBuYW1lIC8gb3B0aW9uc1xuICAgIC8vIGhhdmUgbm90IGJlZW4gY3VzdG9taXNlZC5cbiAgICBpZiAoaXNGaWxlTGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRmlsZSAmJiBuYW1lID09IG51bGwgJiYgb3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ha2VGaWxlKFthd2FpdCB2YWx1ZS5hcnJheUJ1ZmZlcigpXSwgbmFtZSA/PyB2YWx1ZS5uYW1lLCB7XG4gICAgICAgICAgICB0eXBlOiB2YWx1ZS50eXBlLFxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB2YWx1ZS5sYXN0TW9kaWZpZWQsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzUmVzcG9uc2VMaWtlKHZhbHVlKSkge1xuICAgICAgICBjb25zdCBibG9iID0gYXdhaXQgdmFsdWUuYmxvYigpO1xuICAgICAgICBuYW1lIHx8IChuYW1lID0gbmV3IFVSTCh2YWx1ZS51cmwpLnBhdGhuYW1lLnNwbGl0KC9bXFxcXC9dLykucG9wKCkpO1xuICAgICAgICByZXR1cm4gbWFrZUZpbGUoYXdhaXQgZ2V0Qnl0ZXMoYmxvYiksIG5hbWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBwYXJ0cyA9IGF3YWl0IGdldEJ5dGVzKHZhbHVlKTtcbiAgICBpZiAoIW9wdGlvbnM/LnR5cGUpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHBhcnRzLmZpbmQoKHBhcnQpID0+IHR5cGVvZiBwYXJ0ID09PSAnb2JqZWN0JyAmJiAndHlwZScgaW4gcGFydCAmJiBwYXJ0LnR5cGUpO1xuICAgICAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBvcHRpb25zID0geyAuLi5vcHRpb25zLCB0eXBlIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1ha2VGaWxlKHBhcnRzLCBuYW1lLCBvcHRpb25zKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldEJ5dGVzKHZhbHVlKSB7XG4gICAgbGV0IHBhcnRzID0gW107XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSB8fCAvLyBpbmNsdWRlcyBVaW50OEFycmF5LCBCdWZmZXIsIGV0Yy5cbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICBwYXJ0cy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNCbG9iTGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcGFydHMucHVzaCh2YWx1ZSBpbnN0YW5jZW9mIEJsb2IgPyB2YWx1ZSA6IGF3YWl0IHZhbHVlLmFycmF5QnVmZmVyKCkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FzeW5jSXRlcmFibGUodmFsdWUpIC8vIGluY2x1ZGVzIFJlYWRhYmxlLCBSZWFkYWJsZVN0cmVhbSwgZXRjLlxuICAgICkge1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKC4uLihhd2FpdCBnZXRCeXRlcyhjaHVuaykpKTsgLy8gVE9ETywgY29uc2lkZXIgdmFsaWRhdGluZz9cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgY29uc3RydWN0b3IgPSB2YWx1ZT8uY29uc3RydWN0b3I/Lm5hbWU7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBkYXRhIHR5cGU6ICR7dHlwZW9mIHZhbHVlfSR7Y29uc3RydWN0b3IgPyBgOyBjb25zdHJ1Y3RvcjogJHtjb25zdHJ1Y3Rvcn1gIDogJyd9JHtwcm9wc0ZvckVycm9yKHZhbHVlKX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzO1xufVxuZnVuY3Rpb24gcHJvcHNGb3JFcnJvcih2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgY29uc3QgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gICAgcmV0dXJuIGA7IHByb3BzOiBbJHtwcm9wcy5tYXAoKHApID0+IGBcIiR7cH1cImApLmpvaW4oJywgJyl9XWA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10by1maWxlLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/to-file.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/tslib.mjs":
/*!***************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/tslib.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\")\n        throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f)\n        throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver))\n        throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;\n}\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f)\n        throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver))\n        throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3RzbGliLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBpcC91aS8uLi8uLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdHNsaWIubWpzPzU4ODEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwibVwiKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZilcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IChmLnZhbHVlID0gdmFsdWUpIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSksIHZhbHVlO1xufVxuZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn1cbmV4cG9ydCB7IF9fY2xhc3NQcml2YXRlRmllbGRTZXQsIF9fY2xhc3NQcml2YXRlRmllbGRHZXQgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/tslib.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/uploads.mjs":
/*!*****************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/uploads.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkFileSupport: () => (/* binding */ checkFileSupport),\n/* harmony export */   createForm: () => (/* binding */ createForm),\n/* harmony export */   getName: () => (/* binding */ getName),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   makeFile: () => (/* binding */ makeFile),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* binding */ maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* binding */ multipartFormRequestOptions)\n/* harmony export */ });\n/* harmony import */ var _shims_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shims.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/shims.mjs\");\n\nconst checkFileSupport = () => {\n    if (typeof File === 'undefined') {\n        const { process } = globalThis;\n        const isOldNode = typeof process?.versions?.node === 'string' && parseInt(process.versions.node.split('.')) < 20;\n        throw new Error('`File` is not defined as a global, which is required for file uploads.' +\n            (isOldNode ?\n                \" Update to Node 20 LTS or newer, or set `globalThis.File` to `import('node:buffer').File`.\"\n                : ''));\n    }\n};\n/**\n * Construct a `File` instance. This is used to ensure a helpful error is thrown\n * for environments that don't define a global `File` yet.\n */\nfunction makeFile(fileBits, fileName, options) {\n    checkFileSupport();\n    return new File(fileBits, fileName ?? 'unknown_file', options);\n}\nfunction getName(value) {\n    return (((typeof value === 'object' &&\n        value !== null &&\n        (('name' in value && value.name && String(value.name)) ||\n            ('url' in value && value.url && String(value.url)) ||\n            ('filename' in value && value.filename && String(value.filename)) ||\n            ('path' in value && value.path && String(value.path)))) ||\n        '')\n        .split(/[\\\\/]/)\n        .pop() || undefined);\n}\nconst isAsyncIterable = (value) => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nconst maybeMultipartFormRequestOptions = async (opts, fetch) => {\n    if (!hasUploadableValue(opts.body))\n        return opts;\n    return { ...opts, body: await createForm(opts.body, fetch) };\n};\nconst multipartFormRequestOptions = async (opts, fetch) => {\n    return { ...opts, body: await createForm(opts.body, fetch) };\n};\nconst supportsFormDataMap = /* @__PURE__ */ new WeakMap();\n/**\n * node-fetch doesn't support the global FormData object in recent node versions. Instead of sending\n * properly-encoded form data, it just stringifies the object, resulting in a request body of \"[object FormData]\".\n * This function detects if the fetch function provided supports the global FormData object to avoid\n * confusing error messages later on.\n */\nfunction supportsFormData(fetchObject) {\n    const fetch = typeof fetchObject === 'function' ? fetchObject : fetchObject.fetch;\n    const cached = supportsFormDataMap.get(fetch);\n    if (cached)\n        return cached;\n    const promise = (async () => {\n        try {\n            const FetchResponse = ('Response' in fetch ?\n                fetch.Response\n                : (await fetch('data:,')).constructor);\n            const data = new FormData();\n            if (data.toString() === (await new FetchResponse(data).text())) {\n                return false;\n            }\n            return true;\n        }\n        catch {\n            // avoid false negatives\n            return true;\n        }\n    })();\n    supportsFormDataMap.set(fetch, promise);\n    return promise;\n}\nconst createForm = async (body, fetch) => {\n    if (!(await supportsFormData(fetch))) {\n        throw new TypeError('The provided fetch function does not support file uploads with the current global FormData class.');\n    }\n    const form = new FormData();\n    await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n    return form;\n};\n// We check for Blob not File because Bun.File doesn't inherit from File,\n// but they both inherit from Blob and have a `name` property at runtime.\nconst isNamedBlob = (value) => value instanceof Blob && 'name' in value;\nconst isUploadable = (value) => typeof value === 'object' &&\n    value !== null &&\n    (value instanceof Response || isAsyncIterable(value) || isNamedBlob(value));\nconst hasUploadableValue = (value) => {\n    if (isUploadable(value))\n        return true;\n    if (Array.isArray(value))\n        return value.some(hasUploadableValue);\n    if (value && typeof value === 'object') {\n        for (const k in value) {\n            if (hasUploadableValue(value[k]))\n                return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value) => {\n    if (value === undefined)\n        return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        form.append(key, String(value));\n    }\n    else if (value instanceof Response) {\n        let options = {};\n        const contentType = value.headers.get('Content-Type');\n        if (contentType) {\n            options = { type: contentType };\n        }\n        form.append(key, makeFile([await value.blob()], getName(value), options));\n    }\n    else if (isAsyncIterable(value)) {\n        form.append(key, makeFile([await new Response((0,_shims_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStreamFrom)(value)).blob()], getName(value)));\n    }\n    else if (isNamedBlob(value)) {\n        form.append(key, makeFile([value], getName(value), { type: value.type }));\n    }\n    else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n    }\n    else if (typeof value === 'object') {\n        await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));\n    }\n    else {\n        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n    }\n};\n//# sourceMappingURL=uploads.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/bytes.mjs":
/*!*********************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/utils/bytes.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   decodeUTF8: () => (/* binding */ decodeUTF8),\n/* harmony export */   encodeUTF8: () => (/* binding */ encodeUTF8)\n/* harmony export */ });\nfunction concatBytes(buffers) {\n    let length = 0;\n    for (const buffer of buffers) {\n        length += buffer.length;\n    }\n    const output = new Uint8Array(length);\n    let index = 0;\n    for (const buffer of buffers) {\n        output.set(buffer, index);\n        index += buffer.length;\n    }\n    return output;\n}\nlet encodeUTF8_;\nfunction encodeUTF8(str) {\n    let encoder;\n    return (encodeUTF8_ ??\n        ((encoder = new globalThis.TextEncoder()), (encodeUTF8_ = encoder.encode.bind(encoder))))(str);\n}\nlet decodeUTF8_;\nfunction decodeUTF8(bytes) {\n    let decoder;\n    return (decodeUTF8_ ??\n        ((decoder = new globalThis.TextDecoder()), (decodeUTF8_ = decoder.decode.bind(decoder))))(bytes);\n}\n//# sourceMappingURL=bytes.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL2J5dGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBpcC91aS8uLi8uLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvYnl0ZXMubWpzP2YzNjYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEJ5dGVzKGJ1ZmZlcnMpIHtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBmb3IgKGNvbnN0IGJ1ZmZlciBvZiBidWZmZXJzKSB7XG4gICAgICAgIGxlbmd0aCArPSBidWZmZXIubGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCBvdXRwdXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgZm9yIChjb25zdCBidWZmZXIgb2YgYnVmZmVycykge1xuICAgICAgICBvdXRwdXQuc2V0KGJ1ZmZlciwgaW5kZXgpO1xuICAgICAgICBpbmRleCArPSBidWZmZXIubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxubGV0IGVuY29kZVVURjhfO1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVVURjgoc3RyKSB7XG4gICAgbGV0IGVuY29kZXI7XG4gICAgcmV0dXJuIChlbmNvZGVVVEY4XyA/P1xuICAgICAgICAoKGVuY29kZXIgPSBuZXcgZ2xvYmFsVGhpcy5UZXh0RW5jb2RlcigpKSwgKGVuY29kZVVURjhfID0gZW5jb2Rlci5lbmNvZGUuYmluZChlbmNvZGVyKSkpKShzdHIpO1xufVxubGV0IGRlY29kZVVURjhfO1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVVURjgoYnl0ZXMpIHtcbiAgICBsZXQgZGVjb2RlcjtcbiAgICByZXR1cm4gKGRlY29kZVVURjhfID8/XG4gICAgICAgICgoZGVjb2RlciA9IG5ldyBnbG9iYWxUaGlzLlRleHREZWNvZGVyKCkpLCAoZGVjb2RlVVRGOF8gPSBkZWNvZGVyLmRlY29kZS5iaW5kKGRlY29kZXIpKSkpKGJ5dGVzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ5dGVzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/bytes.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/env.mjs":
/*!*******************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/utils/env.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   readEnv: () => (/* binding */ readEnv)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nconst readEnv = (env) => {\n    if (typeof globalThis.process !== 'undefined') {\n        return globalThis.process.env?.[env]?.trim() ?? undefined;\n    }\n    if (typeof globalThis.Deno !== 'undefined') {\n        return globalThis.Deno.env?.get?.(env)?.trim();\n    }\n    return undefined;\n};\n//# sourceMappingURL=env.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL2Vudi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL2Vudi5tanM/NTA1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuLyoqXG4gKiBSZWFkIGFuIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICpcbiAqIFRyaW1zIGJlZ2lubmluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS5cbiAqXG4gKiBXaWxsIHJldHVybiB1bmRlZmluZWQgaWYgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGRvZXNuJ3QgZXhpc3Qgb3IgY2Fubm90IGJlIGFjY2Vzc2VkLlxuICovXG5leHBvcnQgY29uc3QgcmVhZEVudiA9IChlbnYpID0+IHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMucHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXMucHJvY2Vzcy5lbnY/LltlbnZdPy50cmltKCkgPz8gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMuRGVubyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFRoaXMuRGVuby5lbnY/LmdldD8uKGVudik/LnRyaW0oKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnYubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/env.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/log.mjs":
/*!*******************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/utils/log.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatRequestDetails: () => (/* binding */ formatRequestDetails),\n/* harmony export */   loggerFor: () => (/* binding */ loggerFor),\n/* harmony export */   parseLogLevel: () => (/* binding */ parseLogLevel)\n/* harmony export */ });\n/* harmony import */ var _values_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./values.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/values.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nconst levelNumbers = {\n    off: 0,\n    error: 200,\n    warn: 300,\n    info: 400,\n    debug: 500,\n};\nconst parseLogLevel = (maybeLevel, sourceName, client) => {\n    if (!maybeLevel) {\n        return undefined;\n    }\n    if ((0,_values_mjs__WEBPACK_IMPORTED_MODULE_0__.hasOwn)(levelNumbers, maybeLevel)) {\n        return maybeLevel;\n    }\n    loggerFor(client).warn(`${sourceName} was set to ${JSON.stringify(maybeLevel)}, expected one of ${JSON.stringify(Object.keys(levelNumbers))}`);\n    return undefined;\n};\nfunction noop() { }\nfunction makeLogFn(fnLevel, logger, logLevel) {\n    if (!logger || levelNumbers[fnLevel] > levelNumbers[logLevel]) {\n        return noop;\n    }\n    else {\n        // Don't wrap logger functions, we want the stacktrace intact!\n        return logger[fnLevel].bind(logger);\n    }\n}\nconst noopLogger = {\n    error: noop,\n    warn: noop,\n    info: noop,\n    debug: noop,\n};\nlet cachedLoggers = /* @__PURE__ */ new WeakMap();\nfunction loggerFor(client) {\n    const logger = client.logger;\n    const logLevel = client.logLevel ?? 'off';\n    if (!logger) {\n        return noopLogger;\n    }\n    const cachedLogger = cachedLoggers.get(logger);\n    if (cachedLogger && cachedLogger[0] === logLevel) {\n        return cachedLogger[1];\n    }\n    const levelLogger = {\n        error: makeLogFn('error', logger, logLevel),\n        warn: makeLogFn('warn', logger, logLevel),\n        info: makeLogFn('info', logger, logLevel),\n        debug: makeLogFn('debug', logger, logLevel),\n    };\n    cachedLoggers.set(logger, [logLevel, levelLogger]);\n    return levelLogger;\n}\nconst formatRequestDetails = (details) => {\n    if (details.options) {\n        details.options = { ...details.options };\n        delete details.options['headers']; // redundant + leaks internals\n    }\n    if (details.headers) {\n        details.headers = Object.fromEntries((details.headers instanceof Headers ? [...details.headers] : Object.entries(details.headers)).map(([name, value]) => [\n            name,\n            (name.toLowerCase() === 'x-api-key' ||\n                name.toLowerCase() === 'authorization' ||\n                name.toLowerCase() === 'cookie' ||\n                name.toLowerCase() === 'set-cookie') ?\n                '***'\n                : value,\n        ]));\n    }\n    if ('retryOfRequestLogID' in details) {\n        if (details.retryOfRequestLogID) {\n            details.retryOf = details.retryOfRequestLogID;\n        }\n        delete details.retryOfRequestLogID;\n    }\n    return details;\n};\n//# sourceMappingURL=log.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL2xvZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ3NDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxRQUFRLG1EQUFNO0FBQ2Q7QUFDQTtBQUNBLDhCQUE4QixZQUFZLGFBQWEsMkJBQTJCLG9CQUFvQiwwQ0FBMEM7QUFDaEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSw0QkFBNEI7QUFDNUIsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL2xvZy5tanM/MDVkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgaGFzT3duIH0gZnJvbSBcIi4vdmFsdWVzLm1qc1wiO1xuY29uc3QgbGV2ZWxOdW1iZXJzID0ge1xuICAgIG9mZjogMCxcbiAgICBlcnJvcjogMjAwLFxuICAgIHdhcm46IDMwMCxcbiAgICBpbmZvOiA0MDAsXG4gICAgZGVidWc6IDUwMCxcbn07XG5leHBvcnQgY29uc3QgcGFyc2VMb2dMZXZlbCA9IChtYXliZUxldmVsLCBzb3VyY2VOYW1lLCBjbGllbnQpID0+IHtcbiAgICBpZiAoIW1heWJlTGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGhhc093bihsZXZlbE51bWJlcnMsIG1heWJlTGV2ZWwpKSB7XG4gICAgICAgIHJldHVybiBtYXliZUxldmVsO1xuICAgIH1cbiAgICBsb2dnZXJGb3IoY2xpZW50KS53YXJuKGAke3NvdXJjZU5hbWV9IHdhcyBzZXQgdG8gJHtKU09OLnN0cmluZ2lmeShtYXliZUxldmVsKX0sIGV4cGVjdGVkIG9uZSBvZiAke0pTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKGxldmVsTnVtYmVycykpfWApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuZnVuY3Rpb24gbm9vcCgpIHsgfVxuZnVuY3Rpb24gbWFrZUxvZ0ZuKGZuTGV2ZWwsIGxvZ2dlciwgbG9nTGV2ZWwpIHtcbiAgICBpZiAoIWxvZ2dlciB8fCBsZXZlbE51bWJlcnNbZm5MZXZlbF0gPiBsZXZlbE51bWJlcnNbbG9nTGV2ZWxdKSB7XG4gICAgICAgIHJldHVybiBub29wO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gRG9uJ3Qgd3JhcCBsb2dnZXIgZnVuY3Rpb25zLCB3ZSB3YW50IHRoZSBzdGFja3RyYWNlIGludGFjdCFcbiAgICAgICAgcmV0dXJuIGxvZ2dlcltmbkxldmVsXS5iaW5kKGxvZ2dlcik7XG4gICAgfVxufVxuY29uc3Qgbm9vcExvZ2dlciA9IHtcbiAgICBlcnJvcjogbm9vcCxcbiAgICB3YXJuOiBub29wLFxuICAgIGluZm86IG5vb3AsXG4gICAgZGVidWc6IG5vb3AsXG59O1xubGV0IGNhY2hlZExvZ2dlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmV4cG9ydCBmdW5jdGlvbiBsb2dnZXJGb3IoY2xpZW50KSB7XG4gICAgY29uc3QgbG9nZ2VyID0gY2xpZW50LmxvZ2dlcjtcbiAgICBjb25zdCBsb2dMZXZlbCA9IGNsaWVudC5sb2dMZXZlbCA/PyAnb2ZmJztcbiAgICBpZiAoIWxvZ2dlcikge1xuICAgICAgICByZXR1cm4gbm9vcExvZ2dlcjtcbiAgICB9XG4gICAgY29uc3QgY2FjaGVkTG9nZ2VyID0gY2FjaGVkTG9nZ2Vycy5nZXQobG9nZ2VyKTtcbiAgICBpZiAoY2FjaGVkTG9nZ2VyICYmIGNhY2hlZExvZ2dlclswXSA9PT0gbG9nTGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZExvZ2dlclsxXTtcbiAgICB9XG4gICAgY29uc3QgbGV2ZWxMb2dnZXIgPSB7XG4gICAgICAgIGVycm9yOiBtYWtlTG9nRm4oJ2Vycm9yJywgbG9nZ2VyLCBsb2dMZXZlbCksXG4gICAgICAgIHdhcm46IG1ha2VMb2dGbignd2FybicsIGxvZ2dlciwgbG9nTGV2ZWwpLFxuICAgICAgICBpbmZvOiBtYWtlTG9nRm4oJ2luZm8nLCBsb2dnZXIsIGxvZ0xldmVsKSxcbiAgICAgICAgZGVidWc6IG1ha2VMb2dGbignZGVidWcnLCBsb2dnZXIsIGxvZ0xldmVsKSxcbiAgICB9O1xuICAgIGNhY2hlZExvZ2dlcnMuc2V0KGxvZ2dlciwgW2xvZ0xldmVsLCBsZXZlbExvZ2dlcl0pO1xuICAgIHJldHVybiBsZXZlbExvZ2dlcjtcbn1cbmV4cG9ydCBjb25zdCBmb3JtYXRSZXF1ZXN0RGV0YWlscyA9IChkZXRhaWxzKSA9PiB7XG4gICAgaWYgKGRldGFpbHMub3B0aW9ucykge1xuICAgICAgICBkZXRhaWxzLm9wdGlvbnMgPSB7IC4uLmRldGFpbHMub3B0aW9ucyB9O1xuICAgICAgICBkZWxldGUgZGV0YWlscy5vcHRpb25zWydoZWFkZXJzJ107IC8vIHJlZHVuZGFudCArIGxlYWtzIGludGVybmFsc1xuICAgIH1cbiAgICBpZiAoZGV0YWlscy5oZWFkZXJzKSB7XG4gICAgICAgIGRldGFpbHMuaGVhZGVycyA9IE9iamVjdC5mcm9tRW50cmllcygoZGV0YWlscy5oZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycyA/IFsuLi5kZXRhaWxzLmhlYWRlcnNdIDogT2JqZWN0LmVudHJpZXMoZGV0YWlscy5oZWFkZXJzKSkubWFwKChbbmFtZSwgdmFsdWVdKSA9PiBbXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgKG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3gtYXBpLWtleScgfHxcbiAgICAgICAgICAgICAgICBuYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhdXRob3JpemF0aW9uJyB8fFxuICAgICAgICAgICAgICAgIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2Nvb2tpZScgfHxcbiAgICAgICAgICAgICAgICBuYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZXQtY29va2llJykgP1xuICAgICAgICAgICAgICAgICcqKionXG4gICAgICAgICAgICAgICAgOiB2YWx1ZSxcbiAgICAgICAgXSkpO1xuICAgIH1cbiAgICBpZiAoJ3JldHJ5T2ZSZXF1ZXN0TG9nSUQnIGluIGRldGFpbHMpIHtcbiAgICAgICAgaWYgKGRldGFpbHMucmV0cnlPZlJlcXVlc3RMb2dJRCkge1xuICAgICAgICAgICAgZGV0YWlscy5yZXRyeU9mID0gZGV0YWlscy5yZXRyeU9mUmVxdWVzdExvZ0lEO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBkZXRhaWxzLnJldHJ5T2ZSZXF1ZXN0TG9nSUQ7XG4gICAgfVxuICAgIHJldHVybiBkZXRhaWxzO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/log.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/path.mjs":
/*!********************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/utils/path.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPathTagFunction: () => (/* binding */ createPathTagFunction),\n/* harmony export */   encodeURIPath: () => (/* binding */ encodeURIPath),\n/* harmony export */   path: () => (/* binding */ path)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/error.mjs\");\n\n/**\n * Percent-encode everything that isn't safe to have in a path without encoding safe chars.\n *\n * Taken from https://datatracker.ietf.org/doc/html/rfc3986#section-3.3:\n * > unreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n * > sub-delims  = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n * > pchar       = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n */\nfunction encodeURIPath(str) {\n    return str.replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]+/g, encodeURIComponent);\n}\nconst EMPTY = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.create(null));\nconst createPathTagFunction = (pathEncoder = encodeURIPath) => function path(statics, ...params) {\n    // If there are no params, no processing is needed.\n    if (statics.length === 1)\n        return statics[0];\n    let postPath = false;\n    const invalidSegments = [];\n    const path = statics.reduce((previousValue, currentValue, index) => {\n        if (/[?#]/.test(currentValue)) {\n            postPath = true;\n        }\n        const value = params[index];\n        let encoded = (postPath ? encodeURIComponent : pathEncoder)('' + value);\n        if (index !== params.length &&\n            (value == null ||\n                (typeof value === 'object' &&\n                    // handle values from other realms\n                    value.toString ===\n                        Object.getPrototypeOf(Object.getPrototypeOf(value.hasOwnProperty ?? EMPTY) ?? EMPTY)\n                            ?.toString))) {\n            encoded = value + '';\n            invalidSegments.push({\n                start: previousValue.length + currentValue.length,\n                length: encoded.length,\n                error: `Value of type ${Object.prototype.toString\n                    .call(value)\n                    .slice(8, -1)} is not a valid path parameter`,\n            });\n        }\n        return previousValue + currentValue + (index === params.length ? '' : encoded);\n    }, '');\n    const pathOnly = path.split(/[?#]/, 1)[0];\n    const invalidSegmentPattern = /(?<=^|\\/)(?:\\.|%2e){1,2}(?=\\/|$)/gi;\n    let match;\n    // Find all invalid segments\n    while ((match = invalidSegmentPattern.exec(pathOnly)) !== null) {\n        invalidSegments.push({\n            start: match.index,\n            length: match[0].length,\n            error: `Value \"${match[0]}\" can\\'t be safely passed as a path parameter`,\n        });\n    }\n    invalidSegments.sort((a, b) => a.start - b.start);\n    if (invalidSegments.length > 0) {\n        let lastEnd = 0;\n        const underline = invalidSegments.reduce((acc, segment) => {\n            const spaces = ' '.repeat(segment.start - lastEnd);\n            const arrows = '^'.repeat(segment.length);\n            lastEnd = segment.start + segment.length;\n            return acc + spaces + arrows;\n        }, '');\n        throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`Path parameters result in path with invalid segments:\\n${invalidSegments\n            .map((e) => e.error)\n            .join('\\n')}\\n${path}\\n${underline}`);\n    }\n    return path;\n};\n/**\n * URI-encodes path params and ensures no unsafe /./ or /../ path segments are introduced.\n */\nconst path = /* @__PURE__ */ createPathTagFunction(encodeURIPath);\n//# sourceMappingURL=path.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL3BhdGgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRTtBQUMzRTtBQUNBO0FBQ087QUFDUCxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQSxtQ0FBbUM7QUFDbkMsYUFBYTtBQUNiO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx1REFBdUQsSUFBSTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsU0FBUztBQUN0QyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGtCQUFrQiwyREFBYywyREFBMkQ7QUFDM0Y7QUFDQSx3QkFBd0IsSUFBSSxLQUFLLElBQUksVUFBVTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBpcC91aS8uLi8uLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvcGF0aC5tanM/YTIwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbnRocm9waWNFcnJvciB9IGZyb20gXCIuLi8uLi9jb3JlL2Vycm9yLm1qc1wiO1xuLyoqXG4gKiBQZXJjZW50LWVuY29kZSBldmVyeXRoaW5nIHRoYXQgaXNuJ3Qgc2FmZSB0byBoYXZlIGluIGEgcGF0aCB3aXRob3V0IGVuY29kaW5nIHNhZmUgY2hhcnMuXG4gKlxuICogVGFrZW4gZnJvbSBodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjM6XG4gKiA+IHVucmVzZXJ2ZWQgID0gQUxQSEEgLyBESUdJVCAvIFwiLVwiIC8gXCIuXCIgLyBcIl9cIiAvIFwiflwiXG4gKiA+IHN1Yi1kZWxpbXMgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiIC8gXCIqXCIgLyBcIitcIiAvIFwiLFwiIC8gXCI7XCIgLyBcIj1cIlxuICogPiBwY2hhciAgICAgICA9IHVucmVzZXJ2ZWQgLyBwY3QtZW5jb2RlZCAvIHN1Yi1kZWxpbXMgLyBcIjpcIiAvIFwiQFwiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVVUklQYXRoKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvW15BLVphLXowLTlcXC0uX34hJCYnKCkqKyw7PTpAXSsvZywgZW5jb2RlVVJJQ29tcG9uZW50KTtcbn1cbmNvbnN0IEVNUFRZID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVBhdGhUYWdGdW5jdGlvbiA9IChwYXRoRW5jb2RlciA9IGVuY29kZVVSSVBhdGgpID0+IGZ1bmN0aW9uIHBhdGgoc3RhdGljcywgLi4ucGFyYW1zKSB7XG4gICAgLy8gSWYgdGhlcmUgYXJlIG5vIHBhcmFtcywgbm8gcHJvY2Vzc2luZyBpcyBuZWVkZWQuXG4gICAgaWYgKHN0YXRpY3MubGVuZ3RoID09PSAxKVxuICAgICAgICByZXR1cm4gc3RhdGljc1swXTtcbiAgICBsZXQgcG9zdFBhdGggPSBmYWxzZTtcbiAgICBjb25zdCBpbnZhbGlkU2VnbWVudHMgPSBbXTtcbiAgICBjb25zdCBwYXRoID0gc3RhdGljcy5yZWR1Y2UoKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKC9bPyNdLy50ZXN0KGN1cnJlbnRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHBvc3RQYXRoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtc1tpbmRleF07XG4gICAgICAgIGxldCBlbmNvZGVkID0gKHBvc3RQYXRoID8gZW5jb2RlVVJJQ29tcG9uZW50IDogcGF0aEVuY29kZXIpKCcnICsgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IHBhcmFtcy5sZW5ndGggJiZcbiAgICAgICAgICAgICh2YWx1ZSA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHZhbHVlcyBmcm9tIG90aGVyIHJlYWxtc1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS50b1N0cmluZyA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUuaGFzT3duUHJvcGVydHkgPz8gRU1QVFkpID8/IEVNUFRZKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8udG9TdHJpbmcpKSkge1xuICAgICAgICAgICAgZW5jb2RlZCA9IHZhbHVlICsgJyc7XG4gICAgICAgICAgICBpbnZhbGlkU2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHByZXZpb3VzVmFsdWUubGVuZ3RoICsgY3VycmVudFZhbHVlLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGVuY29kZWQubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGVycm9yOiBgVmFsdWUgb2YgdHlwZSAke09iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgLmNhbGwodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIC5zbGljZSg4LCAtMSl9IGlzIG5vdCBhIHZhbGlkIHBhdGggcGFyYW1ldGVyYCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlICsgY3VycmVudFZhbHVlICsgKGluZGV4ID09PSBwYXJhbXMubGVuZ3RoID8gJycgOiBlbmNvZGVkKTtcbiAgICB9LCAnJyk7XG4gICAgY29uc3QgcGF0aE9ubHkgPSBwYXRoLnNwbGl0KC9bPyNdLywgMSlbMF07XG4gICAgY29uc3QgaW52YWxpZFNlZ21lbnRQYXR0ZXJuID0gLyg/PD1efFxcLykoPzpcXC58JTJlKXsxLDJ9KD89XFwvfCQpL2dpO1xuICAgIGxldCBtYXRjaDtcbiAgICAvLyBGaW5kIGFsbCBpbnZhbGlkIHNlZ21lbnRzXG4gICAgd2hpbGUgKChtYXRjaCA9IGludmFsaWRTZWdtZW50UGF0dGVybi5leGVjKHBhdGhPbmx5KSkgIT09IG51bGwpIHtcbiAgICAgICAgaW52YWxpZFNlZ21lbnRzLnB1c2goe1xuICAgICAgICAgICAgc3RhcnQ6IG1hdGNoLmluZGV4LFxuICAgICAgICAgICAgbGVuZ3RoOiBtYXRjaFswXS5sZW5ndGgsXG4gICAgICAgICAgICBlcnJvcjogYFZhbHVlIFwiJHttYXRjaFswXX1cIiBjYW5cXCd0IGJlIHNhZmVseSBwYXNzZWQgYXMgYSBwYXRoIHBhcmFtZXRlcmAsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbnZhbGlkU2VnbWVudHMuc29ydCgoYSwgYikgPT4gYS5zdGFydCAtIGIuc3RhcnQpO1xuICAgIGlmIChpbnZhbGlkU2VnbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgbGFzdEVuZCA9IDA7XG4gICAgICAgIGNvbnN0IHVuZGVybGluZSA9IGludmFsaWRTZWdtZW50cy5yZWR1Y2UoKGFjYywgc2VnbWVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3BhY2VzID0gJyAnLnJlcGVhdChzZWdtZW50LnN0YXJ0IC0gbGFzdEVuZCk7XG4gICAgICAgICAgICBjb25zdCBhcnJvd3MgPSAnXicucmVwZWF0KHNlZ21lbnQubGVuZ3RoKTtcbiAgICAgICAgICAgIGxhc3RFbmQgPSBzZWdtZW50LnN0YXJ0ICsgc2VnbWVudC5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gYWNjICsgc3BhY2VzICsgYXJyb3dzO1xuICAgICAgICB9LCAnJyk7XG4gICAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihgUGF0aCBwYXJhbWV0ZXJzIHJlc3VsdCBpbiBwYXRoIHdpdGggaW52YWxpZCBzZWdtZW50czpcXG4ke2ludmFsaWRTZWdtZW50c1xuICAgICAgICAgICAgLm1hcCgoZSkgPT4gZS5lcnJvcilcbiAgICAgICAgICAgIC5qb2luKCdcXG4nKX1cXG4ke3BhdGh9XFxuJHt1bmRlcmxpbmV9YCk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoO1xufTtcbi8qKlxuICogVVJJLWVuY29kZXMgcGF0aCBwYXJhbXMgYW5kIGVuc3VyZXMgbm8gdW5zYWZlIC8uLyBvciAvLi4vIHBhdGggc2VnbWVudHMgYXJlIGludHJvZHVjZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBwYXRoID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZVBhdGhUYWdGdW5jdGlvbihlbmNvZGVVUklQYXRoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdGgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/sleep.mjs":
/*!*********************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/utils/sleep.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n//# sourceMappingURL=sleep.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL3NsZWVwLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBpcC91aS8uLi8uLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvaW50ZXJuYWwvdXRpbHMvc2xlZXAubWpzP2VlNGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmV4cG9ydCBjb25zdCBzbGVlcCA9IChtcykgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNsZWVwLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/sleep.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/uuid.mjs":
/*!********************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/utils/uuid.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uuid4: () => (/* binding */ uuid4)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n/**\n * https://stackoverflow.com/a/2117523\n */\nlet uuid4 = function () {\n    const { crypto } = globalThis;\n    if (crypto?.randomUUID) {\n        uuid4 = crypto.randomUUID.bind(crypto);\n        return crypto.randomUUID();\n    }\n    const u8 = new Uint8Array(1);\n    const randomByte = crypto ? () => crypto.getRandomValues(u8)[0] : () => (Math.random() * 0xff) & 0xff;\n    return '10000000-1000-4000-8000-100000000000'.replace(/[018]/g, (c) => (+c ^ (randomByte() & (15 >> (+c / 4)))).toString(16));\n};\n//# sourceMappingURL=uuid.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL3V1aWQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL3V1aWQubWpzPzJlYzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbi8qKlxuICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjNcbiAqL1xuZXhwb3J0IGxldCB1dWlkNCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB7IGNyeXB0byB9ID0gZ2xvYmFsVGhpcztcbiAgICBpZiAoY3J5cHRvPy5yYW5kb21VVUlEKSB7XG4gICAgICAgIHV1aWQ0ID0gY3J5cHRvLnJhbmRvbVVVSUQuYmluZChjcnlwdG8pO1xuICAgICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbVVVSUQoKTtcbiAgICB9XG4gICAgY29uc3QgdTggPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICBjb25zdCByYW5kb21CeXRlID0gY3J5cHRvID8gKCkgPT4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh1OClbMF0gOiAoKSA9PiAoTWF0aC5yYW5kb20oKSAqIDB4ZmYpICYgMHhmZjtcbiAgICByZXR1cm4gJzEwMDAwMDAwLTEwMDAtNDAwMC04MDAwLTEwMDAwMDAwMDAwMCcucmVwbGFjZSgvWzAxOF0vZywgKGMpID0+ICgrYyBeIChyYW5kb21CeXRlKCkgJiAoMTUgPj4gKCtjIC8gNCkpKSkudG9TdHJpbmcoMTYpKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dWlkLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/uuid.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/values.mjs":
/*!**********************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/internal/utils/values.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerceBoolean: () => (/* binding */ coerceBoolean),\n/* harmony export */   coerceFloat: () => (/* binding */ coerceFloat),\n/* harmony export */   coerceInteger: () => (/* binding */ coerceInteger),\n/* harmony export */   ensurePresent: () => (/* binding */ ensurePresent),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isAbsoluteURL: () => (/* binding */ isAbsoluteURL),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isEmptyObj: () => (/* binding */ isEmptyObj),\n/* harmony export */   isObj: () => (/* binding */ isObj),\n/* harmony export */   isReadonlyArray: () => (/* binding */ isReadonlyArray),\n/* harmony export */   maybeCoerceBoolean: () => (/* binding */ maybeCoerceBoolean),\n/* harmony export */   maybeCoerceFloat: () => (/* binding */ maybeCoerceFloat),\n/* harmony export */   maybeCoerceInteger: () => (/* binding */ maybeCoerceInteger),\n/* harmony export */   maybeObj: () => (/* binding */ maybeObj),\n/* harmony export */   safeJSON: () => (/* binding */ safeJSON),\n/* harmony export */   validatePositiveInteger: () => (/* binding */ validatePositiveInteger)\n/* harmony export */ });\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/error.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n// https://url.spec.whatwg.org/#url-scheme-string\nconst startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;\nconst isAbsoluteURL = (url) => {\n    return startsWithSchemeRegexp.test(url);\n};\nlet isArray = (val) => ((isArray = Array.isArray), isArray(val));\nlet isReadonlyArray = isArray;\n/** Returns an object if the given value isn't an object, otherwise returns as-is */\nfunction maybeObj(x) {\n    if (typeof x !== 'object') {\n        return {};\n    }\n    return x ?? {};\n}\n// https://stackoverflow.com/a/34491287\nfunction isEmptyObj(obj) {\n    if (!obj)\n        return true;\n    for (const _k in obj)\n        return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nfunction hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction isObj(obj) {\n    return obj != null && typeof obj === 'object' && !Array.isArray(obj);\n}\nconst ensurePresent = (value) => {\n    if (value == null) {\n        throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`Expected a value to be given but received ${value} instead.`);\n    }\n    return value;\n};\nconst validatePositiveInteger = (name, n) => {\n    if (typeof n !== 'number' || !Number.isInteger(n)) {\n        throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`${name} must be a positive integer`);\n    }\n    return n;\n};\nconst coerceInteger = (value) => {\n    if (typeof value === 'number')\n        return Math.round(value);\n    if (typeof value === 'string')\n        return parseInt(value, 10);\n    throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceFloat = (value) => {\n    if (typeof value === 'number')\n        return value;\n    if (typeof value === 'string')\n        return parseFloat(value);\n    throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_0__.AnthropicError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceBoolean = (value) => {\n    if (typeof value === 'boolean')\n        return value;\n    if (typeof value === 'string')\n        return value === 'true';\n    return Boolean(value);\n};\nconst maybeCoerceInteger = (value) => {\n    if (value == null) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nconst maybeCoerceFloat = (value) => {\n    if (value == null) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nconst maybeCoerceBoolean = (value) => {\n    if (value == null) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\nconst safeJSON = (text) => {\n    try {\n        return JSON.parse(text);\n    }\n    catch (err) {\n        return undefined;\n    }\n};\n//# sourceMappingURL=values.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL3ZhbHVlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNzRDtBQUN0RDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDQTtBQUNQO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBLGtCQUFrQiwyREFBYyw4Q0FBOEMsT0FBTztBQUNyRjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esa0JBQWtCLDJEQUFjLElBQUksTUFBTTtBQUMxQztBQUNBO0FBQ0Esa0JBQWtCLDJEQUFjLElBQUksTUFBTTtBQUMxQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYywyREFBYyxxQkFBcUIsT0FBTyxTQUFTLGFBQWE7QUFDOUU7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYywyREFBYyxxQkFBcUIsT0FBTyxTQUFTLGFBQWE7QUFDOUU7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL2ludGVybmFsL3V0aWxzL3ZhbHVlcy5tanM/NmM2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQW50aHJvcGljRXJyb3IgfSBmcm9tIFwiLi4vLi4vY29yZS9lcnJvci5tanNcIjtcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsLXNjaGVtZS1zdHJpbmdcbmNvbnN0IHN0YXJ0c1dpdGhTY2hlbWVSZWdleHAgPSAvXlthLXpdW2EtejAtOSsuLV0qOi9pO1xuZXhwb3J0IGNvbnN0IGlzQWJzb2x1dGVVUkwgPSAodXJsKSA9PiB7XG4gICAgcmV0dXJuIHN0YXJ0c1dpdGhTY2hlbWVSZWdleHAudGVzdCh1cmwpO1xufTtcbmV4cG9ydCBsZXQgaXNBcnJheSA9ICh2YWwpID0+ICgoaXNBcnJheSA9IEFycmF5LmlzQXJyYXkpLCBpc0FycmF5KHZhbCkpO1xuZXhwb3J0IGxldCBpc1JlYWRvbmx5QXJyYXkgPSBpc0FycmF5O1xuLyoqIFJldHVybnMgYW4gb2JqZWN0IGlmIHRoZSBnaXZlbiB2YWx1ZSBpc24ndCBhbiBvYmplY3QsIG90aGVyd2lzZSByZXR1cm5zIGFzLWlzICovXG5leHBvcnQgZnVuY3Rpb24gbWF5YmVPYmooeCkge1xuICAgIGlmICh0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICByZXR1cm4geCA/PyB7fTtcbn1cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNDQ5MTI4N1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlPYmoob2JqKSB7XG4gICAgaWYgKCFvYmopXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGZvciAoY29uc3QgX2sgaW4gb2JqKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyBodHRwczovL2VzbGludC5vcmcvZG9jcy9sYXRlc3QvcnVsZXMvbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5leHBvcnQgZnVuY3Rpb24gaGFzT3duKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNPYmoob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG9iaik7XG59XG5leHBvcnQgY29uc3QgZW5zdXJlUHJlc2VudCA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBBbnRocm9waWNFcnJvcihgRXhwZWN0ZWQgYSB2YWx1ZSB0byBiZSBnaXZlbiBidXQgcmVjZWl2ZWQgJHt2YWx1ZX0gaW5zdGVhZC5gKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcbmV4cG9ydCBjb25zdCB2YWxpZGF0ZVBvc2l0aXZlSW50ZWdlciA9IChuYW1lLCBuKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihuKSkge1xuICAgICAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBhbiBpbnRlZ2VyYCk7XG4gICAgfVxuICAgIGlmIChuIDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXJgKTtcbiAgICB9XG4gICAgcmV0dXJuIG47XG59O1xuZXhwb3J0IGNvbnN0IGNvZXJjZUludGVnZXIgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUpO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYENvdWxkIG5vdCBjb2VyY2UgJHt2YWx1ZX0gKHR5cGU6ICR7dHlwZW9mIHZhbHVlfSkgaW50byBhIG51bWJlcmApO1xufTtcbmV4cG9ydCBjb25zdCBjb2VyY2VGbG9hdCA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICB0aHJvdyBuZXcgQW50aHJvcGljRXJyb3IoYENvdWxkIG5vdCBjb2VyY2UgJHt2YWx1ZX0gKHR5cGU6ICR7dHlwZW9mIHZhbHVlfSkgaW50byBhIG51bWJlcmApO1xufTtcbmV4cG9ydCBjb25zdCBjb2VyY2VCb29sZWFuID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gJ3RydWUnO1xuICAgIHJldHVybiBCb29sZWFuKHZhbHVlKTtcbn07XG5leHBvcnQgY29uc3QgbWF5YmVDb2VyY2VJbnRlZ2VyID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvZXJjZUludGVnZXIodmFsdWUpO1xufTtcbmV4cG9ydCBjb25zdCBtYXliZUNvZXJjZUZsb2F0ID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvZXJjZUZsb2F0KHZhbHVlKTtcbn07XG5leHBvcnQgY29uc3QgbWF5YmVDb2VyY2VCb29sZWFuID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvZXJjZUJvb2xlYW4odmFsdWUpO1xufTtcbmV4cG9ydCBjb25zdCBzYWZlSlNPTiA9ICh0ZXh0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsdWVzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/values.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs":
/*!**********************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BetaMessageStream: () => (/* binding */ BetaMessageStream)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/errors.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/errors.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/error.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../streaming.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/streaming.mjs\");\n/* harmony import */ var _vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_vendor/partial-json-parser/parser.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs\");\nvar _BetaMessageStream_instances, _BetaMessageStream_currentMessageSnapshot, _BetaMessageStream_connectedPromise, _BetaMessageStream_resolveConnectedPromise, _BetaMessageStream_rejectConnectedPromise, _BetaMessageStream_endPromise, _BetaMessageStream_resolveEndPromise, _BetaMessageStream_rejectEndPromise, _BetaMessageStream_listeners, _BetaMessageStream_ended, _BetaMessageStream_errored, _BetaMessageStream_aborted, _BetaMessageStream_catchingPromiseCreated, _BetaMessageStream_response, _BetaMessageStream_request_id, _BetaMessageStream_getFinalMessage, _BetaMessageStream_getFinalText, _BetaMessageStream_handleError, _BetaMessageStream_beginRequest, _BetaMessageStream_addStreamEvent, _BetaMessageStream_endRequest, _BetaMessageStream_accumulateMessage;\n\n\n\n\n\nconst JSON_BUF_PROPERTY = '__json_buf';\nfunction tracksToolInput(content) {\n    return content.type === 'tool_use' || content.type === 'server_tool_use' || content.type === 'mcp_tool_use';\n}\nclass BetaMessageStream {\n    constructor() {\n        _BetaMessageStream_instances.add(this);\n        this.messages = [];\n        this.receivedMessages = [];\n        _BetaMessageStream_currentMessageSnapshot.set(this, void 0);\n        this.controller = new AbortController();\n        _BetaMessageStream_connectedPromise.set(this, void 0);\n        _BetaMessageStream_resolveConnectedPromise.set(this, () => { });\n        _BetaMessageStream_rejectConnectedPromise.set(this, () => { });\n        _BetaMessageStream_endPromise.set(this, void 0);\n        _BetaMessageStream_resolveEndPromise.set(this, () => { });\n        _BetaMessageStream_rejectEndPromise.set(this, () => { });\n        _BetaMessageStream_listeners.set(this, {});\n        _BetaMessageStream_ended.set(this, false);\n        _BetaMessageStream_errored.set(this, false);\n        _BetaMessageStream_aborted.set(this, false);\n        _BetaMessageStream_catchingPromiseCreated.set(this, false);\n        _BetaMessageStream_response.set(this, void 0);\n        _BetaMessageStream_request_id.set(this, void 0);\n        _BetaMessageStream_handleError.set(this, (error) => {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_errored, true, \"f\");\n            if ((0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_1__.isAbortError)(error)) {\n                error = new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n            }\n            if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError) {\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_aborted, true, \"f\");\n                return this._emit('abort', error);\n            }\n            if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError) {\n                return this._emit('error', error);\n            }\n            if (error instanceof Error) {\n                const anthropicError = new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(error.message);\n                // @ts-ignore\n                anthropicError.cause = error;\n                return this._emit('error', anthropicError);\n            }\n            return this._emit('error', new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(String(error)));\n        });\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_connectedPromise, new Promise((resolve, reject) => {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_resolveConnectedPromise, resolve, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_endPromise, new Promise((resolve, reject) => {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_resolveEndPromise, resolve, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_connectedPromise, \"f\").catch(() => { });\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_endPromise, \"f\").catch(() => { });\n    }\n    get response() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_response, \"f\");\n    }\n    get request_id() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_request_id, \"f\");\n    }\n    /**\n     * Returns the `MessageStream` data, the raw `Response` instance and the ID of the request,\n     * returned vie the `request-id` header which is useful for debugging requests and resporting\n     * issues to Anthropic.\n     *\n     * This is the same as the `APIPromise.withResponse()` method.\n     *\n     * This method will raise an error if you created the stream using `MessageStream.fromReadableStream`\n     * as no `Response` is available.\n     */\n    async withResponse() {\n        const response = await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_connectedPromise, \"f\");\n        if (!response) {\n            throw new Error('Could not resolve a `Response` object');\n        }\n        return {\n            data: this,\n            response,\n            request_id: response.headers.get('request-id'),\n        };\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */\n    static fromReadableStream(stream) {\n        const runner = new BetaMessageStream();\n        runner._run(() => runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createMessage(messages, params, options) {\n        const runner = new BetaMessageStream();\n        for (const message of params.messages) {\n            runner._addMessageParam(message);\n        }\n        runner._run(() => runner._createMessage(messages, { ...params, stream: true }, { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } }));\n        return runner;\n    }\n    _run(executor) {\n        executor().then(() => {\n            this._emitFinal();\n            this._emit('end');\n        }, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_handleError, \"f\"));\n    }\n    _addMessageParam(message) {\n        this.messages.push(message);\n    }\n    _addMessage(message, emit = true) {\n        this.receivedMessages.push(message);\n        if (emit) {\n            this._emit('message', message);\n        }\n    }\n    async _createMessage(messages, params, options) {\n        const signal = options?.signal;\n        let abortHandler;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            abortHandler = this.controller.abort.bind(this.controller);\n            signal.addEventListener('abort', abortHandler);\n        }\n        try {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_beginRequest).call(this);\n            const { response, data: stream } = await messages\n                .create({ ...params, stream: true }, { ...options, signal: this.controller.signal })\n                .withResponse();\n            this._connected(response);\n            for await (const event of stream) {\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_addStreamEvent).call(this, event);\n            }\n            if (stream.controller.signal?.aborted) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_endRequest).call(this);\n        }\n        finally {\n            if (signal && abortHandler) {\n                signal.removeEventListener('abort', abortHandler);\n            }\n        }\n    }\n    _connected(response) {\n        if (this.ended)\n            return;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_response, response, \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_request_id, response?.headers.get('request-id'), \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_resolveConnectedPromise, \"f\").call(this, response);\n        this._emit('connect');\n    }\n    get ended() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_ended, \"f\");\n    }\n    get errored() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_errored, \"f\");\n    }\n    get aborted() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this MessageStream, so that calls can be chained\n     */\n    on(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event] || ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event] = []);\n        listeners.push({ listener });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this MessageStream, so that calls can be chained\n     */\n    off(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event];\n        if (!listeners)\n            return this;\n        const index = listeners.findIndex((l) => l.listener === listener);\n        if (index >= 0)\n            listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this MessageStream, so that calls can be chained\n     */\n    once(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event] || ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event] = []);\n        listeners.push({ listener, once: true });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */\n    emitted(event) {\n        return new Promise((resolve, reject) => {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_catchingPromiseCreated, true, \"f\");\n            if (event !== 'error')\n                this.once('error', reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_catchingPromiseCreated, true, \"f\");\n        await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_endPromise, \"f\");\n    }\n    get currentMessage() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_currentMessageSnapshot, \"f\");\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant Message response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a Message.\n     */\n    async finalMessage() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant Message's text response, concatenated\n     * together if there are more than one text blocks.\n     * Rejects if an error occurred or the stream ended prematurely without producing a Message.\n     */\n    async finalText() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_getFinalText).call(this);\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any MessageStreamEvents after end\n        if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_ended, \"f\"))\n            return;\n        if (event === 'end') {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_ended, true, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event];\n        if (listeners) {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_listeners, \"f\")[event] = listeners.filter((l) => !l.once);\n            listeners.forEach(({ listener }) => listener(...args));\n        }\n        if (event === 'abort') {\n            const error = args[0];\n            if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_rejectConnectedPromise, \"f\").call(this, error);\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n            return;\n        }\n        if (event === 'error') {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.final...()\n                // - etc.\n                Promise.reject(error);\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_rejectConnectedPromise, \"f\").call(this, error);\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n        }\n    }\n    _emitFinal() {\n        const finalMessage = this.receivedMessages.at(-1);\n        if (finalMessage) {\n            this._emit('finalMessage', (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_getFinalMessage).call(this));\n        }\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        let abortHandler;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            abortHandler = this.controller.abort.bind(this.controller);\n            signal.addEventListener('abort', abortHandler);\n        }\n        try {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_beginRequest).call(this);\n            this._connected(null);\n            const stream = _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__.Stream.fromReadableStream(readableStream, this.controller);\n            for await (const event of stream) {\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_addStreamEvent).call(this, event);\n            }\n            if (stream.controller.signal?.aborted) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_endRequest).call(this);\n        }\n        finally {\n            if (signal && abortHandler) {\n                signal.removeEventListener('abort', abortHandler);\n            }\n        }\n    }\n    [(_BetaMessageStream_currentMessageSnapshot = new WeakMap(), _BetaMessageStream_connectedPromise = new WeakMap(), _BetaMessageStream_resolveConnectedPromise = new WeakMap(), _BetaMessageStream_rejectConnectedPromise = new WeakMap(), _BetaMessageStream_endPromise = new WeakMap(), _BetaMessageStream_resolveEndPromise = new WeakMap(), _BetaMessageStream_rejectEndPromise = new WeakMap(), _BetaMessageStream_listeners = new WeakMap(), _BetaMessageStream_ended = new WeakMap(), _BetaMessageStream_errored = new WeakMap(), _BetaMessageStream_aborted = new WeakMap(), _BetaMessageStream_catchingPromiseCreated = new WeakMap(), _BetaMessageStream_response = new WeakMap(), _BetaMessageStream_request_id = new WeakMap(), _BetaMessageStream_handleError = new WeakMap(), _BetaMessageStream_instances = new WeakSet(), _BetaMessageStream_getFinalMessage = function _BetaMessageStream_getFinalMessage() {\n        if (this.receivedMessages.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError('stream ended without producing a Message with role=assistant');\n        }\n        return this.receivedMessages.at(-1);\n    }, _BetaMessageStream_getFinalText = function _BetaMessageStream_getFinalText() {\n        if (this.receivedMessages.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError('stream ended without producing a Message with role=assistant');\n        }\n        const textBlocks = this.receivedMessages\n            .at(-1)\n            .content.filter((block) => block.type === 'text')\n            .map((block) => block.text);\n        if (textBlocks.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError('stream ended without producing a content block with type=text');\n        }\n        return textBlocks.join(' ');\n    }, _BetaMessageStream_beginRequest = function _BetaMessageStream_beginRequest() {\n        if (this.ended)\n            return;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_currentMessageSnapshot, undefined, \"f\");\n    }, _BetaMessageStream_addStreamEvent = function _BetaMessageStream_addStreamEvent(event) {\n        if (this.ended)\n            return;\n        const messageSnapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_instances, \"m\", _BetaMessageStream_accumulateMessage).call(this, event);\n        this._emit('streamEvent', event, messageSnapshot);\n        switch (event.type) {\n            case 'content_block_delta': {\n                const content = messageSnapshot.content.at(-1);\n                switch (event.delta.type) {\n                    case 'text_delta': {\n                        if (content.type === 'text') {\n                            this._emit('text', event.delta.text, content.text || '');\n                        }\n                        break;\n                    }\n                    case 'citations_delta': {\n                        if (content.type === 'text') {\n                            this._emit('citation', event.delta.citation, content.citations ?? []);\n                        }\n                        break;\n                    }\n                    case 'input_json_delta': {\n                        if (tracksToolInput(content) && content.input) {\n                            this._emit('inputJson', event.delta.partial_json, content.input);\n                        }\n                        break;\n                    }\n                    case 'thinking_delta': {\n                        if (content.type === 'thinking') {\n                            this._emit('thinking', event.delta.thinking, content.thinking);\n                        }\n                        break;\n                    }\n                    case 'signature_delta': {\n                        if (content.type === 'thinking') {\n                            this._emit('signature', content.signature);\n                        }\n                        break;\n                    }\n                    default:\n                        checkNever(event.delta);\n                }\n                break;\n            }\n            case 'message_stop': {\n                this._addMessageParam(messageSnapshot);\n                this._addMessage(messageSnapshot, true);\n                break;\n            }\n            case 'content_block_stop': {\n                this._emit('contentBlock', messageSnapshot.content.at(-1));\n                break;\n            }\n            case 'message_start': {\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_currentMessageSnapshot, messageSnapshot, \"f\");\n                break;\n            }\n            case 'content_block_start':\n            case 'message_delta':\n                break;\n        }\n    }, _BetaMessageStream_endRequest = function _BetaMessageStream_endRequest() {\n        if (this.ended) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_currentMessageSnapshot, \"f\");\n        if (!snapshot) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`request ended without sending any chunks`);\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaMessageStream_currentMessageSnapshot, undefined, \"f\");\n        return snapshot;\n    }, _BetaMessageStream_accumulateMessage = function _BetaMessageStream_accumulateMessage(event) {\n        let snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_currentMessageSnapshot, \"f\");\n        if (event.type === 'message_start') {\n            if (snapshot) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`Unexpected event order, got ${event.type} before receiving \"message_stop\"`);\n            }\n            return event.message;\n        }\n        if (!snapshot) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`Unexpected event order, got ${event.type} before \"message_start\"`);\n        }\n        switch (event.type) {\n            case 'message_stop':\n                return snapshot;\n            case 'message_delta':\n                snapshot.container = event.delta.container;\n                snapshot.stop_reason = event.delta.stop_reason;\n                snapshot.stop_sequence = event.delta.stop_sequence;\n                snapshot.usage.output_tokens = event.usage.output_tokens;\n                snapshot.context_management = event.context_management;\n                if (event.usage.input_tokens != null) {\n                    snapshot.usage.input_tokens = event.usage.input_tokens;\n                }\n                if (event.usage.cache_creation_input_tokens != null) {\n                    snapshot.usage.cache_creation_input_tokens = event.usage.cache_creation_input_tokens;\n                }\n                if (event.usage.cache_read_input_tokens != null) {\n                    snapshot.usage.cache_read_input_tokens = event.usage.cache_read_input_tokens;\n                }\n                if (event.usage.server_tool_use != null) {\n                    snapshot.usage.server_tool_use = event.usage.server_tool_use;\n                }\n                return snapshot;\n            case 'content_block_start':\n                snapshot.content.push(event.content_block);\n                return snapshot;\n            case 'content_block_delta': {\n                const snapshotContent = snapshot.content.at(event.index);\n                switch (event.delta.type) {\n                    case 'text_delta': {\n                        if (snapshotContent?.type === 'text') {\n                            snapshot.content[event.index] = {\n                                ...snapshotContent,\n                                text: (snapshotContent.text || '') + event.delta.text,\n                            };\n                        }\n                        break;\n                    }\n                    case 'citations_delta': {\n                        if (snapshotContent?.type === 'text') {\n                            snapshot.content[event.index] = {\n                                ...snapshotContent,\n                                citations: [...(snapshotContent.citations ?? []), event.delta.citation],\n                            };\n                        }\n                        break;\n                    }\n                    case 'input_json_delta': {\n                        if (snapshotContent && tracksToolInput(snapshotContent)) {\n                            // we need to keep track of the raw JSON string as well so that we can\n                            // re-parse it for each delta, for now we just store it as an untyped\n                            // non-enumerable property on the snapshot\n                            let jsonBuf = snapshotContent[JSON_BUF_PROPERTY] || '';\n                            jsonBuf += event.delta.partial_json;\n                            const newContent = { ...snapshotContent };\n                            Object.defineProperty(newContent, JSON_BUF_PROPERTY, {\n                                value: jsonBuf,\n                                enumerable: false,\n                                writable: true,\n                            });\n                            if (jsonBuf) {\n                                try {\n                                    newContent.input = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.partialParse)(jsonBuf);\n                                }\n                                catch (err) {\n                                    const error = new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`Unable to parse tool parameter JSON from model. Please retry your request or adjust your prompt. Error: ${err}. JSON: ${jsonBuf}`);\n                                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaMessageStream_handleError, \"f\").call(this, error);\n                                }\n                            }\n                            snapshot.content[event.index] = newContent;\n                        }\n                        break;\n                    }\n                    case 'thinking_delta': {\n                        if (snapshotContent?.type === 'thinking') {\n                            snapshot.content[event.index] = {\n                                ...snapshotContent,\n                                thinking: snapshotContent.thinking + event.delta.thinking,\n                            };\n                        }\n                        break;\n                    }\n                    case 'signature_delta': {\n                        if (snapshotContent?.type === 'thinking') {\n                            snapshot.content[event.index] = {\n                                ...snapshotContent,\n                                signature: event.delta.signature,\n                            };\n                        }\n                        break;\n                    }\n                    default:\n                        checkNever(event.delta);\n                }\n                return snapshot;\n            }\n            case 'content_block_stop':\n                return snapshot;\n        }\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on('streamEvent', (event) => {\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            }\n            else {\n                pushQueue.push(event);\n            }\n        });\n        this.on('end', () => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on('abort', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on('error', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async () => {\n                if (!pushQueue.length) {\n                    if (done) {\n                        return { value: undefined, done: true };\n                    }\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n                }\n                const chunk = pushQueue.shift();\n                return { value: chunk, done: false };\n            },\n            return: async () => {\n                this.abort();\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    toReadableStream() {\n        const stream = new _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n}\n// used to ensure exhaustive case matching without throwing a runtime error\nfunction checkNever(x) { }\n//# sourceMappingURL=BetaMessageStream.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs":
/*!******************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MessageStream: () => (/* binding */ MessageStream)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/tslib.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _internal_errors_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/errors.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/errors.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/error.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../streaming.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/streaming.mjs\");\n/* harmony import */ var _vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_vendor/partial-json-parser/parser.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/_vendor/partial-json-parser/parser.mjs\");\nvar _MessageStream_instances, _MessageStream_currentMessageSnapshot, _MessageStream_connectedPromise, _MessageStream_resolveConnectedPromise, _MessageStream_rejectConnectedPromise, _MessageStream_endPromise, _MessageStream_resolveEndPromise, _MessageStream_rejectEndPromise, _MessageStream_listeners, _MessageStream_ended, _MessageStream_errored, _MessageStream_aborted, _MessageStream_catchingPromiseCreated, _MessageStream_response, _MessageStream_request_id, _MessageStream_getFinalMessage, _MessageStream_getFinalText, _MessageStream_handleError, _MessageStream_beginRequest, _MessageStream_addStreamEvent, _MessageStream_endRequest, _MessageStream_accumulateMessage;\n\n\n\n\n\nconst JSON_BUF_PROPERTY = '__json_buf';\nfunction tracksToolInput(content) {\n    return content.type === 'tool_use' || content.type === 'server_tool_use';\n}\nclass MessageStream {\n    constructor() {\n        _MessageStream_instances.add(this);\n        this.messages = [];\n        this.receivedMessages = [];\n        _MessageStream_currentMessageSnapshot.set(this, void 0);\n        this.controller = new AbortController();\n        _MessageStream_connectedPromise.set(this, void 0);\n        _MessageStream_resolveConnectedPromise.set(this, () => { });\n        _MessageStream_rejectConnectedPromise.set(this, () => { });\n        _MessageStream_endPromise.set(this, void 0);\n        _MessageStream_resolveEndPromise.set(this, () => { });\n        _MessageStream_rejectEndPromise.set(this, () => { });\n        _MessageStream_listeners.set(this, {});\n        _MessageStream_ended.set(this, false);\n        _MessageStream_errored.set(this, false);\n        _MessageStream_aborted.set(this, false);\n        _MessageStream_catchingPromiseCreated.set(this, false);\n        _MessageStream_response.set(this, void 0);\n        _MessageStream_request_id.set(this, void 0);\n        _MessageStream_handleError.set(this, (error) => {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_errored, true, \"f\");\n            if ((0,_internal_errors_mjs__WEBPACK_IMPORTED_MODULE_1__.isAbortError)(error)) {\n                error = new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n            }\n            if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError) {\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_aborted, true, \"f\");\n                return this._emit('abort', error);\n            }\n            if (error instanceof _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError) {\n                return this._emit('error', error);\n            }\n            if (error instanceof Error) {\n                const anthropicError = new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(error.message);\n                // @ts-ignore\n                anthropicError.cause = error;\n                return this._emit('error', anthropicError);\n            }\n            return this._emit('error', new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(String(error)));\n        });\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_connectedPromise, new Promise((resolve, reject) => {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_resolveConnectedPromise, resolve, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_endPromise, new Promise((resolve, reject) => {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_resolveEndPromise, resolve, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_connectedPromise, \"f\").catch(() => { });\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_endPromise, \"f\").catch(() => { });\n    }\n    get response() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_response, \"f\");\n    }\n    get request_id() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_request_id, \"f\");\n    }\n    /**\n     * Returns the `MessageStream` data, the raw `Response` instance and the ID of the request,\n     * returned vie the `request-id` header which is useful for debugging requests and resporting\n     * issues to Anthropic.\n     *\n     * This is the same as the `APIPromise.withResponse()` method.\n     *\n     * This method will raise an error if you created the stream using `MessageStream.fromReadableStream`\n     * as no `Response` is available.\n     */\n    async withResponse() {\n        const response = await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_connectedPromise, \"f\");\n        if (!response) {\n            throw new Error('Could not resolve a `Response` object');\n        }\n        return {\n            data: this,\n            response,\n            request_id: response.headers.get('request-id'),\n        };\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */\n    static fromReadableStream(stream) {\n        const runner = new MessageStream();\n        runner._run(() => runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createMessage(messages, params, options) {\n        const runner = new MessageStream();\n        for (const message of params.messages) {\n            runner._addMessageParam(message);\n        }\n        runner._run(() => runner._createMessage(messages, { ...params, stream: true }, { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } }));\n        return runner;\n    }\n    _run(executor) {\n        executor().then(() => {\n            this._emitFinal();\n            this._emit('end');\n        }, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_handleError, \"f\"));\n    }\n    _addMessageParam(message) {\n        this.messages.push(message);\n    }\n    _addMessage(message, emit = true) {\n        this.receivedMessages.push(message);\n        if (emit) {\n            this._emit('message', message);\n        }\n    }\n    async _createMessage(messages, params, options) {\n        const signal = options?.signal;\n        let abortHandler;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            abortHandler = this.controller.abort.bind(this.controller);\n            signal.addEventListener('abort', abortHandler);\n        }\n        try {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_beginRequest).call(this);\n            const { response, data: stream } = await messages\n                .create({ ...params, stream: true }, { ...options, signal: this.controller.signal })\n                .withResponse();\n            this._connected(response);\n            for await (const event of stream) {\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_addStreamEvent).call(this, event);\n            }\n            if (stream.controller.signal?.aborted) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_endRequest).call(this);\n        }\n        finally {\n            if (signal && abortHandler) {\n                signal.removeEventListener('abort', abortHandler);\n            }\n        }\n    }\n    _connected(response) {\n        if (this.ended)\n            return;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_response, response, \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_request_id, response?.headers.get('request-id'), \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_resolveConnectedPromise, \"f\").call(this, response);\n        this._emit('connect');\n    }\n    get ended() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_ended, \"f\");\n    }\n    get errored() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_errored, \"f\");\n    }\n    get aborted() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this MessageStream, so that calls can be chained\n     */\n    on(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event] || ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event] = []);\n        listeners.push({ listener });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this MessageStream, so that calls can be chained\n     */\n    off(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event];\n        if (!listeners)\n            return this;\n        const index = listeners.findIndex((l) => l.listener === listener);\n        if (index >= 0)\n            listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this MessageStream, so that calls can be chained\n     */\n    once(event, listener) {\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event] || ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event] = []);\n        listeners.push({ listener, once: true });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */\n    emitted(event) {\n        return new Promise((resolve, reject) => {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_catchingPromiseCreated, true, \"f\");\n            if (event !== 'error')\n                this.once('error', reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_catchingPromiseCreated, true, \"f\");\n        await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_endPromise, \"f\");\n    }\n    get currentMessage() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_currentMessageSnapshot, \"f\");\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant Message response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a Message.\n     */\n    async finalMessage() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant Message's text response, concatenated\n     * together if there are more than one text blocks.\n     * Rejects if an error occurred or the stream ended prematurely without producing a Message.\n     */\n    async finalText() {\n        await this.done();\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_getFinalText).call(this);\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any MessageStreamEvents after end\n        if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_ended, \"f\"))\n            return;\n        if (event === 'end') {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_ended, true, \"f\");\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event];\n        if (listeners) {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_listeners, \"f\")[event] = listeners.filter((l) => !l.once);\n            listeners.forEach(({ listener }) => listener(...args));\n        }\n        if (event === 'abort') {\n            const error = args[0];\n            if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_rejectConnectedPromise, \"f\").call(this, error);\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n            return;\n        }\n        if (event === 'error') {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.final...()\n                // - etc.\n                Promise.reject(error);\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_rejectConnectedPromise, \"f\").call(this, error);\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n        }\n    }\n    _emitFinal() {\n        const finalMessage = this.receivedMessages.at(-1);\n        if (finalMessage) {\n            this._emit('finalMessage', (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_getFinalMessage).call(this));\n        }\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        let abortHandler;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            abortHandler = this.controller.abort.bind(this.controller);\n            signal.addEventListener('abort', abortHandler);\n        }\n        try {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_beginRequest).call(this);\n            this._connected(null);\n            const stream = _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__.Stream.fromReadableStream(readableStream, this.controller);\n            for await (const event of stream) {\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_addStreamEvent).call(this, event);\n            }\n            if (stream.controller.signal?.aborted) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_endRequest).call(this);\n        }\n        finally {\n            if (signal && abortHandler) {\n                signal.removeEventListener('abort', abortHandler);\n            }\n        }\n    }\n    [(_MessageStream_currentMessageSnapshot = new WeakMap(), _MessageStream_connectedPromise = new WeakMap(), _MessageStream_resolveConnectedPromise = new WeakMap(), _MessageStream_rejectConnectedPromise = new WeakMap(), _MessageStream_endPromise = new WeakMap(), _MessageStream_resolveEndPromise = new WeakMap(), _MessageStream_rejectEndPromise = new WeakMap(), _MessageStream_listeners = new WeakMap(), _MessageStream_ended = new WeakMap(), _MessageStream_errored = new WeakMap(), _MessageStream_aborted = new WeakMap(), _MessageStream_catchingPromiseCreated = new WeakMap(), _MessageStream_response = new WeakMap(), _MessageStream_request_id = new WeakMap(), _MessageStream_handleError = new WeakMap(), _MessageStream_instances = new WeakSet(), _MessageStream_getFinalMessage = function _MessageStream_getFinalMessage() {\n        if (this.receivedMessages.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError('stream ended without producing a Message with role=assistant');\n        }\n        return this.receivedMessages.at(-1);\n    }, _MessageStream_getFinalText = function _MessageStream_getFinalText() {\n        if (this.receivedMessages.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError('stream ended without producing a Message with role=assistant');\n        }\n        const textBlocks = this.receivedMessages\n            .at(-1)\n            .content.filter((block) => block.type === 'text')\n            .map((block) => block.text);\n        if (textBlocks.length === 0) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError('stream ended without producing a content block with type=text');\n        }\n        return textBlocks.join(' ');\n    }, _MessageStream_beginRequest = function _MessageStream_beginRequest() {\n        if (this.ended)\n            return;\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_currentMessageSnapshot, undefined, \"f\");\n    }, _MessageStream_addStreamEvent = function _MessageStream_addStreamEvent(event) {\n        if (this.ended)\n            return;\n        const messageSnapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_instances, \"m\", _MessageStream_accumulateMessage).call(this, event);\n        this._emit('streamEvent', event, messageSnapshot);\n        switch (event.type) {\n            case 'content_block_delta': {\n                const content = messageSnapshot.content.at(-1);\n                switch (event.delta.type) {\n                    case 'text_delta': {\n                        if (content.type === 'text') {\n                            this._emit('text', event.delta.text, content.text || '');\n                        }\n                        break;\n                    }\n                    case 'citations_delta': {\n                        if (content.type === 'text') {\n                            this._emit('citation', event.delta.citation, content.citations ?? []);\n                        }\n                        break;\n                    }\n                    case 'input_json_delta': {\n                        if (tracksToolInput(content) && content.input) {\n                            this._emit('inputJson', event.delta.partial_json, content.input);\n                        }\n                        break;\n                    }\n                    case 'thinking_delta': {\n                        if (content.type === 'thinking') {\n                            this._emit('thinking', event.delta.thinking, content.thinking);\n                        }\n                        break;\n                    }\n                    case 'signature_delta': {\n                        if (content.type === 'thinking') {\n                            this._emit('signature', content.signature);\n                        }\n                        break;\n                    }\n                    default:\n                        checkNever(event.delta);\n                }\n                break;\n            }\n            case 'message_stop': {\n                this._addMessageParam(messageSnapshot);\n                this._addMessage(messageSnapshot, true);\n                break;\n            }\n            case 'content_block_stop': {\n                this._emit('contentBlock', messageSnapshot.content.at(-1));\n                break;\n            }\n            case 'message_start': {\n                (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_currentMessageSnapshot, messageSnapshot, \"f\");\n                break;\n            }\n            case 'content_block_start':\n            case 'message_delta':\n                break;\n        }\n    }, _MessageStream_endRequest = function _MessageStream_endRequest() {\n        if (this.ended) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_currentMessageSnapshot, \"f\");\n        if (!snapshot) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`request ended without sending any chunks`);\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _MessageStream_currentMessageSnapshot, undefined, \"f\");\n        return snapshot;\n    }, _MessageStream_accumulateMessage = function _MessageStream_accumulateMessage(event) {\n        let snapshot = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _MessageStream_currentMessageSnapshot, \"f\");\n        if (event.type === 'message_start') {\n            if (snapshot) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`Unexpected event order, got ${event.type} before receiving \"message_stop\"`);\n            }\n            return event.message;\n        }\n        if (!snapshot) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.AnthropicError(`Unexpected event order, got ${event.type} before \"message_start\"`);\n        }\n        switch (event.type) {\n            case 'message_stop':\n                return snapshot;\n            case 'message_delta':\n                snapshot.stop_reason = event.delta.stop_reason;\n                snapshot.stop_sequence = event.delta.stop_sequence;\n                snapshot.usage.output_tokens = event.usage.output_tokens;\n                // Update other usage fields if they exist in the event\n                if (event.usage.input_tokens != null) {\n                    snapshot.usage.input_tokens = event.usage.input_tokens;\n                }\n                if (event.usage.cache_creation_input_tokens != null) {\n                    snapshot.usage.cache_creation_input_tokens = event.usage.cache_creation_input_tokens;\n                }\n                if (event.usage.cache_read_input_tokens != null) {\n                    snapshot.usage.cache_read_input_tokens = event.usage.cache_read_input_tokens;\n                }\n                if (event.usage.server_tool_use != null) {\n                    snapshot.usage.server_tool_use = event.usage.server_tool_use;\n                }\n                return snapshot;\n            case 'content_block_start':\n                snapshot.content.push({ ...event.content_block });\n                return snapshot;\n            case 'content_block_delta': {\n                const snapshotContent = snapshot.content.at(event.index);\n                switch (event.delta.type) {\n                    case 'text_delta': {\n                        if (snapshotContent?.type === 'text') {\n                            snapshot.content[event.index] = {\n                                ...snapshotContent,\n                                text: (snapshotContent.text || '') + event.delta.text,\n                            };\n                        }\n                        break;\n                    }\n                    case 'citations_delta': {\n                        if (snapshotContent?.type === 'text') {\n                            snapshot.content[event.index] = {\n                                ...snapshotContent,\n                                citations: [...(snapshotContent.citations ?? []), event.delta.citation],\n                            };\n                        }\n                        break;\n                    }\n                    case 'input_json_delta': {\n                        if (snapshotContent && tracksToolInput(snapshotContent)) {\n                            // we need to keep track of the raw JSON string as well so that we can\n                            // re-parse it for each delta, for now we just store it as an untyped\n                            // non-enumerable property on the snapshot\n                            let jsonBuf = snapshotContent[JSON_BUF_PROPERTY] || '';\n                            jsonBuf += event.delta.partial_json;\n                            const newContent = { ...snapshotContent };\n                            Object.defineProperty(newContent, JSON_BUF_PROPERTY, {\n                                value: jsonBuf,\n                                enumerable: false,\n                                writable: true,\n                            });\n                            if (jsonBuf) {\n                                newContent.input = (0,_vendor_partial_json_parser_parser_mjs__WEBPACK_IMPORTED_MODULE_4__.partialParse)(jsonBuf);\n                            }\n                            snapshot.content[event.index] = newContent;\n                        }\n                        break;\n                    }\n                    case 'thinking_delta': {\n                        if (snapshotContent?.type === 'thinking') {\n                            snapshot.content[event.index] = {\n                                ...snapshotContent,\n                                thinking: snapshotContent.thinking + event.delta.thinking,\n                            };\n                        }\n                        break;\n                    }\n                    case 'signature_delta': {\n                        if (snapshotContent?.type === 'thinking') {\n                            snapshot.content[event.index] = {\n                                ...snapshotContent,\n                                signature: event.delta.signature,\n                            };\n                        }\n                        break;\n                    }\n                    default:\n                        checkNever(event.delta);\n                }\n                return snapshot;\n            }\n            case 'content_block_stop':\n                return snapshot;\n        }\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on('streamEvent', (event) => {\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            }\n            else {\n                pushQueue.push(event);\n            }\n        });\n        this.on('end', () => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on('abort', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on('error', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async () => {\n                if (!pushQueue.length) {\n                    if (done) {\n                        return { value: undefined, done: true };\n                    }\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n                }\n                const chunk = pushQueue.shift();\n                return { value: chunk, done: false };\n            },\n            return: async () => {\n                this.abort();\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    toReadableStream() {\n        const stream = new _streaming_mjs__WEBPACK_IMPORTED_MODULE_3__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n}\n// used to ensure exhaustive case matching without throwing a runtime error\nfunction checkNever(x) { }\n//# sourceMappingURL=MessageStream.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/lib/tools/BetaToolRunner.mjs":
/*!*************************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/lib/tools/BetaToolRunner.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BetaToolRunner: () => (/* binding */ BetaToolRunner)\n/* harmony export */ });\n/* harmony import */ var _internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../internal/tslib.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/tslib.mjs\");\n/* harmony import */ var _core_error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/error.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\nvar _BetaToolRunner_instances, _BetaToolRunner_consumed, _BetaToolRunner_mutated, _BetaToolRunner_state, _BetaToolRunner_options, _BetaToolRunner_message, _BetaToolRunner_toolResponse, _BetaToolRunner_completion, _BetaToolRunner_iterationCount, _BetaToolRunner_generateToolResponse;\n\n\n\n/**\n * Just Promise.withResolvers(), which is not available in all environments.\n */\nfunction promiseWithResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n    return { promise, resolve: resolve, reject: reject };\n}\n/**\n * A ToolRunner handles the automatic conversation loop between the assistant and tools.\n *\n * A ToolRunner is an async iterable that yields either BetaMessage or BetaMessageStream objects\n * depending on the streaming configuration.\n */\nclass BetaToolRunner {\n    constructor(client, params, options) {\n        _BetaToolRunner_instances.add(this);\n        this.client = client;\n        /** Whether the async iterator has been consumed */\n        _BetaToolRunner_consumed.set(this, false);\n        /** Whether parameters have been mutated since the last API call */\n        _BetaToolRunner_mutated.set(this, false);\n        /** Current state containing the request parameters */\n        _BetaToolRunner_state.set(this, void 0);\n        _BetaToolRunner_options.set(this, void 0);\n        /** Promise for the last message received from the assistant */\n        _BetaToolRunner_message.set(this, void 0);\n        /** Cached tool response to avoid redundant executions */\n        _BetaToolRunner_toolResponse.set(this, void 0);\n        /** Promise resolvers for waiting on completion */\n        _BetaToolRunner_completion.set(this, void 0);\n        /** Number of iterations (API requests) made so far */\n        _BetaToolRunner_iterationCount.set(this, 0);\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_state, {\n            params: {\n                // You can't clone the entire params since there are functions as handlers.\n                // You also don't really need to clone params.messages, but it probably will prevent a foot gun\n                // somewhere.\n                ...params,\n                messages: structuredClone(params.messages),\n            },\n        }, \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_options, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([{ 'x-stainless-helper': 'BetaToolRunner' }, options?.headers]),\n        }, \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_completion, promiseWithResolvers(), \"f\");\n    }\n    async *[(_BetaToolRunner_consumed = new WeakMap(), _BetaToolRunner_mutated = new WeakMap(), _BetaToolRunner_state = new WeakMap(), _BetaToolRunner_options = new WeakMap(), _BetaToolRunner_message = new WeakMap(), _BetaToolRunner_toolResponse = new WeakMap(), _BetaToolRunner_completion = new WeakMap(), _BetaToolRunner_iterationCount = new WeakMap(), _BetaToolRunner_instances = new WeakSet(), Symbol.asyncIterator)]() {\n        var _a;\n        if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_consumed, \"f\")) {\n            throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_1__.AnthropicError('Cannot iterate over a consumed stream');\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_consumed, true, \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_mutated, true, \"f\");\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_toolResponse, undefined, \"f\");\n        try {\n            while (true) {\n                let stream;\n                try {\n                    if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_state, \"f\").params.max_iterations &&\n                        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_iterationCount, \"f\") >= (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_state, \"f\").params.max_iterations) {\n                        break;\n                    }\n                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_mutated, false, \"f\");\n                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_message, undefined, \"f\");\n                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_toolResponse, undefined, \"f\");\n                    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_iterationCount, (_a = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_iterationCount, \"f\"), _a++, _a), \"f\");\n                    const { max_iterations, ...params } = (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_state, \"f\").params;\n                    if (params.stream) {\n                        stream = this.client.beta.messages.stream({ ...params }, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_options, \"f\"));\n                        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_message, stream.finalMessage(), \"f\");\n                        yield stream;\n                    }\n                    else {\n                        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_message, this.client.beta.messages.create({ ...params, stream: false }, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_options, \"f\")), \"f\");\n                        yield (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_message, \"f\");\n                    }\n                    if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_mutated, \"f\")) {\n                        const { role, content } = await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_message, \"f\");\n                        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_state, \"f\").params.messages.push({ role, content });\n                    }\n                    const toolMessage = await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_instances, \"m\", _BetaToolRunner_generateToolResponse).call(this, (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_state, \"f\").params.messages.at(-1));\n                    if (toolMessage) {\n                        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_state, \"f\").params.messages.push(toolMessage);\n                    }\n                    if (!toolMessage && !(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_mutated, \"f\")) {\n                        break;\n                    }\n                }\n                finally {\n                    if (stream) {\n                        stream.abort();\n                    }\n                }\n            }\n            if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_message, \"f\")) {\n                throw new _core_error_mjs__WEBPACK_IMPORTED_MODULE_1__.AnthropicError('ToolRunner concluded without a message from the server');\n            }\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_completion, \"f\").resolve(await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_message, \"f\"));\n        }\n        catch (error) {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_consumed, false, \"f\");\n            // Silence unhandled promise errors\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_completion, \"f\").promise.catch(() => { });\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_completion, \"f\").reject(error);\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_completion, promiseWithResolvers(), \"f\");\n            throw error;\n        }\n    }\n    setMessagesParams(paramsOrMutator) {\n        if (typeof paramsOrMutator === 'function') {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_state, \"f\").params = paramsOrMutator((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_state, \"f\").params);\n        }\n        else {\n            (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_state, \"f\").params = paramsOrMutator;\n        }\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_mutated, true, \"f\");\n        // Invalidate cached tool response since parameters changed\n        (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_toolResponse, undefined, \"f\");\n    }\n    /**\n     * Get the tool response for the last message from the assistant.\n     * Avoids redundant tool executions by caching results.\n     *\n     * @returns A promise that resolves to a BetaMessageParam containing tool results, or null if no tools need to be executed\n     *\n     * @example\n     * const toolResponse = await runner.generateToolResponse();\n     * if (toolResponse) {\n     *   console.log('Tool results:', toolResponse.content);\n     * }\n     */\n    async generateToolResponse() {\n        const message = (await (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_message, \"f\")) ?? this.params.messages.at(-1);\n        if (!message) {\n            return null;\n        }\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_instances, \"m\", _BetaToolRunner_generateToolResponse).call(this, message);\n    }\n    /**\n     * Wait for the async iterator to complete. This works even if the async iterator hasn't yet started, and\n     * will wait for an instance to start and go to completion.\n     *\n     * @returns A promise that resolves to the final BetaMessage when the iterator completes\n     *\n     * @example\n     * // Start consuming the iterator\n     * for await (const message of runner) {\n     *   console.log('Message:', message.content);\n     * }\n     *\n     * // Meanwhile, wait for completion from another part of the code\n     * const finalMessage = await runner.done();\n     * console.log('Final response:', finalMessage.content);\n     */\n    done() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_completion, \"f\").promise;\n    }\n    /**\n     * Returns a promise indicating that the stream is done. Unlike .done(), this will eagerly read the stream:\n     * * If the iterator has not been consumed, consume the entire iterator and return the final message from the\n     * assistant.\n     * * If the iterator has been consumed, waits for it to complete and returns the final message.\n     *\n     * @returns A promise that resolves to the final BetaMessage from the conversation\n     * @throws {AnthropicError} If no messages were processed during the conversation\n     *\n     * @example\n     * const finalMessage = await runner.runUntilDone();\n     * console.log('Final response:', finalMessage.content);\n     */\n    async runUntilDone() {\n        // If not yet consumed, start consuming and wait for completion\n        if (!(0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_consumed, \"f\")) {\n            for await (const _ of this) {\n                // Iterator naturally populates this.#message\n            }\n        }\n        // If consumed but not completed, wait for completion\n        return this.done();\n    }\n    /**\n     * Get the current parameters being used by the ToolRunner.\n     *\n     * @returns A readonly view of the current ToolRunnerParams\n     *\n     * @example\n     * const currentParams = runner.params;\n     * console.log('Current model:', currentParams.model);\n     * console.log('Message count:', currentParams.messages.length);\n     */\n    get params() {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_state, \"f\").params;\n    }\n    /**\n     * Add one or more messages to the conversation history.\n     *\n     * @param messages - One or more BetaMessageParam objects to add to the conversation\n     *\n     * @example\n     * runner.pushMessages(\n     *   { role: 'user', content: 'Also, what about the weather in NYC?' }\n     * );\n     *\n     * @example\n     * // Adding multiple messages\n     * runner.pushMessages(\n     *   { role: 'user', content: 'What about NYC?' },\n     *   { role: 'user', content: 'And Boston?' }\n     * );\n     */\n    pushMessages(...messages) {\n        this.setMessagesParams((params) => ({\n            ...params,\n            messages: [...params.messages, ...messages],\n        }));\n    }\n    /**\n     * Makes the ToolRunner directly awaitable, equivalent to calling .runUntilDone()\n     * This allows using `await runner` instead of `await runner.runUntilDone()`\n     */\n    then(onfulfilled, onrejected) {\n        return this.runUntilDone().then(onfulfilled, onrejected);\n    }\n}\n_BetaToolRunner_generateToolResponse = async function _BetaToolRunner_generateToolResponse(lastMessage) {\n    if ((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_toolResponse, \"f\") !== undefined) {\n        return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_toolResponse, \"f\");\n    }\n    (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldSet)(this, _BetaToolRunner_toolResponse, generateToolResponse((0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_state, \"f\").params, lastMessage), \"f\");\n    return (0,_internal_tslib_mjs__WEBPACK_IMPORTED_MODULE_0__.__classPrivateFieldGet)(this, _BetaToolRunner_toolResponse, \"f\");\n};\nasync function generateToolResponse(params, lastMessage = params.messages.at(-1)) {\n    // Only process if the last message is from the assistant and has tool use blocks\n    if (!lastMessage ||\n        lastMessage.role !== 'assistant' ||\n        !lastMessage.content ||\n        typeof lastMessage.content === 'string') {\n        return null;\n    }\n    const toolUseBlocks = lastMessage.content.filter((content) => content.type === 'tool_use');\n    if (toolUseBlocks.length === 0) {\n        return null;\n    }\n    const toolResults = await Promise.all(toolUseBlocks.map(async (toolUse) => {\n        const tool = params.tools.find((t) => t.name === toolUse.name);\n        if (!tool || !('run' in tool)) {\n            return {\n                type: 'tool_result',\n                tool_use_id: toolUse.id,\n                content: `Error: Tool '${toolUse.name}' not found`,\n                is_error: true,\n            };\n        }\n        try {\n            let input = toolUse.input;\n            if ('parse' in tool && tool.parse) {\n                input = tool.parse(input);\n            }\n            const result = await tool.run(input);\n            return {\n                type: 'tool_result',\n                tool_use_id: toolUse.id,\n                content: result,\n            };\n        }\n        catch (error) {\n            return {\n                type: 'tool_result',\n                tool_use_id: toolUse.id,\n                content: `Error: ${error instanceof Error ? error.message : String(error)}`,\n                is_error: true,\n            };\n        }\n    }));\n    return {\n        role: 'user',\n        content: toolResults,\n    };\n}\n//# sourceMappingURL=BetaToolRunner.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/lib/tools/BetaToolRunner.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs":
/*!********************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Beta: () => (/* binding */ Beta)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./files.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/files.mjs\");\n/* harmony import */ var _models_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/models.mjs\");\n/* harmony import */ var _messages_messages_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./messages/messages.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nclass Beta extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor() {\n        super(...arguments);\n        this.models = new _models_mjs__WEBPACK_IMPORTED_MODULE_2__.Models(this._client);\n        this.messages = new _messages_messages_mjs__WEBPACK_IMPORTED_MODULE_3__.Messages(this._client);\n        this.files = new _files_mjs__WEBPACK_IMPORTED_MODULE_1__.Files(this._client);\n    }\n}\nBeta.Models = _models_mjs__WEBPACK_IMPORTED_MODULE_2__.Models;\nBeta.Messages = _messages_messages_mjs__WEBPACK_IMPORTED_MODULE_3__.Messages;\nBeta.Files = _files_mjs__WEBPACK_IMPORTED_MODULE_1__.Files;\n//# sourceMappingURL=beta.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9iZXRhL2JldGEubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDc0Q7QUFDZDtBQUNIO0FBQ0s7QUFDSjtBQUNpQjtBQUNIO0FBQzdDLG1CQUFtQiwyREFBVztBQUNyQztBQUNBO0FBQ0EsMEJBQTBCLCtDQUFnQjtBQUMxQyw0QkFBNEIsNERBQW9CO0FBQ2hELHlCQUF5Qiw2Q0FBYztBQUN2QztBQUNBO0FBQ0EsY0FBYywrQ0FBTTtBQUNwQixnQkFBZ0IsNERBQVE7QUFDeEIsYUFBYSw2Q0FBSztBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9iZXRhL2JldGEubWpzPzI2OTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSBcIi4uLy4uL2NvcmUvcmVzb3VyY2UubWpzXCI7XG5pbXBvcnQgKiBhcyBGaWxlc0FQSSBmcm9tIFwiLi9maWxlcy5tanNcIjtcbmltcG9ydCB7IEZpbGVzLCB9IGZyb20gXCIuL2ZpbGVzLm1qc1wiO1xuaW1wb3J0ICogYXMgTW9kZWxzQVBJIGZyb20gXCIuL21vZGVscy5tanNcIjtcbmltcG9ydCB7IE1vZGVscyB9IGZyb20gXCIuL21vZGVscy5tanNcIjtcbmltcG9ydCAqIGFzIE1lc3NhZ2VzQVBJIGZyb20gXCIuL21lc3NhZ2VzL21lc3NhZ2VzLm1qc1wiO1xuaW1wb3J0IHsgTWVzc2FnZXMsIH0gZnJvbSBcIi4vbWVzc2FnZXMvbWVzc2FnZXMubWpzXCI7XG5leHBvcnQgY2xhc3MgQmV0YSBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5tb2RlbHMgPSBuZXcgTW9kZWxzQVBJLk1vZGVscyh0aGlzLl9jbGllbnQpO1xuICAgICAgICB0aGlzLm1lc3NhZ2VzID0gbmV3IE1lc3NhZ2VzQVBJLk1lc3NhZ2VzKHRoaXMuX2NsaWVudCk7XG4gICAgICAgIHRoaXMuZmlsZXMgPSBuZXcgRmlsZXNBUEkuRmlsZXModGhpcy5fY2xpZW50KTtcbiAgICB9XG59XG5CZXRhLk1vZGVscyA9IE1vZGVscztcbkJldGEuTWVzc2FnZXMgPSBNZXNzYWdlcztcbkJldGEuRmlsZXMgPSBGaWxlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJldGEubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/files.mjs":
/*!*********************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/resources/beta/files.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/uploads.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/uploads.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Files extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * List Files\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fileMetadata of client.beta.files.list()) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params = {}, options) {\n        const { betas, ...query } = params ?? {};\n        return this._client.getAPIList('/v1/files', (_core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page), {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { 'anthropic-beta': [...(betas ?? []), 'files-api-2025-04-14'].toString() },\n                options?.headers,\n            ]),\n        });\n    }\n    /**\n     * Delete File\n     *\n     * @example\n     * ```ts\n     * const deletedFile = await client.beta.files.delete(\n     *   'file_id',\n     * );\n     * ```\n     */\n    delete(fileID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.delete((0,_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path) `/v1/files/${fileID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { 'anthropic-beta': [...(betas ?? []), 'files-api-2025-04-14'].toString() },\n                options?.headers,\n            ]),\n        });\n    }\n    /**\n     * Download File\n     *\n     * @example\n     * ```ts\n     * const response = await client.beta.files.download(\n     *   'file_id',\n     * );\n     *\n     * const content = await response.blob();\n     * console.log(content);\n     * ```\n     */\n    download(fileID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.get((0,_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path) `/v1/files/${fileID}/content`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    'anthropic-beta': [...(betas ?? []), 'files-api-2025-04-14'].toString(),\n                    Accept: 'application/binary',\n                },\n                options?.headers,\n            ]),\n            __binaryResponse: true,\n        });\n    }\n    /**\n     * Get File Metadata\n     *\n     * @example\n     * ```ts\n     * const fileMetadata =\n     *   await client.beta.files.retrieveMetadata('file_id');\n     * ```\n     */\n    retrieveMetadata(fileID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.get((0,_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_4__.path) `/v1/files/${fileID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { 'anthropic-beta': [...(betas ?? []), 'files-api-2025-04-14'].toString() },\n                options?.headers,\n            ]),\n        });\n    }\n    /**\n     * Upload File\n     *\n     * @example\n     * ```ts\n     * const fileMetadata = await client.beta.files.upload({\n     *   file: fs.createReadStream('path/to/file'),\n     * });\n     * ```\n     */\n    upload(params, options) {\n        const { betas, ...body } = params;\n        return this._client.post('/v1/files', (0,_internal_uploads_mjs__WEBPACK_IMPORTED_MODULE_3__.multipartFormRequestOptions)({\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { 'anthropic-beta': [...(betas ?? []), 'files-api-2025-04-14'].toString() },\n                options?.headers,\n            ]),\n        }, this._client));\n    }\n}\n//# sourceMappingURL=files.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9iZXRhL2ZpbGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNzRDtBQUNMO0FBQ1M7QUFDZTtBQUNwQjtBQUM5QyxvQkFBb0IsMkRBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixnQkFBZ0Isa0JBQWtCO0FBQ2xDLHFEQUFxRCxzREFBSTtBQUN6RDtBQUNBO0FBQ0EscUJBQXFCLG1FQUFZO0FBQ2pDLGtCQUFrQix5RUFBeUU7QUFDM0Y7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCLGdCQUFnQixRQUFRO0FBQ3hCLG1DQUFtQyw4REFBSSxjQUFjLE9BQU87QUFDNUQ7QUFDQSxxQkFBcUIsbUVBQVk7QUFDakMsa0JBQWtCLHlFQUF5RTtBQUMzRjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsZ0JBQWdCLFFBQVE7QUFDeEIsZ0NBQWdDLDhEQUFJLGNBQWMsT0FBTztBQUN6RDtBQUNBLHFCQUFxQixtRUFBWTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLGdCQUFnQixRQUFRO0FBQ3hCLGdDQUFnQyw4REFBSSxjQUFjLE9BQU87QUFDekQ7QUFDQSxxQkFBcUIsbUVBQVk7QUFDakMsa0JBQWtCLHlFQUF5RTtBQUMzRjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQyw4Q0FBOEMsa0ZBQTJCO0FBQ3pFO0FBQ0E7QUFDQSxxQkFBcUIsbUVBQVk7QUFDakMsa0JBQWtCLHlFQUF5RTtBQUMzRjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9iZXRhL2ZpbGVzLm1qcz9jOTI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCIuLi8uLi9jb3JlL3BhZ2luYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBidWlsZEhlYWRlcnMgfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvaGVhZGVycy5tanNcIjtcbmltcG9ydCB7IG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi9pbnRlcm5hbC91cGxvYWRzLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEZpbGVzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIExpc3QgRmlsZXNcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiAvLyBBdXRvbWF0aWNhbGx5IGZldGNoZXMgbW9yZSBwYWdlcyBhcyBuZWVkZWQuXG4gICAgICogZm9yIGF3YWl0IChjb25zdCBmaWxlTWV0YWRhdGEgb2YgY2xpZW50LmJldGEuZmlsZXMubGlzdCgpKSB7XG4gICAgICogICAvLyAuLi5cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgbGlzdChwYXJhbXMgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJldGFzLCAuLi5xdWVyeSB9ID0gcGFyYW1zID8/IHt9O1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy92MS9maWxlcycsIChQYWdlKSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFtcbiAgICAgICAgICAgICAgICB7ICdhbnRocm9waWMtYmV0YSc6IFsuLi4oYmV0YXMgPz8gW10pLCAnZmlsZXMtYXBpLTIwMjUtMDQtMTQnXS50b1N0cmluZygpIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucz8uaGVhZGVycyxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIEZpbGVcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBkZWxldGVkRmlsZSA9IGF3YWl0IGNsaWVudC5iZXRhLmZpbGVzLmRlbGV0ZShcbiAgICAgKiAgICdmaWxlX2lkJyxcbiAgICAgKiApO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGRlbGV0ZShmaWxlSUQsIHBhcmFtcyA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYmV0YXMgfSA9IHBhcmFtcyA/PyB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUocGF0aCBgL3YxL2ZpbGVzLyR7ZmlsZUlEfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW1xuICAgICAgICAgICAgICAgIHsgJ2FudGhyb3BpYy1iZXRhJzogWy4uLihiZXRhcyA/PyBbXSksICdmaWxlcy1hcGktMjAyNS0wNC0xNCddLnRvU3RyaW5nKCkgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEb3dubG9hZCBGaWxlXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuYmV0YS5maWxlcy5kb3dubG9hZChcbiAgICAgKiAgICdmaWxlX2lkJyxcbiAgICAgKiApO1xuICAgICAqXG4gICAgICogY29uc3QgY29udGVudCA9IGF3YWl0IHJlc3BvbnNlLmJsb2IoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhjb250ZW50KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBkb3dubG9hZChmaWxlSUQsIHBhcmFtcyA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYmV0YXMgfSA9IHBhcmFtcyA/PyB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQocGF0aCBgL3YxL2ZpbGVzLyR7ZmlsZUlEfS9jb250ZW50YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAnYW50aHJvcGljLWJldGEnOiBbLi4uKGJldGFzID8/IFtdKSwgJ2ZpbGVzLWFwaS0yMDI1LTA0LTE0J10udG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vYmluYXJ5JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF9fYmluYXJ5UmVzcG9uc2U6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgRmlsZSBNZXRhZGF0YVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IGZpbGVNZXRhZGF0YSA9XG4gICAgICogICBhd2FpdCBjbGllbnQuYmV0YS5maWxlcy5yZXRyaWV2ZU1ldGFkYXRhKCdmaWxlX2lkJyk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcmV0cmlldmVNZXRhZGF0YShmaWxlSUQsIHBhcmFtcyA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYmV0YXMgfSA9IHBhcmFtcyA/PyB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQocGF0aCBgL3YxL2ZpbGVzLyR7ZmlsZUlEfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW1xuICAgICAgICAgICAgICAgIHsgJ2FudGhyb3BpYy1iZXRhJzogWy4uLihiZXRhcyA/PyBbXSksICdmaWxlcy1hcGktMjAyNS0wNC0xNCddLnRvU3RyaW5nKCkgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGxvYWQgRmlsZVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IGZpbGVNZXRhZGF0YSA9IGF3YWl0IGNsaWVudC5iZXRhLmZpbGVzLnVwbG9hZCh7XG4gICAgICogICBmaWxlOiBmcy5jcmVhdGVSZWFkU3RyZWFtKCdwYXRoL3RvL2ZpbGUnKSxcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB1cGxvYWQocGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYmV0YXMsIC4uLmJvZHkgfSA9IHBhcmFtcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdjEvZmlsZXMnLCBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoe1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW1xuICAgICAgICAgICAgICAgIHsgJ2FudGhyb3BpYy1iZXRhJzogWy4uLihiZXRhcyA/PyBbXSksICdmaWxlcy1hcGktMjAyNS0wNC0xNCddLnRvU3RyaW5nKCkgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIH0sIHRoaXMuX2NsaWVudCkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGVzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/files.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs":
/*!********************************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batches: () => (/* binding */ Batches)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/pagination.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../internal/headers.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _internal_decoders_jsonl_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../internal/decoders/jsonl.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/error.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../internal/utils/path.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\nclass Batches extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Send a batch of Message creation requests.\n     *\n     * The Message Batches API can be used to process multiple Messages API requests at\n     * once. Once a Message Batch is created, it begins processing immediately. Batches\n     * can take up to 24 hours to complete.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const betaMessageBatch =\n     *   await client.beta.messages.batches.create({\n     *     requests: [\n     *       {\n     *         custom_id: 'my-custom-id-1',\n     *         params: {\n     *           max_tokens: 1024,\n     *           messages: [\n     *             { content: 'Hello, world', role: 'user' },\n     *           ],\n     *           model: 'claude-sonnet-4-5-20250929',\n     *         },\n     *       },\n     *     ],\n     *   });\n     * ```\n     */\n    create(params, options) {\n        const { betas, ...body } = params;\n        return this._client.post('/v1/messages/batches?beta=true', {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { 'anthropic-beta': [...(betas ?? []), 'message-batches-2024-09-24'].toString() },\n                options?.headers,\n            ]),\n        });\n    }\n    /**\n     * This endpoint is idempotent and can be used to poll for Message Batch\n     * completion. To access the results of a Message Batch, make a request to the\n     * `results_url` field in the response.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const betaMessageBatch =\n     *   await client.beta.messages.batches.retrieve(\n     *     'message_batch_id',\n     *   );\n     * ```\n     */\n    retrieve(messageBatchID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.get((0,_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path) `/v1/messages/batches/${messageBatchID}?beta=true`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { 'anthropic-beta': [...(betas ?? []), 'message-batches-2024-09-24'].toString() },\n                options?.headers,\n            ]),\n        });\n    }\n    /**\n     * List all Message Batches within a Workspace. Most recently created batches are\n     * returned first.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const betaMessageBatch of client.beta.messages.batches.list()) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params = {}, options) {\n        const { betas, ...query } = params ?? {};\n        return this._client.getAPIList('/v1/messages/batches?beta=true', (_core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page), {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { 'anthropic-beta': [...(betas ?? []), 'message-batches-2024-09-24'].toString() },\n                options?.headers,\n            ]),\n        });\n    }\n    /**\n     * Delete a Message Batch.\n     *\n     * Message Batches can only be deleted once they've finished processing. If you'd\n     * like to delete an in-progress batch, you must first cancel it.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const betaDeletedMessageBatch =\n     *   await client.beta.messages.batches.delete(\n     *     'message_batch_id',\n     *   );\n     * ```\n     */\n    delete(messageBatchID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.delete((0,_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path) `/v1/messages/batches/${messageBatchID}?beta=true`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { 'anthropic-beta': [...(betas ?? []), 'message-batches-2024-09-24'].toString() },\n                options?.headers,\n            ]),\n        });\n    }\n    /**\n     * Batches may be canceled any time before processing ends. Once cancellation is\n     * initiated, the batch enters a `canceling` state, at which time the system may\n     * complete any in-progress, non-interruptible requests before finalizing\n     * cancellation.\n     *\n     * The number of canceled requests is specified in `request_counts`. To determine\n     * which requests were canceled, check the individual results within the batch.\n     * Note that cancellation may not result in any canceled requests if they were\n     * non-interruptible.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const betaMessageBatch =\n     *   await client.beta.messages.batches.cancel(\n     *     'message_batch_id',\n     *   );\n     * ```\n     */\n    cancel(messageBatchID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.post((0,_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path) `/v1/messages/batches/${messageBatchID}/cancel?beta=true`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { 'anthropic-beta': [...(betas ?? []), 'message-batches-2024-09-24'].toString() },\n                options?.headers,\n            ]),\n        });\n    }\n    /**\n     * Streams the results of a Message Batch as a `.jsonl` file.\n     *\n     * Each line in the file is a JSON object containing the result of a single request\n     * in the Message Batch. Results are not guaranteed to be in the same order as\n     * requests. Use the `custom_id` field to match results to requests.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const betaMessageBatchIndividualResponse =\n     *   await client.beta.messages.batches.results(\n     *     'message_batch_id',\n     *   );\n     * ```\n     */\n    async results(messageBatchID, params = {}, options) {\n        const batch = await this.retrieve(messageBatchID);\n        if (!batch.results_url) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_4__.AnthropicError(`No batch \\`results_url\\`; Has it finished processing? ${batch.processing_status} - ${batch.id}`);\n        }\n        const { betas } = params ?? {};\n        return this._client\n            .get(batch.results_url, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                {\n                    'anthropic-beta': [...(betas ?? []), 'message-batches-2024-09-24'].toString(),\n                    Accept: 'application/binary',\n                },\n                options?.headers,\n            ]),\n            stream: true,\n            __binaryResponse: true,\n        })\n            ._thenUnwrap((_, props) => _internal_decoders_jsonl_mjs__WEBPACK_IMPORTED_MODULE_3__.JSONLDecoder.fromResponse(props.response, props.controller));\n    }\n}\n//# sourceMappingURL=batches.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs":
/*!*********************************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BetaToolRunner: () => (/* reexport safe */ _lib_tools_BetaToolRunner_mjs__WEBPACK_IMPORTED_MODULE_5__.BetaToolRunner),\n/* harmony export */   Messages: () => (/* binding */ Messages)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../core/resource.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _batches_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./batches.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/messages/batches.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../internal/headers.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _lib_BetaMessageStream_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/BetaMessageStream.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/lib/BetaMessageStream.mjs\");\n/* harmony import */ var _internal_constants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../internal/constants.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/constants.mjs\");\n/* harmony import */ var _lib_tools_BetaToolRunner_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../lib/tools/BetaToolRunner.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/lib/tools/BetaToolRunner.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\n\nconst DEPRECATED_MODELS = {\n    'claude-1.3': 'November 6th, 2024',\n    'claude-1.3-100k': 'November 6th, 2024',\n    'claude-instant-1.1': 'November 6th, 2024',\n    'claude-instant-1.1-100k': 'November 6th, 2024',\n    'claude-instant-1.2': 'November 6th, 2024',\n    'claude-3-sonnet-20240229': 'July 21st, 2025',\n    'claude-3-opus-20240229': 'January 5th, 2026',\n    'claude-2.1': 'July 21st, 2025',\n    'claude-2.0': 'July 21st, 2025',\n    'claude-3-5-sonnet-20241022': 'October 22, 2025',\n    'claude-3-5-sonnet-20240620': 'October 22, 2025',\n};\nclass Messages extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor() {\n        super(...arguments);\n        this.batches = new _batches_mjs__WEBPACK_IMPORTED_MODULE_1__.Batches(this._client);\n    }\n    create(params, options) {\n        const { betas, ...body } = params;\n        if (body.model in DEPRECATED_MODELS) {\n            console.warn(`The model '${body.model}' is deprecated and will reach end-of-life on ${DEPRECATED_MODELS[body.model]}\\nPlease migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.`);\n        }\n        let timeout = this._client._options.timeout;\n        if (!body.stream && timeout == null) {\n            const maxNonstreamingTokens = _internal_constants_mjs__WEBPACK_IMPORTED_MODULE_4__.MODEL_NONSTREAMING_TOKENS[body.model] ?? undefined;\n            timeout = this._client.calculateNonstreamingTimeout(body.max_tokens, maxNonstreamingTokens);\n        }\n        return this._client.post('/v1/messages?beta=true', {\n            body,\n            timeout: timeout ?? 600000,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { ...(betas?.toString() != null ? { 'anthropic-beta': betas?.toString() } : undefined) },\n                options?.headers,\n            ]),\n            stream: params.stream ?? false,\n        });\n    }\n    /**\n     * Create a Message stream\n     */\n    stream(body, options) {\n        return _lib_BetaMessageStream_mjs__WEBPACK_IMPORTED_MODULE_3__.BetaMessageStream.createMessage(this, body, options);\n    }\n    /**\n     * Count the number of tokens in a Message.\n     *\n     * The Token Count API can be used to count the number of tokens in a Message,\n     * including tools, images, and documents, without creating it.\n     *\n     * Learn more about token counting in our\n     * [user guide](/en/docs/build-with-claude/token-counting)\n     *\n     * @example\n     * ```ts\n     * const betaMessageTokensCount =\n     *   await client.beta.messages.countTokens({\n     *     messages: [{ content: 'string', role: 'user' }],\n     *     model: 'claude-3-7-sonnet-latest',\n     *   });\n     * ```\n     */\n    countTokens(params, options) {\n        const { betas, ...body } = params;\n        return this._client.post('/v1/messages/count_tokens?beta=true', {\n            body,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { 'anthropic-beta': [...(betas ?? []), 'token-counting-2024-11-01'].toString() },\n                options?.headers,\n            ]),\n        });\n    }\n    toolRunner(body, options) {\n        return new _lib_tools_BetaToolRunner_mjs__WEBPACK_IMPORTED_MODULE_5__.BetaToolRunner(this._client, body, options);\n    }\n}\n\nMessages.Batches = _batches_mjs__WEBPACK_IMPORTED_MODULE_1__.Batches;\nMessages.BetaToolRunner = _lib_tools_BetaToolRunner_mjs__WEBPACK_IMPORTED_MODULE_5__.BetaToolRunner;\n//# sourceMappingURL=messages.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9iZXRhL21lc3NhZ2VzL21lc3NhZ2VzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ3lEO0FBQ2I7QUFDSDtBQUNvQjtBQUNVO0FBQ0s7QUFDSjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHVCQUF1QiwyREFBVztBQUN6QztBQUNBO0FBQ0EsMkJBQTJCLGlEQUFrQjtBQUM3QztBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBLHVDQUF1QyxXQUFXLGdEQUFnRCw4QkFBOEI7QUFDaEk7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDhFQUF5QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsbUVBQVk7QUFDakMsa0JBQWtCLGtDQUFrQyxzQ0FBc0MsY0FBYztBQUN4RztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUseUVBQWlCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUNBQWlDO0FBQ3pEO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpQkFBaUI7QUFDakM7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1FQUFZO0FBQ2pDLGtCQUFrQiw4RUFBOEU7QUFDaEc7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsbUJBQW1CLHlFQUFjO0FBQ2pDO0FBQ0E7QUFDdUU7QUFDdkUsbUJBQW1CLGlEQUFPO0FBQzFCLDBCQUEwQix5RUFBYztBQUN4QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9iZXRhL21lc3NhZ2VzL21lc3NhZ2VzLm1qcz9hYjJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0ICogYXMgQmF0Y2hlc0FQSSBmcm9tIFwiLi9iYXRjaGVzLm1qc1wiO1xuaW1wb3J0IHsgQmF0Y2hlcywgfSBmcm9tIFwiLi9iYXRjaGVzLm1qc1wiO1xuaW1wb3J0IHsgYnVpbGRIZWFkZXJzIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVybmFsL2hlYWRlcnMubWpzXCI7XG5pbXBvcnQgeyBCZXRhTWVzc2FnZVN0cmVhbSB9IGZyb20gXCIuLi8uLi8uLi9saWIvQmV0YU1lc3NhZ2VTdHJlYW0ubWpzXCI7XG5pbXBvcnQgeyBNT0RFTF9OT05TVFJFQU1JTkdfVE9LRU5TIH0gZnJvbSBcIi4uLy4uLy4uL2ludGVybmFsL2NvbnN0YW50cy5tanNcIjtcbmltcG9ydCB7IEJldGFUb29sUnVubmVyLCB9IGZyb20gXCIuLi8uLi8uLi9saWIvdG9vbHMvQmV0YVRvb2xSdW5uZXIubWpzXCI7XG5jb25zdCBERVBSRUNBVEVEX01PREVMUyA9IHtcbiAgICAnY2xhdWRlLTEuMyc6ICdOb3ZlbWJlciA2dGgsIDIwMjQnLFxuICAgICdjbGF1ZGUtMS4zLTEwMGsnOiAnTm92ZW1iZXIgNnRoLCAyMDI0JyxcbiAgICAnY2xhdWRlLWluc3RhbnQtMS4xJzogJ05vdmVtYmVyIDZ0aCwgMjAyNCcsXG4gICAgJ2NsYXVkZS1pbnN0YW50LTEuMS0xMDBrJzogJ05vdmVtYmVyIDZ0aCwgMjAyNCcsXG4gICAgJ2NsYXVkZS1pbnN0YW50LTEuMic6ICdOb3ZlbWJlciA2dGgsIDIwMjQnLFxuICAgICdjbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjknOiAnSnVseSAyMXN0LCAyMDI1JyxcbiAgICAnY2xhdWRlLTMtb3B1cy0yMDI0MDIyOSc6ICdKYW51YXJ5IDV0aCwgMjAyNicsXG4gICAgJ2NsYXVkZS0yLjEnOiAnSnVseSAyMXN0LCAyMDI1JyxcbiAgICAnY2xhdWRlLTIuMCc6ICdKdWx5IDIxc3QsIDIwMjUnLFxuICAgICdjbGF1ZGUtMy01LXNvbm5ldC0yMDI0MTAyMic6ICdPY3RvYmVyIDIyLCAyMDI1JyxcbiAgICAnY2xhdWRlLTMtNS1zb25uZXQtMjAyNDA2MjAnOiAnT2N0b2JlciAyMiwgMjAyNScsXG59O1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmJhdGNoZXMgPSBuZXcgQmF0Y2hlc0FQSS5CYXRjaGVzKHRoaXMuX2NsaWVudCk7XG4gICAgfVxuICAgIGNyZWF0ZShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBiZXRhcywgLi4uYm9keSB9ID0gcGFyYW1zO1xuICAgICAgICBpZiAoYm9keS5tb2RlbCBpbiBERVBSRUNBVEVEX01PREVMUykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBUaGUgbW9kZWwgJyR7Ym9keS5tb2RlbH0nIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgcmVhY2ggZW5kLW9mLWxpZmUgb24gJHtERVBSRUNBVEVEX01PREVMU1tib2R5Lm1vZGVsXX1cXG5QbGVhc2UgbWlncmF0ZSB0byBhIG5ld2VyIG1vZGVsLiBWaXNpdCBodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9lbi9kb2NzL3Jlc291cmNlcy9tb2RlbC1kZXByZWNhdGlvbnMgZm9yIG1vcmUgaW5mb3JtYXRpb24uYCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRpbWVvdXQgPSB0aGlzLl9jbGllbnQuX29wdGlvbnMudGltZW91dDtcbiAgICAgICAgaWYgKCFib2R5LnN0cmVhbSAmJiB0aW1lb3V0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IG1heE5vbnN0cmVhbWluZ1Rva2VucyA9IE1PREVMX05PTlNUUkVBTUlOR19UT0tFTlNbYm9keS5tb2RlbF0gPz8gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGltZW91dCA9IHRoaXMuX2NsaWVudC5jYWxjdWxhdGVOb25zdHJlYW1pbmdUaW1lb3V0KGJvZHkubWF4X3Rva2VucywgbWF4Tm9uc3RyZWFtaW5nVG9rZW5zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy92MS9tZXNzYWdlcz9iZXRhPXRydWUnLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgdGltZW91dDogdGltZW91dCA/PyA2MDAwMDAsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFtcbiAgICAgICAgICAgICAgICB7IC4uLihiZXRhcz8udG9TdHJpbmcoKSAhPSBudWxsID8geyAnYW50aHJvcGljLWJldGEnOiBiZXRhcz8udG9TdHJpbmcoKSB9IDogdW5kZWZpbmVkKSB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIHN0cmVhbTogcGFyYW1zLnN0cmVhbSA/PyBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIE1lc3NhZ2Ugc3RyZWFtXG4gICAgICovXG4gICAgc3RyZWFtKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIEJldGFNZXNzYWdlU3RyZWFtLmNyZWF0ZU1lc3NhZ2UodGhpcywgYm9keSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvdW50IHRoZSBudW1iZXIgb2YgdG9rZW5zIGluIGEgTWVzc2FnZS5cbiAgICAgKlxuICAgICAqIFRoZSBUb2tlbiBDb3VudCBBUEkgY2FuIGJlIHVzZWQgdG8gY291bnQgdGhlIG51bWJlciBvZiB0b2tlbnMgaW4gYSBNZXNzYWdlLFxuICAgICAqIGluY2x1ZGluZyB0b29scywgaW1hZ2VzLCBhbmQgZG9jdW1lbnRzLCB3aXRob3V0IGNyZWF0aW5nIGl0LlxuICAgICAqXG4gICAgICogTGVhcm4gbW9yZSBhYm91dCB0b2tlbiBjb3VudGluZyBpbiBvdXJcbiAgICAgKiBbdXNlciBndWlkZV0oL2VuL2RvY3MvYnVpbGQtd2l0aC1jbGF1ZGUvdG9rZW4tY291bnRpbmcpXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgYmV0YU1lc3NhZ2VUb2tlbnNDb3VudCA9XG4gICAgICogICBhd2FpdCBjbGllbnQuYmV0YS5tZXNzYWdlcy5jb3VudFRva2Vucyh7XG4gICAgICogICAgIG1lc3NhZ2VzOiBbeyBjb250ZW50OiAnc3RyaW5nJywgcm9sZTogJ3VzZXInIH1dLFxuICAgICAqICAgICBtb2RlbDogJ2NsYXVkZS0zLTctc29ubmV0LWxhdGVzdCcsXG4gICAgICogICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjb3VudFRva2VucyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBiZXRhcywgLi4uYm9keSB9ID0gcGFyYW1zO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy92MS9tZXNzYWdlcy9jb3VudF90b2tlbnM/YmV0YT10cnVlJywge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW1xuICAgICAgICAgICAgICAgIHsgJ2FudGhyb3BpYy1iZXRhJzogWy4uLihiZXRhcyA/PyBbXSksICd0b2tlbi1jb3VudGluZy0yMDI0LTExLTAxJ10udG9TdHJpbmcoKSB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRvb2xSdW5uZXIoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEJldGFUb29sUnVubmVyKHRoaXMuX2NsaWVudCwgYm9keSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0IHsgQmV0YVRvb2xSdW5uZXIgfSBmcm9tIFwiLi4vLi4vLi4vbGliL3Rvb2xzL0JldGFUb29sUnVubmVyLm1qc1wiO1xuTWVzc2FnZXMuQmF0Y2hlcyA9IEJhdGNoZXM7XG5NZXNzYWdlcy5CZXRhVG9vbFJ1bm5lciA9IEJldGFUb29sUnVubmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZXMubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/messages/messages.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/models.mjs":
/*!**********************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/resources/beta/models.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: () => (/* binding */ Models)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\nclass Models extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Get a specific model.\n     *\n     * The Models API response can be used to determine information about a specific\n     * model or resolve a model alias to a model ID.\n     *\n     * @example\n     * ```ts\n     * const betaModelInfo = await client.beta.models.retrieve(\n     *   'model_id',\n     * );\n     * ```\n     */\n    retrieve(modelID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.get((0,_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path) `/v1/models/${modelID}?beta=true`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { ...(betas?.toString() != null ? { 'anthropic-beta': betas?.toString() } : undefined) },\n                options?.headers,\n            ]),\n        });\n    }\n    /**\n     * List available models.\n     *\n     * The Models API response can be used to determine which models are available for\n     * use in the API. More recently released models are listed first.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const betaModelInfo of client.beta.models.list()) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(params = {}, options) {\n        const { betas, ...query } = params ?? {};\n        return this._client.getAPIList('/v1/models?beta=true', (_core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page), {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { ...(betas?.toString() != null ? { 'anthropic-beta': betas?.toString() } : undefined) },\n                options?.headers,\n            ]),\n        });\n    }\n}\n//# sourceMappingURL=models.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9iZXRhL21vZGVscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNzRDtBQUNMO0FBQ1M7QUFDTDtBQUM5QyxxQkFBcUIsMkRBQVc7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsZ0JBQWdCLFFBQVE7QUFDeEIsZ0NBQWdDLDhEQUFJLGVBQWUsUUFBUTtBQUMzRDtBQUNBLHFCQUFxQixtRUFBWTtBQUNqQyxrQkFBa0Isa0NBQWtDLHNDQUFzQyxjQUFjO0FBQ3hHO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCLGdCQUFnQixrQkFBa0I7QUFDbEMsZ0VBQWdFLHNEQUFJO0FBQ3BFO0FBQ0E7QUFDQSxxQkFBcUIsbUVBQVk7QUFDakMsa0JBQWtCLGtDQUFrQyxzQ0FBc0MsY0FBYztBQUN4RztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9iZXRhL21vZGVscy5tanM/NjUwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiLi4vLi4vY29yZS9wYWdpbmF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgYnVpbGRIZWFkZXJzIH0gZnJvbSBcIi4uLy4uL2ludGVybmFsL2hlYWRlcnMubWpzXCI7XG5pbXBvcnQgeyBwYXRoIH0gZnJvbSBcIi4uLy4uL2ludGVybmFsL3V0aWxzL3BhdGgubWpzXCI7XG5leHBvcnQgY2xhc3MgTW9kZWxzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIEdldCBhIHNwZWNpZmljIG1vZGVsLlxuICAgICAqXG4gICAgICogVGhlIE1vZGVscyBBUEkgcmVzcG9uc2UgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWNcbiAgICAgKiBtb2RlbCBvciByZXNvbHZlIGEgbW9kZWwgYWxpYXMgdG8gYSBtb2RlbCBJRC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBiZXRhTW9kZWxJbmZvID0gYXdhaXQgY2xpZW50LmJldGEubW9kZWxzLnJldHJpZXZlKFxuICAgICAqICAgJ21vZGVsX2lkJyxcbiAgICAgKiApO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJldHJpZXZlKG1vZGVsSUQsIHBhcmFtcyA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYmV0YXMgfSA9IHBhcmFtcyA/PyB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQocGF0aCBgL3YxL21vZGVscy8ke21vZGVsSUR9P2JldGE9dHJ1ZWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiBidWlsZEhlYWRlcnMoW1xuICAgICAgICAgICAgICAgIHsgLi4uKGJldGFzPy50b1N0cmluZygpICE9IG51bGwgPyB7ICdhbnRocm9waWMtYmV0YSc6IGJldGFzPy50b1N0cmluZygpIH0gOiB1bmRlZmluZWQpIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucz8uaGVhZGVycyxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGlzdCBhdmFpbGFibGUgbW9kZWxzLlxuICAgICAqXG4gICAgICogVGhlIE1vZGVscyBBUEkgcmVzcG9uc2UgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIG1vZGVscyBhcmUgYXZhaWxhYmxlIGZvclxuICAgICAqIHVzZSBpbiB0aGUgQVBJLiBNb3JlIHJlY2VudGx5IHJlbGVhc2VkIG1vZGVscyBhcmUgbGlzdGVkIGZpcnN0LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIC8vIEF1dG9tYXRpY2FsbHkgZmV0Y2hlcyBtb3JlIHBhZ2VzIGFzIG5lZWRlZC5cbiAgICAgKiBmb3IgYXdhaXQgKGNvbnN0IGJldGFNb2RlbEluZm8gb2YgY2xpZW50LmJldGEubW9kZWxzLmxpc3QoKSkge1xuICAgICAqICAgLy8gLi4uXG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGxpc3QocGFyYW1zID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBiZXRhcywgLi4ucXVlcnkgfSA9IHBhcmFtcyA/PyB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvdjEvbW9kZWxzP2JldGE9dHJ1ZScsIChQYWdlKSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFtcbiAgICAgICAgICAgICAgICB7IC4uLihiZXRhcz8udG9TdHJpbmcoKSAhPSBudWxsID8geyAnYW50aHJvcGljLWJldGEnOiBiZXRhcz8udG9TdHJpbmcoKSB9IDogdW5kZWZpbmVkKSB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kZWxzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/models.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/resources/completions.mjs":
/*!**********************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/resources/completions.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/headers.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\nclass Completions extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(params, options) {\n        const { betas, ...body } = params;\n        return this._client.post('/v1/complete', {\n            body,\n            timeout: this._client._options.timeout ?? 600000,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_1__.buildHeaders)([\n                { ...(betas?.toString() != null ? { 'anthropic-beta': betas?.toString() } : undefined) },\n                options?.headers,\n            ]),\n            stream: params.stream ?? false,\n        });\n    }\n}\n//# sourceMappingURL=completions.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9jb21wbGV0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDbUQ7QUFDSTtBQUNoRCwwQkFBMEIsMkRBQVc7QUFDNUM7QUFDQSxnQkFBZ0IsaUJBQWlCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1FQUFZO0FBQ2pDLGtCQUFrQixrQ0FBa0Msc0NBQXNDLGNBQWM7QUFDeEc7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9jb21wbGV0aW9ucy5tanM/ZDgyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IGJ1aWxkSGVhZGVycyB9IGZyb20gXCIuLi9pbnRlcm5hbC9oZWFkZXJzLm1qc1wiO1xuZXhwb3J0IGNsYXNzIENvbXBsZXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNyZWF0ZShwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBiZXRhcywgLi4uYm9keSB9ID0gcGFyYW1zO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy92MS9jb21wbGV0ZScsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICB0aW1lb3V0OiB0aGlzLl9jbGllbnQuX29wdGlvbnMudGltZW91dCA/PyA2MDAwMDAsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFtcbiAgICAgICAgICAgICAgICB7IC4uLihiZXRhcz8udG9TdHJpbmcoKSAhPSBudWxsID8geyAnYW50aHJvcGljLWJldGEnOiBiZXRhcz8udG9TdHJpbmcoKSB9IDogdW5kZWZpbmVkKSB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM/LmhlYWRlcnMsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIHN0cmVhbTogcGFyYW1zLnN0cmVhbSA/PyBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGxldGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/resources/completions.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/resources/index.mjs":
/*!****************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/resources/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Beta: () => (/* reexport safe */ _beta_beta_mjs__WEBPACK_IMPORTED_MODULE_1__.Beta),\n/* harmony export */   Completions: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions),\n/* harmony export */   Messages: () => (/* reexport safe */ _messages_messages_mjs__WEBPACK_IMPORTED_MODULE_3__.Messages),\n/* harmony export */   Models: () => (/* reexport safe */ _models_mjs__WEBPACK_IMPORTED_MODULE_4__.Models)\n/* harmony export */ });\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shared.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/shared.mjs\");\n/* harmony import */ var _beta_beta_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./beta/beta.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/beta/beta.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/completions.mjs\");\n/* harmony import */ var _messages_messages_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./messages/messages.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs\");\n/* harmony import */ var _models_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./models.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/models.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDNkI7QUFDVztBQUNTO0FBQ0c7QUFDYjtBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9pbmRleC5tanM/NjczYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuZXhwb3J0ICogZnJvbSBcIi4vc2hhcmVkLm1qc1wiO1xuZXhwb3J0IHsgQmV0YSwgfSBmcm9tIFwiLi9iZXRhL2JldGEubWpzXCI7XG5leHBvcnQgeyBDb21wbGV0aW9ucywgfSBmcm9tIFwiLi9jb21wbGV0aW9ucy5tanNcIjtcbmV4cG9ydCB7IE1lc3NhZ2VzLCB9IGZyb20gXCIuL21lc3NhZ2VzL21lc3NhZ2VzLm1qc1wiO1xuZXhwb3J0IHsgTW9kZWxzLCB9IGZyb20gXCIuL21vZGVscy5tanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/resources/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs":
/*!***************************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batches: () => (/* binding */ Batches)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/pagination.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internal/headers.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _internal_decoders_jsonl_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/decoders/jsonl.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/decoders/jsonl.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/error.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../internal/utils/path.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\n\nclass Batches extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Send a batch of Message creation requests.\n     *\n     * The Message Batches API can be used to process multiple Messages API requests at\n     * once. Once a Message Batch is created, it begins processing immediately. Batches\n     * can take up to 24 hours to complete.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const messageBatch = await client.messages.batches.create({\n     *   requests: [\n     *     {\n     *       custom_id: 'my-custom-id-1',\n     *       params: {\n     *         max_tokens: 1024,\n     *         messages: [\n     *           { content: 'Hello, world', role: 'user' },\n     *         ],\n     *         model: 'claude-sonnet-4-5-20250929',\n     *       },\n     *     },\n     *   ],\n     * });\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/v1/messages/batches', { body, ...options });\n    }\n    /**\n     * This endpoint is idempotent and can be used to poll for Message Batch\n     * completion. To access the results of a Message Batch, make a request to the\n     * `results_url` field in the response.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const messageBatch = await client.messages.batches.retrieve(\n     *   'message_batch_id',\n     * );\n     * ```\n     */\n    retrieve(messageBatchID, options) {\n        return this._client.get((0,_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path) `/v1/messages/batches/${messageBatchID}`, options);\n    }\n    /**\n     * List all Message Batches within a Workspace. Most recently created batches are\n     * returned first.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const messageBatch of client.messages.batches.list()) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/v1/messages/batches', (_core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page), { query, ...options });\n    }\n    /**\n     * Delete a Message Batch.\n     *\n     * Message Batches can only be deleted once they've finished processing. If you'd\n     * like to delete an in-progress batch, you must first cancel it.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const deletedMessageBatch =\n     *   await client.messages.batches.delete('message_batch_id');\n     * ```\n     */\n    delete(messageBatchID, options) {\n        return this._client.delete((0,_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path) `/v1/messages/batches/${messageBatchID}`, options);\n    }\n    /**\n     * Batches may be canceled any time before processing ends. Once cancellation is\n     * initiated, the batch enters a `canceling` state, at which time the system may\n     * complete any in-progress, non-interruptible requests before finalizing\n     * cancellation.\n     *\n     * The number of canceled requests is specified in `request_counts`. To determine\n     * which requests were canceled, check the individual results within the batch.\n     * Note that cancellation may not result in any canceled requests if they were\n     * non-interruptible.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const messageBatch = await client.messages.batches.cancel(\n     *   'message_batch_id',\n     * );\n     * ```\n     */\n    cancel(messageBatchID, options) {\n        return this._client.post((0,_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_5__.path) `/v1/messages/batches/${messageBatchID}/cancel`, options);\n    }\n    /**\n     * Streams the results of a Message Batch as a `.jsonl` file.\n     *\n     * Each line in the file is a JSON object containing the result of a single request\n     * in the Message Batch. Results are not guaranteed to be in the same order as\n     * requests. Use the `custom_id` field to match results to requests.\n     *\n     * Learn more about the Message Batches API in our\n     * [user guide](/en/docs/build-with-claude/batch-processing)\n     *\n     * @example\n     * ```ts\n     * const messageBatchIndividualResponse =\n     *   await client.messages.batches.results('message_batch_id');\n     * ```\n     */\n    async results(messageBatchID, options) {\n        const batch = await this.retrieve(messageBatchID);\n        if (!batch.results_url) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_4__.AnthropicError(`No batch \\`results_url\\`; Has it finished processing? ${batch.processing_status} - ${batch.id}`);\n        }\n        return this._client\n            .get(batch.results_url, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([{ Accept: 'application/binary' }, options?.headers]),\n            stream: true,\n            __binaryResponse: true,\n        })\n            ._thenUnwrap((_, props) => _internal_decoders_jsonl_mjs__WEBPACK_IMPORTED_MODULE_3__.JSONLDecoder.fromResponse(props.response, props.controller));\n    }\n}\n//# sourceMappingURL=batches.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9tZXNzYWdlcy9iYXRjaGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDc0Q7QUFDTDtBQUNTO0FBQ087QUFDaEI7QUFDSTtBQUM5QyxzQkFBc0IsMkRBQVc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsdUNBQXVDO0FBQzFEO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsWUFBWTtBQUNaO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxrQkFBa0I7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw4REFBSSx5QkFBeUIsZUFBZTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixnRUFBZ0Usc0RBQUksS0FBSyxtQkFBbUI7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyw4REFBSSx5QkFBeUIsZUFBZTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDhEQUFJLHlCQUF5QixlQUFlO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isc0RBQWMsNEJBQTRCLDhCQUE4Qix5QkFBeUIsSUFBSSxTQUFTO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1FQUFZLElBQUksOEJBQThCO0FBQ25FO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsdUNBQXVDLHNFQUFZO0FBQ25EO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9tZXNzYWdlcy9iYXRjaGVzLm1qcz9kMmU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCIuLi8uLi9jb3JlL3BhZ2luYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBidWlsZEhlYWRlcnMgfSBmcm9tIFwiLi4vLi4vaW50ZXJuYWwvaGVhZGVycy5tanNcIjtcbmltcG9ydCB7IEpTT05MRGVjb2RlciB9IGZyb20gXCIuLi8uLi9pbnRlcm5hbC9kZWNvZGVycy9qc29ubC5tanNcIjtcbmltcG9ydCB7IEFudGhyb3BpY0Vycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yLm1qc1wiO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gXCIuLi8uLi9pbnRlcm5hbC91dGlscy9wYXRoLm1qc1wiO1xuZXhwb3J0IGNsYXNzIEJhdGNoZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogU2VuZCBhIGJhdGNoIG9mIE1lc3NhZ2UgY3JlYXRpb24gcmVxdWVzdHMuXG4gICAgICpcbiAgICAgKiBUaGUgTWVzc2FnZSBCYXRjaGVzIEFQSSBjYW4gYmUgdXNlZCB0byBwcm9jZXNzIG11bHRpcGxlIE1lc3NhZ2VzIEFQSSByZXF1ZXN0cyBhdFxuICAgICAqIG9uY2UuIE9uY2UgYSBNZXNzYWdlIEJhdGNoIGlzIGNyZWF0ZWQsIGl0IGJlZ2lucyBwcm9jZXNzaW5nIGltbWVkaWF0ZWx5LiBCYXRjaGVzXG4gICAgICogY2FuIHRha2UgdXAgdG8gMjQgaG91cnMgdG8gY29tcGxldGUuXG4gICAgICpcbiAgICAgKiBMZWFybiBtb3JlIGFib3V0IHRoZSBNZXNzYWdlIEJhdGNoZXMgQVBJIGluIG91clxuICAgICAqIFt1c2VyIGd1aWRlXSgvZW4vZG9jcy9idWlsZC13aXRoLWNsYXVkZS9iYXRjaC1wcm9jZXNzaW5nKVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IG1lc3NhZ2VCYXRjaCA9IGF3YWl0IGNsaWVudC5tZXNzYWdlcy5iYXRjaGVzLmNyZWF0ZSh7XG4gICAgICogICByZXF1ZXN0czogW1xuICAgICAqICAgICB7XG4gICAgICogICAgICAgY3VzdG9tX2lkOiAnbXktY3VzdG9tLWlkLTEnLFxuICAgICAqICAgICAgIHBhcmFtczoge1xuICAgICAqICAgICAgICAgbWF4X3Rva2VuczogMTAyNCxcbiAgICAgKiAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICogICAgICAgICAgIHsgY29udGVudDogJ0hlbGxvLCB3b3JsZCcsIHJvbGU6ICd1c2VyJyB9LFxuICAgICAqICAgICAgICAgXSxcbiAgICAgKiAgICAgICAgIG1vZGVsOiAnY2xhdWRlLXNvbm5ldC00LTUtMjAyNTA5MjknLFxuICAgICAqICAgICAgIH0sXG4gICAgICogICAgIH0sXG4gICAgICogICBdLFxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3YxL21lc3NhZ2VzL2JhdGNoZXMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgZW5kcG9pbnQgaXMgaWRlbXBvdGVudCBhbmQgY2FuIGJlIHVzZWQgdG8gcG9sbCBmb3IgTWVzc2FnZSBCYXRjaFxuICAgICAqIGNvbXBsZXRpb24uIFRvIGFjY2VzcyB0aGUgcmVzdWx0cyBvZiBhIE1lc3NhZ2UgQmF0Y2gsIG1ha2UgYSByZXF1ZXN0IHRvIHRoZVxuICAgICAqIGByZXN1bHRzX3VybGAgZmllbGQgaW4gdGhlIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICogTGVhcm4gbW9yZSBhYm91dCB0aGUgTWVzc2FnZSBCYXRjaGVzIEFQSSBpbiBvdXJcbiAgICAgKiBbdXNlciBndWlkZV0oL2VuL2RvY3MvYnVpbGQtd2l0aC1jbGF1ZGUvYmF0Y2gtcHJvY2Vzc2luZylcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBtZXNzYWdlQmF0Y2ggPSBhd2FpdCBjbGllbnQubWVzc2FnZXMuYmF0Y2hlcy5yZXRyaWV2ZShcbiAgICAgKiAgICdtZXNzYWdlX2JhdGNoX2lkJyxcbiAgICAgKiApO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJldHJpZXZlKG1lc3NhZ2VCYXRjaElELCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KHBhdGggYC92MS9tZXNzYWdlcy9iYXRjaGVzLyR7bWVzc2FnZUJhdGNoSUR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpc3QgYWxsIE1lc3NhZ2UgQmF0Y2hlcyB3aXRoaW4gYSBXb3Jrc3BhY2UuIE1vc3QgcmVjZW50bHkgY3JlYXRlZCBiYXRjaGVzIGFyZVxuICAgICAqIHJldHVybmVkIGZpcnN0LlxuICAgICAqXG4gICAgICogTGVhcm4gbW9yZSBhYm91dCB0aGUgTWVzc2FnZSBCYXRjaGVzIEFQSSBpbiBvdXJcbiAgICAgKiBbdXNlciBndWlkZV0oL2VuL2RvY3MvYnVpbGQtd2l0aC1jbGF1ZGUvYmF0Y2gtcHJvY2Vzc2luZylcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiAvLyBBdXRvbWF0aWNhbGx5IGZldGNoZXMgbW9yZSBwYWdlcyBhcyBuZWVkZWQuXG4gICAgICogZm9yIGF3YWl0IChjb25zdCBtZXNzYWdlQmF0Y2ggb2YgY2xpZW50Lm1lc3NhZ2VzLmJhdGNoZXMubGlzdCgpKSB7XG4gICAgICogICAvLyAuLi5cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgbGlzdChxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL3YxL21lc3NhZ2VzL2JhdGNoZXMnLCAoUGFnZSksIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIE1lc3NhZ2UgQmF0Y2guXG4gICAgICpcbiAgICAgKiBNZXNzYWdlIEJhdGNoZXMgY2FuIG9ubHkgYmUgZGVsZXRlZCBvbmNlIHRoZXkndmUgZmluaXNoZWQgcHJvY2Vzc2luZy4gSWYgeW91J2RcbiAgICAgKiBsaWtlIHRvIGRlbGV0ZSBhbiBpbi1wcm9ncmVzcyBiYXRjaCwgeW91IG11c3QgZmlyc3QgY2FuY2VsIGl0LlxuICAgICAqXG4gICAgICogTGVhcm4gbW9yZSBhYm91dCB0aGUgTWVzc2FnZSBCYXRjaGVzIEFQSSBpbiBvdXJcbiAgICAgKiBbdXNlciBndWlkZV0oL2VuL2RvY3MvYnVpbGQtd2l0aC1jbGF1ZGUvYmF0Y2gtcHJvY2Vzc2luZylcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBkZWxldGVkTWVzc2FnZUJhdGNoID1cbiAgICAgKiAgIGF3YWl0IGNsaWVudC5tZXNzYWdlcy5iYXRjaGVzLmRlbGV0ZSgnbWVzc2FnZV9iYXRjaF9pZCcpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGRlbGV0ZShtZXNzYWdlQmF0Y2hJRCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShwYXRoIGAvdjEvbWVzc2FnZXMvYmF0Y2hlcy8ke21lc3NhZ2VCYXRjaElEfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCYXRjaGVzIG1heSBiZSBjYW5jZWxlZCBhbnkgdGltZSBiZWZvcmUgcHJvY2Vzc2luZyBlbmRzLiBPbmNlIGNhbmNlbGxhdGlvbiBpc1xuICAgICAqIGluaXRpYXRlZCwgdGhlIGJhdGNoIGVudGVycyBhIGBjYW5jZWxpbmdgIHN0YXRlLCBhdCB3aGljaCB0aW1lIHRoZSBzeXN0ZW0gbWF5XG4gICAgICogY29tcGxldGUgYW55IGluLXByb2dyZXNzLCBub24taW50ZXJydXB0aWJsZSByZXF1ZXN0cyBiZWZvcmUgZmluYWxpemluZ1xuICAgICAqIGNhbmNlbGxhdGlvbi5cbiAgICAgKlxuICAgICAqIFRoZSBudW1iZXIgb2YgY2FuY2VsZWQgcmVxdWVzdHMgaXMgc3BlY2lmaWVkIGluIGByZXF1ZXN0X2NvdW50c2AuIFRvIGRldGVybWluZVxuICAgICAqIHdoaWNoIHJlcXVlc3RzIHdlcmUgY2FuY2VsZWQsIGNoZWNrIHRoZSBpbmRpdmlkdWFsIHJlc3VsdHMgd2l0aGluIHRoZSBiYXRjaC5cbiAgICAgKiBOb3RlIHRoYXQgY2FuY2VsbGF0aW9uIG1heSBub3QgcmVzdWx0IGluIGFueSBjYW5jZWxlZCByZXF1ZXN0cyBpZiB0aGV5IHdlcmVcbiAgICAgKiBub24taW50ZXJydXB0aWJsZS5cbiAgICAgKlxuICAgICAqIExlYXJuIG1vcmUgYWJvdXQgdGhlIE1lc3NhZ2UgQmF0Y2hlcyBBUEkgaW4gb3VyXG4gICAgICogW3VzZXIgZ3VpZGVdKC9lbi9kb2NzL2J1aWxkLXdpdGgtY2xhdWRlL2JhdGNoLXByb2Nlc3NpbmcpXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3QgbWVzc2FnZUJhdGNoID0gYXdhaXQgY2xpZW50Lm1lc3NhZ2VzLmJhdGNoZXMuY2FuY2VsKFxuICAgICAqICAgJ21lc3NhZ2VfYmF0Y2hfaWQnLFxuICAgICAqICk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY2FuY2VsKG1lc3NhZ2VCYXRjaElELCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChwYXRoIGAvdjEvbWVzc2FnZXMvYmF0Y2hlcy8ke21lc3NhZ2VCYXRjaElEfS9jYW5jZWxgLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RyZWFtcyB0aGUgcmVzdWx0cyBvZiBhIE1lc3NhZ2UgQmF0Y2ggYXMgYSBgLmpzb25sYCBmaWxlLlxuICAgICAqXG4gICAgICogRWFjaCBsaW5lIGluIHRoZSBmaWxlIGlzIGEgSlNPTiBvYmplY3QgY29udGFpbmluZyB0aGUgcmVzdWx0IG9mIGEgc2luZ2xlIHJlcXVlc3RcbiAgICAgKiBpbiB0aGUgTWVzc2FnZSBCYXRjaC4gUmVzdWx0cyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXNcbiAgICAgKiByZXF1ZXN0cy4gVXNlIHRoZSBgY3VzdG9tX2lkYCBmaWVsZCB0byBtYXRjaCByZXN1bHRzIHRvIHJlcXVlc3RzLlxuICAgICAqXG4gICAgICogTGVhcm4gbW9yZSBhYm91dCB0aGUgTWVzc2FnZSBCYXRjaGVzIEFQSSBpbiBvdXJcbiAgICAgKiBbdXNlciBndWlkZV0oL2VuL2RvY3MvYnVpbGQtd2l0aC1jbGF1ZGUvYmF0Y2gtcHJvY2Vzc2luZylcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBtZXNzYWdlQmF0Y2hJbmRpdmlkdWFsUmVzcG9uc2UgPVxuICAgICAqICAgYXdhaXQgY2xpZW50Lm1lc3NhZ2VzLmJhdGNoZXMucmVzdWx0cygnbWVzc2FnZV9iYXRjaF9pZCcpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGFzeW5jIHJlc3VsdHMobWVzc2FnZUJhdGNoSUQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYmF0Y2ggPSBhd2FpdCB0aGlzLnJldHJpZXZlKG1lc3NhZ2VCYXRjaElEKTtcbiAgICAgICAgaWYgKCFiYXRjaC5yZXN1bHRzX3VybCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFudGhyb3BpY0Vycm9yKGBObyBiYXRjaCBcXGByZXN1bHRzX3VybFxcYDsgSGFzIGl0IGZpbmlzaGVkIHByb2Nlc3Npbmc/ICR7YmF0Y2gucHJvY2Vzc2luZ19zdGF0dXN9IC0gJHtiYXRjaC5pZH1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50XG4gICAgICAgICAgICAuZ2V0KGJhdGNoLnJlc3VsdHNfdXJsLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogYnVpbGRIZWFkZXJzKFt7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL2JpbmFyeScgfSwgb3B0aW9ucz8uaGVhZGVyc10pLFxuICAgICAgICAgICAgc3RyZWFtOiB0cnVlLFxuICAgICAgICAgICAgX19iaW5hcnlSZXNwb25zZTogdHJ1ZSxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5fdGhlblVud3JhcCgoXywgcHJvcHMpID0+IEpTT05MRGVjb2Rlci5mcm9tUmVzcG9uc2UocHJvcHMucmVzcG9uc2UsIHByb3BzLmNvbnRyb2xsZXIpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXRjaGVzLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs":
/*!****************************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messages: () => (/* binding */ Messages)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/resource.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _lib_MessageStream_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/MessageStream.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/lib/MessageStream.mjs\");\n/* harmony import */ var _batches_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./batches.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/resources/messages/batches.mjs\");\n/* harmony import */ var _internal_constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../internal/constants.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/constants.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\n\nclass Messages extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor() {\n        super(...arguments);\n        this.batches = new _batches_mjs__WEBPACK_IMPORTED_MODULE_2__.Batches(this._client);\n    }\n    create(body, options) {\n        if (body.model in DEPRECATED_MODELS) {\n            console.warn(`The model '${body.model}' is deprecated and will reach end-of-life on ${DEPRECATED_MODELS[body.model]}\\nPlease migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.`);\n        }\n        let timeout = this._client._options.timeout;\n        if (!body.stream && timeout == null) {\n            const maxNonstreamingTokens = _internal_constants_mjs__WEBPACK_IMPORTED_MODULE_3__.MODEL_NONSTREAMING_TOKENS[body.model] ?? undefined;\n            timeout = this._client.calculateNonstreamingTimeout(body.max_tokens, maxNonstreamingTokens);\n        }\n        return this._client.post('/v1/messages', {\n            body,\n            timeout: timeout ?? 600000,\n            ...options,\n            stream: body.stream ?? false,\n        });\n    }\n    /**\n     * Create a Message stream\n     */\n    stream(body, options) {\n        return _lib_MessageStream_mjs__WEBPACK_IMPORTED_MODULE_1__.MessageStream.createMessage(this, body, options);\n    }\n    /**\n     * Count the number of tokens in a Message.\n     *\n     * The Token Count API can be used to count the number of tokens in a Message,\n     * including tools, images, and documents, without creating it.\n     *\n     * Learn more about token counting in our\n     * [user guide](/en/docs/build-with-claude/token-counting)\n     *\n     * @example\n     * ```ts\n     * const messageTokensCount =\n     *   await client.messages.countTokens({\n     *     messages: [{ content: 'string', role: 'user' }],\n     *     model: 'claude-3-7-sonnet-latest',\n     *   });\n     * ```\n     */\n    countTokens(body, options) {\n        return this._client.post('/v1/messages/count_tokens', { body, ...options });\n    }\n}\nconst DEPRECATED_MODELS = {\n    'claude-1.3': 'November 6th, 2024',\n    'claude-1.3-100k': 'November 6th, 2024',\n    'claude-instant-1.1': 'November 6th, 2024',\n    'claude-instant-1.1-100k': 'November 6th, 2024',\n    'claude-instant-1.2': 'November 6th, 2024',\n    'claude-3-sonnet-20240229': 'July 21st, 2025',\n    'claude-3-opus-20240229': 'January 5th, 2026',\n    'claude-2.1': 'July 21st, 2025',\n    'claude-2.0': 'July 21st, 2025',\n    'claude-3-5-sonnet-20241022': 'October 22, 2025',\n    'claude-3-5-sonnet-20240620': 'October 22, 2025',\n};\nMessages.Batches = _batches_mjs__WEBPACK_IMPORTED_MODULE_2__.Batches;\n//# sourceMappingURL=messages.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9tZXNzYWdlcy9tZXNzYWdlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNzRDtBQUNNO0FBQ2hCO0FBQ0g7QUFDZ0M7QUFDbEUsdUJBQXVCLDJEQUFXO0FBQ3pDO0FBQ0E7QUFDQSwyQkFBMkIsaURBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxXQUFXLGdEQUFnRCw4QkFBOEI7QUFDaEk7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDhFQUF5QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpRUFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlDQUFpQztBQUN6RDtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0Usa0JBQWtCO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpREFBTztBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9tZXNzYWdlcy9tZXNzYWdlcy5tanM/YmQ5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vY29yZS9yZXNvdXJjZS5tanNcIjtcbmltcG9ydCB7IE1lc3NhZ2VTdHJlYW0gfSBmcm9tIFwiLi4vLi4vbGliL01lc3NhZ2VTdHJlYW0ubWpzXCI7XG5pbXBvcnQgKiBhcyBCYXRjaGVzQVBJIGZyb20gXCIuL2JhdGNoZXMubWpzXCI7XG5pbXBvcnQgeyBCYXRjaGVzLCB9IGZyb20gXCIuL2JhdGNoZXMubWpzXCI7XG5pbXBvcnQgeyBNT0RFTF9OT05TVFJFQU1JTkdfVE9LRU5TIH0gZnJvbSBcIi4uLy4uL2ludGVybmFsL2NvbnN0YW50cy5tanNcIjtcbmV4cG9ydCBjbGFzcyBNZXNzYWdlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5iYXRjaGVzID0gbmV3IEJhdGNoZXNBUEkuQmF0Y2hlcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoYm9keS5tb2RlbCBpbiBERVBSRUNBVEVEX01PREVMUykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBUaGUgbW9kZWwgJyR7Ym9keS5tb2RlbH0nIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgcmVhY2ggZW5kLW9mLWxpZmUgb24gJHtERVBSRUNBVEVEX01PREVMU1tib2R5Lm1vZGVsXX1cXG5QbGVhc2UgbWlncmF0ZSB0byBhIG5ld2VyIG1vZGVsLiBWaXNpdCBodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9lbi9kb2NzL3Jlc291cmNlcy9tb2RlbC1kZXByZWNhdGlvbnMgZm9yIG1vcmUgaW5mb3JtYXRpb24uYCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRpbWVvdXQgPSB0aGlzLl9jbGllbnQuX29wdGlvbnMudGltZW91dDtcbiAgICAgICAgaWYgKCFib2R5LnN0cmVhbSAmJiB0aW1lb3V0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IG1heE5vbnN0cmVhbWluZ1Rva2VucyA9IE1PREVMX05PTlNUUkVBTUlOR19UT0tFTlNbYm9keS5tb2RlbF0gPz8gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGltZW91dCA9IHRoaXMuX2NsaWVudC5jYWxjdWxhdGVOb25zdHJlYW1pbmdUaW1lb3V0KGJvZHkubWF4X3Rva2VucywgbWF4Tm9uc3RyZWFtaW5nVG9rZW5zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy92MS9tZXNzYWdlcycsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICB0aW1lb3V0OiB0aW1lb3V0ID8/IDYwMDAwMCxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBzdHJlYW06IGJvZHkuc3RyZWFtID8/IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgTWVzc2FnZSBzdHJlYW1cbiAgICAgKi9cbiAgICBzdHJlYW0oYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gTWVzc2FnZVN0cmVhbS5jcmVhdGVNZXNzYWdlKHRoaXMsIGJvZHksIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3VudCB0aGUgbnVtYmVyIG9mIHRva2VucyBpbiBhIE1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBUaGUgVG9rZW4gQ291bnQgQVBJIGNhbiBiZSB1c2VkIHRvIGNvdW50IHRoZSBudW1iZXIgb2YgdG9rZW5zIGluIGEgTWVzc2FnZSxcbiAgICAgKiBpbmNsdWRpbmcgdG9vbHMsIGltYWdlcywgYW5kIGRvY3VtZW50cywgd2l0aG91dCBjcmVhdGluZyBpdC5cbiAgICAgKlxuICAgICAqIExlYXJuIG1vcmUgYWJvdXQgdG9rZW4gY291bnRpbmcgaW4gb3VyXG4gICAgICogW3VzZXIgZ3VpZGVdKC9lbi9kb2NzL2J1aWxkLXdpdGgtY2xhdWRlL3Rva2VuLWNvdW50aW5nKVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IG1lc3NhZ2VUb2tlbnNDb3VudCA9XG4gICAgICogICBhd2FpdCBjbGllbnQubWVzc2FnZXMuY291bnRUb2tlbnMoe1xuICAgICAqICAgICBtZXNzYWdlczogW3sgY29udGVudDogJ3N0cmluZycsIHJvbGU6ICd1c2VyJyB9XSxcbiAgICAgKiAgICAgbW9kZWw6ICdjbGF1ZGUtMy03LXNvbm5ldC1sYXRlc3QnLFxuICAgICAqICAgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgY291bnRUb2tlbnMoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy92MS9tZXNzYWdlcy9jb3VudF90b2tlbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxufVxuY29uc3QgREVQUkVDQVRFRF9NT0RFTFMgPSB7XG4gICAgJ2NsYXVkZS0xLjMnOiAnTm92ZW1iZXIgNnRoLCAyMDI0JyxcbiAgICAnY2xhdWRlLTEuMy0xMDBrJzogJ05vdmVtYmVyIDZ0aCwgMjAyNCcsXG4gICAgJ2NsYXVkZS1pbnN0YW50LTEuMSc6ICdOb3ZlbWJlciA2dGgsIDIwMjQnLFxuICAgICdjbGF1ZGUtaW5zdGFudC0xLjEtMTAwayc6ICdOb3ZlbWJlciA2dGgsIDIwMjQnLFxuICAgICdjbGF1ZGUtaW5zdGFudC0xLjInOiAnTm92ZW1iZXIgNnRoLCAyMDI0JyxcbiAgICAnY2xhdWRlLTMtc29ubmV0LTIwMjQwMjI5JzogJ0p1bHkgMjFzdCwgMjAyNScsXG4gICAgJ2NsYXVkZS0zLW9wdXMtMjAyNDAyMjknOiAnSmFudWFyeSA1dGgsIDIwMjYnLFxuICAgICdjbGF1ZGUtMi4xJzogJ0p1bHkgMjFzdCwgMjAyNScsXG4gICAgJ2NsYXVkZS0yLjAnOiAnSnVseSAyMXN0LCAyMDI1JyxcbiAgICAnY2xhdWRlLTMtNS1zb25uZXQtMjAyNDEwMjInOiAnT2N0b2JlciAyMiwgMjAyNScsXG4gICAgJ2NsYXVkZS0zLTUtc29ubmV0LTIwMjQwNjIwJzogJ09jdG9iZXIgMjIsIDIwMjUnLFxufTtcbk1lc3NhZ2VzLkJhdGNoZXMgPSBCYXRjaGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVzc2FnZXMubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/resources/messages/messages.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/resources/models.mjs":
/*!*****************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/resources/models.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: () => (/* binding */ Models)\n/* harmony export */ });\n/* harmony import */ var _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/resource.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/resource.mjs\");\n/* harmony import */ var _core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/pagination.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/pagination.mjs\");\n/* harmony import */ var _internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/headers.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/headers.mjs\");\n/* harmony import */ var _internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/utils/path.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/internal/utils/path.mjs\");\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n\n\n\nclass Models extends _core_resource_mjs__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Get a specific model.\n     *\n     * The Models API response can be used to determine information about a specific\n     * model or resolve a model alias to a model ID.\n     */\n    retrieve(modelID, params = {}, options) {\n        const { betas } = params ?? {};\n        return this._client.get((0,_internal_utils_path_mjs__WEBPACK_IMPORTED_MODULE_3__.path) `/v1/models/${modelID}`, {\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { ...(betas?.toString() != null ? { 'anthropic-beta': betas?.toString() } : undefined) },\n                options?.headers,\n            ]),\n        });\n    }\n    /**\n     * List available models.\n     *\n     * The Models API response can be used to determine which models are available for\n     * use in the API. More recently released models are listed first.\n     */\n    list(params = {}, options) {\n        const { betas, ...query } = params ?? {};\n        return this._client.getAPIList('/v1/models', (_core_pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page), {\n            query,\n            ...options,\n            headers: (0,_internal_headers_mjs__WEBPACK_IMPORTED_MODULE_2__.buildHeaders)([\n                { ...(betas?.toString() != null ? { 'anthropic-beta': betas?.toString() } : undefined) },\n                options?.headers,\n            ]),\n        });\n    }\n}\n//# sourceMappingURL=models.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9tb2RlbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDbUQ7QUFDTDtBQUNTO0FBQ0w7QUFDM0MscUJBQXFCLDJEQUFXO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQyxnQkFBZ0IsUUFBUTtBQUN4QixnQ0FBZ0MsOERBQUksZUFBZSxRQUFRO0FBQzNEO0FBQ0EscUJBQXFCLG1FQUFZO0FBQ2pDLGtCQUFrQixrQ0FBa0Msc0NBQXNDLGNBQWM7QUFDeEc7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixnQkFBZ0Isa0JBQWtCO0FBQ2xDLHNEQUFzRCxzREFBSTtBQUMxRDtBQUNBO0FBQ0EscUJBQXFCLG1FQUFZO0FBQ2pDLGtCQUFrQixrQ0FBa0Msc0NBQXNDLGNBQWM7QUFDeEc7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLy4uLy4uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9yZXNvdXJjZXMvbW9kZWxzLm1qcz8zMWI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gXCIuLi9jb3JlL3Jlc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gXCIuLi9jb3JlL3BhZ2luYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBidWlsZEhlYWRlcnMgfSBmcm9tIFwiLi4vaW50ZXJuYWwvaGVhZGVycy5tanNcIjtcbmltcG9ydCB7IHBhdGggfSBmcm9tIFwiLi4vaW50ZXJuYWwvdXRpbHMvcGF0aC5tanNcIjtcbmV4cG9ydCBjbGFzcyBNb2RlbHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgbW9kZWwuXG4gICAgICpcbiAgICAgKiBUaGUgTW9kZWxzIEFQSSByZXNwb25zZSBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgaW5mb3JtYXRpb24gYWJvdXQgYSBzcGVjaWZpY1xuICAgICAqIG1vZGVsIG9yIHJlc29sdmUgYSBtb2RlbCBhbGlhcyB0byBhIG1vZGVsIElELlxuICAgICAqL1xuICAgIHJldHJpZXZlKG1vZGVsSUQsIHBhcmFtcyA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgYmV0YXMgfSA9IHBhcmFtcyA/PyB7fTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQocGF0aCBgL3YxL21vZGVscy8ke21vZGVsSUR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbXG4gICAgICAgICAgICAgICAgeyAuLi4oYmV0YXM/LnRvU3RyaW5nKCkgIT0gbnVsbCA/IHsgJ2FudGhyb3BpYy1iZXRhJzogYmV0YXM/LnRvU3RyaW5nKCkgfSA6IHVuZGVmaW5lZCkgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0IGF2YWlsYWJsZSBtb2RlbHMuXG4gICAgICpcbiAgICAgKiBUaGUgTW9kZWxzIEFQSSByZXNwb25zZSBjYW4gYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hpY2ggbW9kZWxzIGFyZSBhdmFpbGFibGUgZm9yXG4gICAgICogdXNlIGluIHRoZSBBUEkuIE1vcmUgcmVjZW50bHkgcmVsZWFzZWQgbW9kZWxzIGFyZSBsaXN0ZWQgZmlyc3QuXG4gICAgICovXG4gICAgbGlzdChwYXJhbXMgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJldGFzLCAuLi5xdWVyeSB9ID0gcGFyYW1zID8/IHt9O1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy92MS9tb2RlbHMnLCAoUGFnZSksIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IGJ1aWxkSGVhZGVycyhbXG4gICAgICAgICAgICAgICAgeyAuLi4oYmV0YXM/LnRvU3RyaW5nKCkgIT0gbnVsbCA/IHsgJ2FudGhyb3BpYy1iZXRhJzogYmV0YXM/LnRvU3RyaW5nKCkgfSA6IHVuZGVmaW5lZCkgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgXSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGVscy5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/resources/models.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/resources/shared.mjs":
/*!*****************************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/resources/shared.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n//# sourceMappingURL=shared.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3Jlc291cmNlcy9zaGFyZWQubWpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNVO0FBQ1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLy4uLy4uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay9yZXNvdXJjZXMvc2hhcmVkLm1qcz82ZDRlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5leHBvcnQge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZWQubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/resources/shared.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/streaming.mjs":
/*!**********************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/streaming.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* reexport safe */ _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__.Stream),\n/* harmony export */   _iterSSEMessages: () => (/* reexport safe */ _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__._iterSSEMessages)\n/* harmony export */ });\n/* harmony import */ var _core_streaming_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/streaming.mjs */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/core/streaming.mjs\");\n\n//# sourceMappingURL=streaming.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3N0cmVhbWluZy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBpcC91aS8uLi8uLi9ub2RlX21vZHVsZXMvQGFudGhyb3BpYy1haS9zZGsvc3RyZWFtaW5nLm1qcz80YzRhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2NvcmUvc3RyZWFtaW5nLm1qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtaW5nLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/streaming.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/@anthropic-ai/sdk/version.mjs":
/*!********************************************************!*\
  !*** ../../node_modules/@anthropic-ai/sdk/version.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = '0.65.0'; // x-release-please-version\n//# sourceMappingURL=version.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL0BhbnRocm9waWMtYWkvc2RrL3ZlcnNpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTywwQkFBMEI7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLy4uLy4uL25vZGVfbW9kdWxlcy9AYW50aHJvcGljLWFpL3Nkay92ZXJzaW9uLm1qcz8wMjE4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzAuNjUuMCc7IC8vIHgtcmVsZWFzZS1wbGVhc2UtdmVyc2lvblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/@anthropic-ai/sdk/version.mjs\n");

/***/ })

};
;