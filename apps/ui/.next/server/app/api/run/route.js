"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/run/route";
exports.ids = ["app/api/run/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "module":
/*!*************************!*\
  !*** external "module" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("module");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("process");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "readline":
/*!***************************!*\
  !*** external "readline" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("readline");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:child_process":
/*!*************************************!*\
  !*** external "node:child_process" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("node:child_process");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:diagnostics_channel":
/*!*******************************************!*\
  !*** external "node:diagnostics_channel" ***!
  \*******************************************/
/***/ ((module) => {

module.exports = require("node:diagnostics_channel");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:events");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:fs/promises":
/*!***********************************!*\
  !*** external "node:fs/promises" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:fs/promises");

/***/ }),

/***/ "node:os":
/*!**************************!*\
  !*** external "node:os" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:os");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frun%2Froute&page=%2Fapi%2Frun%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frun%2Froute.ts&appDir=%2FUsers%2Fbc%2FDesktop%2Fpip-agent-autonomous%2Fapps%2Fui%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbc%2FDesktop%2Fpip-agent-autonomous%2Fapps%2Fui&isDev=true&tsconfigPath=.%2Ftsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frun%2Froute&page=%2Fapi%2Frun%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frun%2Froute.ts&appDir=%2FUsers%2Fbc%2FDesktop%2Fpip-agent-autonomous%2Fapps%2Fui%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbc%2FDesktop%2Fpip-agent-autonomous%2Fapps%2Fui&isDev=true&tsconfigPath=.%2Ftsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_bc_Desktop_pip_agent_autonomous_apps_ui_app_api_run_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/run/route.ts */ \"(rsc)/./app/api/run/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/run/route\",\n        pathname: \"/api/run\",\n        filename: \"route\",\n        bundlePath: \"app/api/run/route\"\n    },\n    resolvedPagePath: \"/Users/bc/Desktop/pip-agent-autonomous/apps/ui/app/api/run/route.ts\",\n    nextConfigOutput,\n    userland: _Users_bc_Desktop_pip_agent_autonomous_apps_ui_app_api_run_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/run/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZydW4lMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnJ1biUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnJ1biUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmJjJTJGRGVza3RvcCUyRnBpcC1hZ2VudC1hdXRvbm9tb3VzJTJGYXBwcyUyRnVpJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmJjJTJGRGVza3RvcCUyRnBpcC1hZ2VudC1hdXRvbm9tb3VzJTJGYXBwcyUyRnVpJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPS4lMkZ0c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDbUI7QUFDaEc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLz81YTVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9iYy9EZXNrdG9wL3BpcC1hZ2VudC1hdXRvbm9tb3VzL2FwcHMvdWkvYXBwL2FwaS9ydW4vcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3J1bi9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3J1blwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcnVuL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2JjL0Rlc2t0b3AvcGlwLWFnZW50LWF1dG9ub21vdXMvYXBwcy91aS9hcHAvYXBpL3J1bi9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvcnVuL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frun%2Froute&page=%2Fapi%2Frun%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frun%2Froute.ts&appDir=%2FUsers%2Fbc%2FDesktop%2Fpip-agent-autonomous%2Fapps%2Fui%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbc%2FDesktop%2Fpip-agent-autonomous%2Fapps%2Fui&isDev=true&tsconfigPath=.%2Ftsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/run/route.ts":
/*!******************************!*\
  !*** ./app/api/run/route.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   dynamic: () => (/* binding */ dynamic),\n/* harmony export */   revalidate: () => (/* binding */ revalidate),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var _anthropic_ai_claude_agent_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @anthropic-ai/claude-agent-sdk */ \"(rsc)/../../node_modules/@anthropic-ai/claude-agent-sdk/sdk.mjs\");\n/* harmony import */ var _pip_mcp_geminiTranscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @pip/mcp/geminiTranscriber */ \"(rsc)/../../src/mcp/geminiTranscriber.ts\");\n/* harmony import */ var _pip_mcp_docxExporter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pip/mcp/docxExporter */ \"(rsc)/../../src/mcp/docxExporter.ts\");\n/* harmony import */ var _pip_mcp_pipGenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @pip/mcp/pipGenerator */ \"(rsc)/../../src/mcp/pipGenerator.ts\");\n/* harmony import */ var _pip_agents_policyJudge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @pip/agents/policyJudge */ \"(rsc)/../../src/agents/policyJudge.ts\");\n/* harmony import */ var _pip_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @pip/config */ \"(rsc)/../../src/config.ts\");\n/* harmony import */ var _pip_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @pip/types */ \"(rsc)/../../src/types/index.ts\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(node_fs__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(node_path__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\nconst runtime = \"nodejs\";\nconst dynamic = \"force-dynamic\";\nconst revalidate = 0;\nconst MCP_SERVERS = {\n    \"gemini-transcriber\": _pip_mcp_geminiTranscriber__WEBPACK_IMPORTED_MODULE_1__.geminiTranscriber,\n    \"pip-generator\": _pip_mcp_pipGenerator__WEBPACK_IMPORTED_MODULE_3__.pipGenerator,\n    \"docx-exporter\": _pip_mcp_docxExporter__WEBPACK_IMPORTED_MODULE_2__.docxExporter\n};\nconst ALLOWED_TOOLS = [\n    \"mcp__gemini-transcriber__transcribe_audio\",\n    \"mcp__pip-generator__draft_pip\",\n    \"mcp__docx-exporter__render_docx\"\n];\nfunction buildPipelinePrompt(params) {\n    const { audioPath, inputLanguage, outputLanguage, templatePath, outputPath, promptPath } = params;\n    const transcriptionArgsExample = {\n        audioPath,\n        inputLanguage,\n        outputLanguage,\n        diarize: true,\n        timestamps: true,\n        startChunk: 0\n    };\n    const pipDraftArgs = {\n        transcript: \"<REPLACE_WITH_TRANSCRIPT>\",\n        outputLanguage,\n        promptPath\n    };\n    const docxArgs = {\n        templatePath,\n        outputPath,\n        language: outputLanguage,\n        title: \"Performance Improvement Plan\",\n        body: \"<REPLACE_WITH_APPROVED_DRAFT>\"\n    };\n    return [\n        \"You are an autonomous pipeline operator. Use the available MCP tools to complete the PIP workflow.\",\n        \"TOOLS:\",\n        \"- mcp__gemini-transcriber__transcribe_audio → transcribe audio meeting recordings.\",\n        \"- mcp__pip-generator__draft_pip → create a draft PIP from a transcript.\",\n        \"- mcp__docx-exporter__render_docx → produce the final DOCX file.\",\n        \"STEPS:\",\n        `1. Initialize CURRENT_CHUNK=0 and TRANSCRIPTS=[] (strings). Call transcription with:\\n${JSON.stringify(transcriptionArgsExample, null, 2)}`,\n        \"   Append transcripts, merge segments. Loop until nextChunk is null.\",\n        `2. Call PIP generator with:\\n${JSON.stringify(pipDraftArgs, null, 2)}\\n   Set CURRENT_DRAFT.`,\n        `3. Send CURRENT_DRAFT to subagent \\\"policy-judge\\\" for review. Iterate up to ${_pip_config__WEBPACK_IMPORTED_MODULE_5__.MAX_REVIEW_ROUNDS}.`,\n        `4. When approved, set APPROVED_DRAFT and call docx exporter with:\\n${JSON.stringify(docxArgs, null, 2)}`,\n        `5. Respond ONLY with JSON: {\"status\":\"ok\",\"draft\":APPROVED_DRAFT,\"docx\":\"${outputPath}\"}`\n    ].join(\"\\n\\n\");\n}\nfunction pushUsage(cost, message) {\n    if (!(0,_pip_types__WEBPACK_IMPORTED_MODULE_6__.hasUsage)(message) || !message.usage) return;\n    cost.input += message.usage.input_tokens || 0;\n    cost.output += message.usage.output_tokens || 0;\n    cost.cacheCreate += message.usage.cache_creation_input_tokens || 0;\n    cost.cacheRead += message.usage.cache_read_input_tokens || 0;\n}\nfunction sseLine(event, data) {\n    return `event: ${event}\\ndata: ${JSON.stringify(data)}\\n\\n`;\n}\nfunction toSerializableError(error) {\n    if (error instanceof Error) {\n        return {\n            name: error.name,\n            message: error.message,\n            stack: error.stack\n        };\n    }\n    if (typeof error === \"object\" && error !== null) {\n        try {\n            return JSON.parse(JSON.stringify(error));\n        } catch  {\n            return {\n                message: String(error)\n            };\n        }\n    }\n    return {\n        message: String(error)\n    };\n}\nasync function GET(req) {\n    const search = req.nextUrl.searchParams;\n    const audioParam = search.get(\"audio\") ?? \"uploads/meeting.mp3\";\n    const inputLanguage = search.get(\"in\") ?? \"auto\";\n    const outputLanguage = search.get(\"out\") ?? \"en\";\n    const templateParam = search.get(\"template\") ?? \"templates/pip-template.docx\";\n    const outputParam = search.get(\"outdoc\") ?? `exports/pip-${Date.now()}.docx`;\n    const encoder = new TextEncoder();\n    const projectRoot = node_path__WEBPACK_IMPORTED_MODULE_8___default().resolve(process.cwd(), \"../..\");\n    const guidelinesPath = node_path__WEBPACK_IMPORTED_MODULE_8___default().resolve(projectRoot, _pip_config__WEBPACK_IMPORTED_MODULE_5__.GUIDELINES_PATH);\n    const promptPathDefault = node_path__WEBPACK_IMPORTED_MODULE_8___default().resolve(projectRoot, _pip_config__WEBPACK_IMPORTED_MODULE_5__.PIP_PROMPT_PATH);\n    const stream = new ReadableStream({\n        async start (controller) {\n            const write = (event, data)=>{\n                controller.enqueue(encoder.encode(sseLine(event, data)));\n            };\n            const sendStatus = (step, status, meta)=>{\n                if (meta && Object.keys(meta).length > 0) {\n                    write(\"status\", {\n                        step,\n                        status,\n                        meta\n                    });\n                } else {\n                    write(\"status\", {\n                        step,\n                        status\n                    });\n                }\n            };\n            const closeWithError = (error)=>{\n                write(\"error\", {\n                    message: error instanceof Error ? error.message : \"Unknown error\",\n                    details: toSerializableError(error)\n                });\n                controller.close();\n            };\n            const cost = {\n                input: 0,\n                output: 0,\n                cacheCreate: 0,\n                cacheRead: 0\n            };\n            try {\n                const audioPath = node_path__WEBPACK_IMPORTED_MODULE_8___default().resolve(projectRoot, audioParam);\n                const templatePath = node_path__WEBPACK_IMPORTED_MODULE_8___default().resolve(projectRoot, templateParam);\n                const outputPath = node_path__WEBPACK_IMPORTED_MODULE_8___default().resolve(projectRoot, outputParam);\n                const promptPath = node_path__WEBPACK_IMPORTED_MODULE_8___default().resolve(projectRoot, promptPathDefault);\n                const judgeGuidelines = node_fs__WEBPACK_IMPORTED_MODULE_7___default().readFileSync(guidelinesPath, \"utf-8\");\n                const judgeAgent = (0,_pip_agents_policyJudge__WEBPACK_IMPORTED_MODULE_4__.makePolicyJudgeAgent)(judgeGuidelines, outputLanguage);\n                sendStatus(\"transcribe\", \"running\");\n                const iterator = (0,_anthropic_ai_claude_agent_sdk__WEBPACK_IMPORTED_MODULE_0__.query)({\n                    prompt: buildPipelinePrompt({\n                        audioPath,\n                        inputLanguage,\n                        outputLanguage,\n                        templatePath,\n                        outputPath,\n                        promptPath\n                    }),\n                    options: {\n                        model: _pip_config__WEBPACK_IMPORTED_MODULE_5__.MODELS.CLAUDE_SONNET,\n                        agents: {\n                            \"policy-judge\": judgeAgent\n                        },\n                        mcpServers: MCP_SERVERS,\n                        allowedTools: ALLOWED_TOOLS,\n                        permissionMode: \"bypassPermissions\",\n                        maxTurns: _pip_config__WEBPACK_IMPORTED_MODULE_5__.MAX_TURNS\n                    }\n                });\n                let judgeRound = 0;\n                try {\n                    for await (const message of iterator){\n                        pushUsage(cost, message);\n                        const totalTokens = cost.input + cost.output + cost.cacheCreate + cost.cacheRead;\n                        write(\"cost\", {\n                            summary: {\n                                totalTokens,\n                                estimatedCostUSD: totalTokens / 1000000,\n                                breakdown: {\n                                    ...cost\n                                }\n                            }\n                        });\n                        if ((0,_pip_types__WEBPACK_IMPORTED_MODULE_6__.isSystemMessage)(message) && \"sessionId\" in message) {\n                            const sessionId = message.sessionId;\n                            if (sessionId) {\n                                write(\"log\", {\n                                    level: \"info\",\n                                    message: `Session ${sessionId}`\n                                });\n                            }\n                        }\n                        if ((0,_pip_types__WEBPACK_IMPORTED_MODULE_6__.isStreamEvent)(message)) {\n                            const eventData = message.event;\n                            if ((0,_pip_types__WEBPACK_IMPORTED_MODULE_6__.isToolUseEvent)(eventData)) {\n                                write(\"tool_use\", {\n                                    name: eventData.name,\n                                    input: eventData.input\n                                });\n                                if (eventData.name.includes(\"gemini-transcriber\")) {\n                                    sendStatus(\"transcribe\", \"running\");\n                                } else if (eventData.name.includes(\"pip-generator\")) {\n                                    sendStatus(\"transcribe\", \"success\");\n                                    sendStatus(\"draft\", \"running\");\n                                } else if (eventData.name.includes(\"docx-exporter\")) {\n                                    sendStatus(\"draft\", \"success\");\n                                    sendStatus(\"review\", \"success\");\n                                    sendStatus(\"export\", \"running\");\n                                }\n                                if (eventData.name === \"TodoWrite\" && eventData.input && typeof eventData.input === \"object\") {\n                                    const todos = eventData.input.todos;\n                                    if (Array.isArray(todos)) {\n                                        write(\"todo\", {\n                                            todos\n                                        });\n                                    }\n                                }\n                            }\n                            if ((0,_pip_types__WEBPACK_IMPORTED_MODULE_6__.isToolResultEvent)(eventData)) {\n                                const resultData = {\n                                    name: eventData.name,\n                                    isError: eventData.isError,\n                                    content: eventData.content\n                                };\n                                write(\"tool_result\", resultData);\n                                const payload = resultData.content;\n                                const textPart = Array.isArray(payload) ? payload.find((item)=>typeof item?.text === \"string\")?.text : typeof payload === \"string\" ? payload : null;\n                                if (typeof textPart === \"string\") {\n                                    try {\n                                        const parsed = JSON.parse(textPart);\n                                        if (typeof parsed.transcript === \"string\") {\n                                            write(\"transcript_chunk\", {\n                                                transcript: parsed.transcript.slice(0, 1500),\n                                                processedChunks: parsed.processedChunks ?? 0,\n                                                totalChunks: parsed.totalChunks ?? 0\n                                            });\n                                        }\n                                    } catch  {\n                                    // Ignore non-JSON payloads\n                                    }\n                                }\n                                if (resultData.isError) {\n                                    write(\"error\", {\n                                        message: \"Tool error\",\n                                        details: toSerializableError(resultData.content)\n                                    });\n                                }\n                            }\n                            if (eventData && typeof eventData === \"object\") {\n                                const jsonFields = \"delta\" in eventData ? eventData.delta : undefined;\n                                const maybeText = typeof jsonFields === \"string\" ? jsonFields : typeof eventData.content === \"string\" ? eventData.content : undefined;\n                                const candidate = maybeText && maybeText.trim().startsWith(\"{\") ? maybeText : undefined;\n                                if (candidate) {\n                                    try {\n                                        const verdict = JSON.parse(candidate);\n                                        if (typeof verdict.approved === \"boolean\") {\n                                            judgeRound += 1;\n                                            write(\"judge_round\", {\n                                                approved: verdict.approved,\n                                                reasons: verdict.reasons ?? [],\n                                                required_changes: verdict.required_changes ?? [],\n                                                revised_draft: verdict.revised_draft ?? null,\n                                                round: judgeRound\n                                            });\n                                            sendStatus(\"review\", verdict.approved ? \"success\" : \"running\", {\n                                                round: judgeRound\n                                            });\n                                        }\n                                    } catch  {\n                                    // Ignore JSON parse issues\n                                    }\n                                }\n                            }\n                        }\n                        if (message.type === \"result\") {\n                            if (message.subtype === \"success\") {\n                                const rawResult = message.result;\n                                let payload = rawResult;\n                                if (typeof rawResult === \"string\") {\n                                    // Strip markdown code fences (e.g., ```json ... ```) before parsing\n                                    // This handles cases where the agent wraps JSON in markdown blocks\n                                    const cleaned = rawResult.replace(/```json\\s*|```/g, \"\").trim();\n                                    try {\n                                        payload = JSON.parse(cleaned);\n                                    } catch  {\n                                    // leave as string\n                                    }\n                                }\n                                if (payload && typeof payload === \"object\" && payload.status === \"ok\") {\n                                    const draft = payload.draft ?? \"\";\n                                    const docx = payload.docx ?? outputPath;\n                                    sendStatus(\"export\", \"success\");\n                                    const docxRelative = node_path__WEBPACK_IMPORTED_MODULE_8___default().relative(projectRoot, docx);\n                                    write(\"final\", {\n                                        ok: true,\n                                        draft,\n                                        docx,\n                                        docxRelative\n                                    });\n                                } else {\n                                    write(\"error\", {\n                                        message: \"Pipeline failed\",\n                                        details: payload ?? rawResult\n                                    });\n                                }\n                            } else {\n                                write(\"error\", {\n                                    message: \"Run error\",\n                                    details: toSerializableError(message)\n                                });\n                            }\n                        }\n                    }\n                } catch (workerError) {\n                    // Worker crashed - check if output was created anyway\n                    write(\"log\", {\n                        level: \"warn\",\n                        message: \"Worker process encountered an error, checking for output file...\"\n                    });\n                    if (node_fs__WEBPACK_IMPORTED_MODULE_7___default().existsSync(outputPath)) {\n                        const stats = node_fs__WEBPACK_IMPORTED_MODULE_7___default().statSync(outputPath);\n                        if (stats.size > 1000) {\n                            write(\"log\", {\n                                level: \"info\",\n                                message: \"Output file was created successfully despite worker error\"\n                            });\n                            sendStatus(\"export\", \"success\");\n                            const docxRelative = node_path__WEBPACK_IMPORTED_MODULE_8___default().relative(projectRoot, outputPath);\n                            write(\"final\", {\n                                ok: true,\n                                docx: outputPath,\n                                docxRelative,\n                                recovered: true\n                            });\n                            controller.close();\n                            return;\n                        }\n                    }\n                    // If no output file, report the error\n                    closeWithError(workerError);\n                    return;\n                }\n            } catch (error) {\n                closeWithError(error);\n                return;\n            }\n            controller.close();\n        }\n    });\n    return new Response(stream, {\n        headers: {\n            \"Content-Type\": \"text/event-stream; charset=utf-8\",\n            \"Cache-Control\": \"no-cache, no-transform\",\n            Connection: \"keep-alive\",\n            \"X-Accel-Buffering\": \"no\"\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/run/route.ts\n");

/***/ }),

/***/ "(rsc)/../../src/agents/policyJudge.ts":
/*!***************************************!*\
  !*** ../../src/agents/policyJudge.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makePolicyJudgeAgent: () => (/* binding */ makePolicyJudgeAgent)\n/* harmony export */ });\nfunction makePolicyJudgeAgent(guidelinesText, outputLanguage) {\n    return {\n        description: \"Reviews a drafted PIP against company policy/guardrails and legal tone requirements.\",\n        model: \"inherit\",\n        tools: [],\n        prompt: `You are a meticulous HR policy judge.\nYou will receive a PIP DRAFT (plain text). Review it for: clarity, specificity, non-discrimination, measurable goals, reasonable timelines, and compliance with these guidelines:\n\nGUIDELINES (authoritative)\n--------------------------\n${guidelinesText}\n\nOUTPUT CONTRACT (JSON ONLY; no markdown, no prose):\n{\n  \"approved\": boolean,\n  \"reasons\": string[],\n  \"required_changes\": string[],\n  \"revised_draft\": string | null\n}\n\nRules:\n- If approved=false, propose a revised_draft that fixes issues while preserving the original structure and the author's intent when possible.\n- Always write in ${outputLanguage}.\n- Flag any personal names that cannot be confirmed as originating from the transcript and require replacing them with \"the employee\" unless the name is explicitly confirmed in the provided materials.\n- NEVER include names or sensitive details not present in the original transcript.\n`\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vc3JjL2FnZW50cy9wb2xpY3lKdWRnZS50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EscUJBQXFCQyxjQUFzQixFQUFFQyxjQUFzQjtJQUNqRixPQUFPO1FBQ0xDLGFBQWE7UUFDYkMsT0FBTztRQUNQQyxPQUFPLEVBQUU7UUFDVEMsUUFBUSxDQUFDOzs7OztBQUtiLEVBQUVMLGVBQWU7Ozs7Ozs7Ozs7OztrQkFZQyxFQUFFQyxlQUFlOzs7QUFHbkMsQ0FBQztJQUNDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLy4uLy4uL3NyYy9hZ2VudHMvcG9saWN5SnVkZ2UudHM/ZDVkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbWFrZVBvbGljeUp1ZGdlQWdlbnQoZ3VpZGVsaW5lc1RleHQ6IHN0cmluZywgb3V0cHV0TGFuZ3VhZ2U6IHN0cmluZykge1xuICByZXR1cm4ge1xuICAgIGRlc2NyaXB0aW9uOiBcIlJldmlld3MgYSBkcmFmdGVkIFBJUCBhZ2FpbnN0IGNvbXBhbnkgcG9saWN5L2d1YXJkcmFpbHMgYW5kIGxlZ2FsIHRvbmUgcmVxdWlyZW1lbnRzLlwiLFxuICAgIG1vZGVsOiBcImluaGVyaXRcIiBhcyBjb25zdCxcbiAgICB0b29sczogW10sXG4gICAgcHJvbXB0OiBgWW91IGFyZSBhIG1ldGljdWxvdXMgSFIgcG9saWN5IGp1ZGdlLlxuWW91IHdpbGwgcmVjZWl2ZSBhIFBJUCBEUkFGVCAocGxhaW4gdGV4dCkuIFJldmlldyBpdCBmb3I6IGNsYXJpdHksIHNwZWNpZmljaXR5LCBub24tZGlzY3JpbWluYXRpb24sIG1lYXN1cmFibGUgZ29hbHMsIHJlYXNvbmFibGUgdGltZWxpbmVzLCBhbmQgY29tcGxpYW5jZSB3aXRoIHRoZXNlIGd1aWRlbGluZXM6XG5cbkdVSURFTElORVMgKGF1dGhvcml0YXRpdmUpXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJHtndWlkZWxpbmVzVGV4dH1cblxuT1VUUFVUIENPTlRSQUNUIChKU09OIE9OTFk7IG5vIG1hcmtkb3duLCBubyBwcm9zZSk6XG57XG4gIFwiYXBwcm92ZWRcIjogYm9vbGVhbixcbiAgXCJyZWFzb25zXCI6IHN0cmluZ1tdLFxuICBcInJlcXVpcmVkX2NoYW5nZXNcIjogc3RyaW5nW10sXG4gIFwicmV2aXNlZF9kcmFmdFwiOiBzdHJpbmcgfCBudWxsXG59XG5cblJ1bGVzOlxuLSBJZiBhcHByb3ZlZD1mYWxzZSwgcHJvcG9zZSBhIHJldmlzZWRfZHJhZnQgdGhhdCBmaXhlcyBpc3N1ZXMgd2hpbGUgcHJlc2VydmluZyB0aGUgb3JpZ2luYWwgc3RydWN0dXJlIGFuZCB0aGUgYXV0aG9yJ3MgaW50ZW50IHdoZW4gcG9zc2libGUuXG4tIEFsd2F5cyB3cml0ZSBpbiAke291dHB1dExhbmd1YWdlfS5cbi0gRmxhZyBhbnkgcGVyc29uYWwgbmFtZXMgdGhhdCBjYW5ub3QgYmUgY29uZmlybWVkIGFzIG9yaWdpbmF0aW5nIGZyb20gdGhlIHRyYW5zY3JpcHQgYW5kIHJlcXVpcmUgcmVwbGFjaW5nIHRoZW0gd2l0aCBcInRoZSBlbXBsb3llZVwiIHVubGVzcyB0aGUgbmFtZSBpcyBleHBsaWNpdGx5IGNvbmZpcm1lZCBpbiB0aGUgcHJvdmlkZWQgbWF0ZXJpYWxzLlxuLSBORVZFUiBpbmNsdWRlIG5hbWVzIG9yIHNlbnNpdGl2ZSBkZXRhaWxzIG5vdCBwcmVzZW50IGluIHRoZSBvcmlnaW5hbCB0cmFuc2NyaXB0LlxuYFxuICB9O1xufVxuIl0sIm5hbWVzIjpbIm1ha2VQb2xpY3lKdWRnZUFnZW50IiwiZ3VpZGVsaW5lc1RleHQiLCJvdXRwdXRMYW5ndWFnZSIsImRlc2NyaXB0aW9uIiwibW9kZWwiLCJ0b29scyIsInByb21wdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../src/agents/policyJudge.ts\n");

/***/ }),

/***/ "(rsc)/../../src/config.ts":
/*!***************************!*\
  !*** ../../src/config.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALLOWED_AUDIO_EXTENSIONS: () => (/* binding */ ALLOWED_AUDIO_EXTENSIONS),\n/* harmony export */   ALLOWED_OUTPUT_EXTENSIONS: () => (/* binding */ ALLOWED_OUTPUT_EXTENSIONS),\n/* harmony export */   ALLOWED_TEMPLATE_EXTENSIONS: () => (/* binding */ ALLOWED_TEMPLATE_EXTENSIONS),\n/* harmony export */   ANTHROPIC_API_KEY: () => (/* binding */ ANTHROPIC_API_KEY),\n/* harmony export */   GEMINI_API_KEY: () => (/* binding */ GEMINI_API_KEY),\n/* harmony export */   GEMINI_CHUNK_SECONDS: () => (/* binding */ GEMINI_CHUNK_SECONDS),\n/* harmony export */   GEMINI_INPUT_MODE: () => (/* binding */ GEMINI_INPUT_MODE),\n/* harmony export */   GEMINI_SINGLE_PASS_MAX: () => (/* binding */ GEMINI_SINGLE_PASS_MAX),\n/* harmony export */   GEMINI_TRANSCRIBE_CONCURRENCY: () => (/* binding */ GEMINI_TRANSCRIBE_CONCURRENCY),\n/* harmony export */   GEMINI_TRANSCRIBE_RETRIES: () => (/* binding */ GEMINI_TRANSCRIBE_RETRIES),\n/* harmony export */   GUIDELINES_PATH: () => (/* binding */ GUIDELINES_PATH),\n/* harmony export */   LOG_LEVEL: () => (/* binding */ LOG_LEVEL),\n/* harmony export */   LOG_PRETTY: () => (/* binding */ LOG_PRETTY),\n/* harmony export */   MAX_PATH_LENGTH: () => (/* binding */ MAX_PATH_LENGTH),\n/* harmony export */   MAX_REVIEW_ROUNDS: () => (/* binding */ MAX_REVIEW_ROUNDS),\n/* harmony export */   MAX_TURNS: () => (/* binding */ MAX_TURNS),\n/* harmony export */   MODELS: () => (/* binding */ MODELS),\n/* harmony export */   PIP_MAX_OUTPUT_TOKENS: () => (/* binding */ PIP_MAX_OUTPUT_TOKENS),\n/* harmony export */   PIP_PROMPT_PATH: () => (/* binding */ PIP_PROMPT_PATH),\n/* harmony export */   PIP_TEMPERATURE: () => (/* binding */ PIP_TEMPERATURE),\n/* harmony export */   PRICING: () => (/* binding */ PRICING),\n/* harmony export */   S3_BUCKET: () => (/* binding */ S3_BUCKET),\n/* harmony export */   S3_DELETE_AFTER: () => (/* binding */ S3_DELETE_AFTER),\n/* harmony export */   S3_PREFIX: () => (/* binding */ S3_PREFIX),\n/* harmony export */   S3_PRESIGN_TTL_SECONDS: () => (/* binding */ S3_PRESIGN_TTL_SECONDS),\n/* harmony export */   S3_PROFILE: () => (/* binding */ S3_PROFILE),\n/* harmony export */   getConfigSummary: () => (/* binding */ getConfigSummary),\n/* harmony export */   getConfigValue: () => (/* binding */ getConfigValue),\n/* harmony export */   isValidAnthropicKeyFormat: () => (/* binding */ isValidAnthropicKeyFormat),\n/* harmony export */   isValidGeminiKeyFormat: () => (/* binding */ isValidGeminiKeyFormat),\n/* harmony export */   parseCliArgs: () => (/* binding */ parseCliArgs),\n/* harmony export */   validateRequiredConfig: () => (/* binding */ validateRequiredConfig)\n/* harmony export */ });\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dotenv/config */ \"(rsc)/../../node_modules/dotenv/config.js\");\n/* harmony import */ var dotenv_config__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dotenv_config__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Centralized Configuration Module\n *\n * This module consolidates all configuration values from environment variables,\n * default values, and constants used throughout the application.\n *\n * All configuration should be imported from this module rather than reading\n * process.env directly or using inline constants.\n */ \n// ============================================================================\n// API Keys\n// ============================================================================\n/**\n * Anthropic API key for Claude models\n * Required for main agent and PIP generation\n */ const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;\n/**\n * Gemini API key for transcription services\n * Required for audio transcription\n */ const GEMINI_API_KEY = process.env.GEMINI_API_KEY;\n// ============================================================================\n// API Key Format Validation\n// ============================================================================\n/**\n * Validates the format of an Anthropic API key\n * Anthropic keys follow the pattern: sk-ant-api03-...\n *\n * @param key - The API key to validate\n * @returns True if the key format is valid\n *\n * @security Validates key format to catch configuration errors early\n */ function isValidAnthropicKeyFormat(key) {\n    if (!key || typeof key !== \"string\") return false;\n    // Anthropic keys start with sk-ant- and have at least 40 characters\n    return key.startsWith(\"sk-ant-\") && key.length >= 40;\n}\n/**\n * Validates the format of a Google Gemini API key\n * Gemini keys follow the pattern: AIza... (39 characters total)\n *\n * @param key - The API key to validate\n * @returns True if the key format is valid\n *\n * @security Validates key format to catch configuration errors early\n */ function isValidGeminiKeyFormat(key) {\n    if (!key || typeof key !== \"string\") return false;\n    // Gemini keys start with AIza and are typically 39 characters\n    return key.startsWith(\"AIza\") && key.length >= 35;\n}\n// ============================================================================\n// Model Configuration\n// ============================================================================\n/**\n * Model identifiers and names\n */ const MODELS = {\n    /**\n   * Main Claude model for orchestration and PIP generation\n   * Default: claude-sonnet-4-5-20250929\n   */ CLAUDE_SONNET: process.env.CLAUDE_MODEL_ID || \"claude-sonnet-4-5-20250929\",\n    /**\n   * Claude model specifically for PIP generation (overrides main model if set)\n   * Falls back to CLAUDE_SONNET if not specified\n   */ CLAUDE_PIP: process.env.CLAUDE_PIP_MODEL_ID || process.env.CLAUDE_MODEL_ID || \"claude-sonnet-4-5-20250929\",\n    /**\n   * Gemini model for audio transcription\n   * Default: gemini-2.5-pro\n   */ GEMINI_PRO: process.env.GEMINI_TRANSCRIBE_MODEL || \"gemini-2.5-pro\"\n};\n// ============================================================================\n// Claude Model Parameters\n// ============================================================================\n/**\n * Temperature for PIP generation (0-1)\n * Lower values = more focused and deterministic\n * Higher values = more creative and varied\n * Default: 0.2\n */ const PIP_TEMPERATURE = Number.isFinite(Number(process.env.PIP_TEMPERATURE)) ? Number(process.env.PIP_TEMPERATURE) : 0.2;\n/**\n * Maximum output tokens for PIP generation\n * Default: 4096\n */ const PIP_MAX_OUTPUT_TOKENS = Number.isFinite(Number(process.env.PIP_MAX_OUTPUT_TOKENS)) ? Number(process.env.PIP_MAX_OUTPUT_TOKENS) : 4096;\n// ============================================================================\n// Pipeline Configuration\n// ============================================================================\n/**\n * Maximum number of review rounds with policy judge\n * After this many attempts, pipeline will fail if not approved\n * Default: 2\n */ const MAX_REVIEW_ROUNDS = Number(process.env.MAX_REVIEW_ROUNDS || 2);\n/**\n * Maximum turns allowed for the main agent orchestration\n * Default: 60\n */ const MAX_TURNS = 60;\n// ============================================================================\n// Logging Configuration\n// ============================================================================\n/**\n * Log level for the application\n * Valid values: 'trace', 'debug', 'info', 'warn', 'error', 'fatal', 'silent'\n * Default: 'info'\n */ const LOG_LEVEL = process.env.LOG_LEVEL || \"info\";\n/**\n * Enable pretty printing for logs (development mode)\n * In production (NODE_ENV=production), logs are always JSON\n * Default: true in development, false in production\n */ const LOG_PRETTY = \"development\" !== \"production\";\n// ============================================================================\n// Transcription Configuration\n// ============================================================================\n/**\n * Default chunk duration in seconds for long audio files\n * Audio longer than MAX_SINGLE_DURATION will be split into chunks of this size\n * Default: 30 seconds (minimum 10)\n */ const GEMINI_CHUNK_SECONDS = Math.max(10, Number(process.env.GEMINI_CHUNK_SECONDS || 30));\n/**\n * Maximum duration (in seconds) for single-pass transcription\n * Audio longer than this will be automatically chunked\n * Default: 45 seconds\n */ const GEMINI_SINGLE_PASS_MAX = Number(process.env.GEMINI_SINGLE_PASS_MAX || 45);\n/**\n * Concurrency for parallel chunk transcription\n * Number of chunks to transcribe simultaneously\n * Default: 4 (minimum 1)\n */ const GEMINI_TRANSCRIBE_CONCURRENCY = Math.max(1, Number(process.env.GEMINI_TRANSCRIBE_CONCURRENCY || 4));\n/**\n * Number of retries for failed transcription attempts\n * Default: 2 (minimum 0)\n */ const GEMINI_TRANSCRIBE_RETRIES = Math.max(0, Number(process.env.GEMINI_TRANSCRIBE_RETRIES || 2));\n// ============================================================================\n// S3 + Presigned URL Configuration\n// ============================================================================\n/**\n * AWS CLI profile to use for S3 ops\n * Default: BCRoot (per user instruction)\n */ const S3_PROFILE = process.env.S3_PROFILE || \"BCRoot\";\n/**\n * Target S3 bucket for audio uploads\n * If unset, the app may attempt to create one on the fly\n */ const S3_BUCKET = process.env.S3_BUCKET;\n/**\n * Optional key prefix for uploaded audio objects (no leading slash)\n * Default: \"audio\"\n */ const S3_PREFIX = (process.env.S3_PREFIX || \"audio\").replace(/^\\/+|\\/+$/g, \"\");\n/**\n * TTL for presigned URLs in seconds\n * Default: 3600\n */ const S3_PRESIGN_TTL_SECONDS = Math.max(60, Number(process.env.S3_PRESIGN_TTL_SECONDS || 3600));\n/**\n * Whether to delete S3 object after transcription completes\n * Default: true\n */ const S3_DELETE_AFTER = String(process.env.S3_DELETE_AFTER || \"true\").toLowerCase() === \"true\";\n/**\n * Input mode for Gemini file ingestion\n * - \"presigned\" → Upload to S3 and pass presigned URL to Gemini (preferred)\n * - \"upload\"    → Upload file to Gemini via SDK\n * Default: \"presigned\"\n */ const GEMINI_INPUT_MODE = (process.env.GEMINI_INPUT_MODE || \"presigned\").toLowerCase();\n// ============================================================================\n// File Paths\n// ============================================================================\n/**\n * Default path to the PIP drafting prompt template\n * Default: prompts/draft-pip.txt\n */ const PIP_PROMPT_PATH = process.env.PIP_PROMPT_PATH || \"prompts/draft-pip.txt\";\n/**\n * Default path to company policy guidelines\n * Default: policies/guidelines.txt\n */ const GUIDELINES_PATH = \"policies/guidelines.txt\";\n// ============================================================================\n// Security Configuration\n// ============================================================================\n/**\n * Maximum allowed path length in characters\n * Prevents buffer overflow and extremely long path attacks\n * Default: 4096 (standard on most Unix systems)\n */ const MAX_PATH_LENGTH = 4096;\n/**\n * Allowed audio file extensions for transcription\n * Whitelist of safe audio formats supported by ffmpeg/Gemini\n *\n * @security This whitelist prevents uploading malicious file types\n */ const ALLOWED_AUDIO_EXTENSIONS = [\n    \".mp3\",\n    \".wav\",\n    \".flac\",\n    \".m4a\",\n    \".aac\",\n    \".ogg\",\n    \".opus\",\n    \".wma\",\n    \".aiff\",\n    \".ape\",\n    \".ac3\"\n];\n/**\n * Allowed document template extensions\n * Whitelist of safe document formats for templates\n *\n * @security This whitelist prevents template injection attacks\n */ const ALLOWED_TEMPLATE_EXTENSIONS = [\n    \".docx\"\n];\n/**\n * Allowed output document extensions\n * Whitelist of safe document formats for output\n */ const ALLOWED_OUTPUT_EXTENSIONS = [\n    \".docx\"\n];\n// ============================================================================\n// Pricing Constants\n// ============================================================================\n/**\n * Claude API pricing as of January 2025\n * Source: https://www.anthropic.com/pricing\n *\n * Update these values when pricing changes to maintain accurate cost tracking.\n */ const PRICING = {\n    /**\n   * Cost per million input tokens (MTK)\n   * $3.00 per MTK as of January 2025\n   */ INPUT_PER_MTK: 3.0,\n    /**\n   * Cost per million output tokens (MTK)\n   * $15.00 per MTK as of January 2025\n   */ OUTPUT_PER_MTK: 15.0,\n    /**\n   * Cost per million tokens for cache creation (prompt caching)\n   * $3.75 per MTK as of January 2025\n   */ CACHE_CREATION_PER_MTK: 3.75,\n    /**\n   * Cost per million tokens for cache reads (prompt caching)\n   * $0.30 per MTK as of January 2025\n   */ CACHE_READ_PER_MTK: 0.30\n};\n// ============================================================================\n// CLI Argument Parsing Utilities\n// ============================================================================\n/**\n * Parse command-line arguments in the format --key value\n * Returns a Map of argument keys to values\n */ function parseCliArgs() {\n    const args = new Map();\n    const tokens = process.argv.slice(2);\n    for(let i = 0; i < tokens.length; i++){\n        const token = tokens[i];\n        if (!token.startsWith(\"--\")) {\n            continue;\n        }\n        const trimmed = token.slice(2);\n        if (!trimmed) {\n            continue;\n        }\n        const equalsIndex = trimmed.indexOf(\"=\");\n        if (equalsIndex !== -1) {\n            const key = trimmed.slice(0, equalsIndex);\n            const value = trimmed.slice(equalsIndex + 1);\n            args.set(key, value || \"true\");\n            continue;\n        }\n        const nextToken = tokens[i + 1];\n        if (!nextToken || nextToken.startsWith(\"--\")) {\n            args.set(trimmed, \"true\");\n            continue;\n        }\n        args.set(trimmed, nextToken);\n        i += 1;\n    }\n    return args;\n}\n/**\n * Get a configuration value from CLI args, environment, or default\n * Priority: CLI args > environment > default\n */ function getConfigValue(cliArgs, cliKey, envKey, defaultValue) {\n    return cliArgs.get(cliKey) || process.env[envKey] || defaultValue;\n}\n// ============================================================================\n// Validation\n// ============================================================================\n/**\n * Validate that required API keys are present and properly formatted\n * @returns Validation result with list of errors if any\n *\n * @security Validates both presence and format of API keys to catch\n * configuration errors early before making API calls\n */ function validateRequiredConfig() {\n    const errors = [];\n    if (!ANTHROPIC_API_KEY) {\n        errors.push(\"Missing ANTHROPIC_API_KEY in environment\");\n    } else if (!isValidAnthropicKeyFormat(ANTHROPIC_API_KEY)) {\n        errors.push(\"Invalid ANTHROPIC_API_KEY format. Expected format: sk-ant-api03-... (at least 40 characters). \" + \"Please check your API key from https://console.anthropic.com/\");\n    }\n    if (!GEMINI_API_KEY) {\n        errors.push(\"Missing GEMINI_API_KEY in environment\");\n    } else if (!isValidGeminiKeyFormat(GEMINI_API_KEY)) {\n        errors.push(\"Invalid GEMINI_API_KEY format. Expected format: AIza... (at least 35 characters). \" + \"Please check your API key from https://aistudio.google.com/app/apikey\");\n    }\n    return {\n        valid: errors.length === 0,\n        errors\n    };\n}\n// ============================================================================\n// Configuration Summary\n// ============================================================================\n/**\n * Get a summary of the current configuration\n * Useful for debugging and logging\n */ function getConfigSummary() {\n    return {\n        models: {\n            claude: MODELS.CLAUDE_SONNET,\n            claudePip: MODELS.CLAUDE_PIP,\n            gemini: MODELS.GEMINI_PRO\n        },\n        pipeline: {\n            maxReviewRounds: MAX_REVIEW_ROUNDS,\n            maxTurns: MAX_TURNS\n        },\n        transcription: {\n            chunkSeconds: GEMINI_CHUNK_SECONDS,\n            singlePassMax: GEMINI_SINGLE_PASS_MAX,\n            concurrency: GEMINI_TRANSCRIBE_CONCURRENCY,\n            retries: GEMINI_TRANSCRIBE_RETRIES\n        },\n        pipGeneration: {\n            temperature: PIP_TEMPERATURE,\n            maxOutputTokens: PIP_MAX_OUTPUT_TOKENS,\n            promptPath: PIP_PROMPT_PATH\n        },\n        paths: {\n            pipPrompt: PIP_PROMPT_PATH,\n            guidelines: GUIDELINES_PATH\n        },\n        pricing: PRICING\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../src/config.ts\n");

/***/ }),

/***/ "(rsc)/../../src/errors/BaseError.ts":
/*!*************************************!*\
  !*** ../../src/errors/BaseError.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppError: () => (/* binding */ AppError)\n/* harmony export */ });\n/**\n * Base error class for all application errors.\n * Extends the native Error class with additional metadata for better error handling.\n */ /**\n * Base application error class.\n * All custom errors in the application should extend this class.\n */ class AppError extends Error {\n    /**\n   * Creates a new AppError instance.\n   *\n   * @param message - Human-readable error message\n   * @param code - Unique error code for identifying error types\n   * @param statusCode - HTTP-style status code (default: 500)\n   * @param metadata - Additional context about the error\n   * @param isOperational - Whether this is an expected/recoverable error (default: true)\n   */ constructor(message, code, statusCode = 500, metadata, isOperational = true){\n        super(message);\n        // Maintains proper stack trace for where our error was thrown (only available on V8)\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        this.name = this.constructor.name;\n        this.code = code;\n        this.statusCode = statusCode;\n        this.isOperational = isOperational;\n        this.metadata = metadata;\n        // Set the prototype explicitly to support instanceof checks\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n    /**\n   * Serializes the error to a JSON-safe object.\n   * Useful for logging and API responses.\n   *\n   * @returns JSON-serializable error object\n   */ toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            code: this.code,\n            statusCode: this.statusCode,\n            isOperational: this.isOperational,\n            metadata: this.metadata,\n            stack: this.stack\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vc3JjL2Vycm9ycy9CYXNlRXJyb3IudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Q0FHQyxHQU1EOzs7Q0FHQyxHQUNNLE1BQU1BLGlCQUFpQkM7SUF1QjVCOzs7Ozs7OztHQVFDLEdBQ0RDLFlBQ0VDLE9BQWUsRUFDZkMsSUFBWSxFQUNaQyxhQUFxQixHQUFHLEVBQ3hCQyxRQUF3QixFQUN4QkMsZ0JBQXlCLElBQUksQ0FDN0I7UUFDQSxLQUFLLENBQUNKO1FBRU4scUZBQXFGO1FBQ3JGLElBQUlGLE1BQU1PLGlCQUFpQixFQUFFO1lBQzNCUCxNQUFNTyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDTixXQUFXO1FBQ2hEO1FBRUEsSUFBSSxDQUFDTyxJQUFJLEdBQUcsSUFBSSxDQUFDUCxXQUFXLENBQUNPLElBQUk7UUFDakMsSUFBSSxDQUFDTCxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0UsYUFBYSxHQUFHQTtRQUNyQixJQUFJLENBQUNELFFBQVEsR0FBR0E7UUFFaEIsNERBQTREO1FBQzVESSxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVdDLFNBQVM7SUFDbEQ7SUFFQTs7Ozs7R0FLQyxHQUNEQyxTQUFrQztRQUNoQyxPQUFPO1lBQ0xKLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZOLFNBQVMsSUFBSSxDQUFDQSxPQUFPO1lBQ3JCQyxNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNmQyxZQUFZLElBQUksQ0FBQ0EsVUFBVTtZQUMzQkUsZUFBZSxJQUFJLENBQUNBLGFBQWE7WUFDakNELFVBQVUsSUFBSSxDQUFDQSxRQUFRO1lBQ3ZCUSxPQUFPLElBQUksQ0FBQ0EsS0FBSztRQUNuQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLy4uLy4uL3NyYy9lcnJvcnMvQmFzZUVycm9yLnRzP2FlZGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCYXNlIGVycm9yIGNsYXNzIGZvciBhbGwgYXBwbGljYXRpb24gZXJyb3JzLlxuICogRXh0ZW5kcyB0aGUgbmF0aXZlIEVycm9yIGNsYXNzIHdpdGggYWRkaXRpb25hbCBtZXRhZGF0YSBmb3IgYmV0dGVyIGVycm9yIGhhbmRsaW5nLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JNZXRhZGF0YSB7XG4gIFtrZXk6IHN0cmluZ106IHVua25vd247XG59XG5cbi8qKlxuICogQmFzZSBhcHBsaWNhdGlvbiBlcnJvciBjbGFzcy5cbiAqIEFsbCBjdXN0b20gZXJyb3JzIGluIHRoZSBhcHBsaWNhdGlvbiBzaG91bGQgZXh0ZW5kIHRoaXMgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBlcnJvciBjb2RlIGZvciBpZGVudGlmeWluZyBlcnJvciB0eXBlcy5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBjb2RlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEhUVFAtc3R5bGUgc3RhdHVzIGNvZGUgKGUuZy4sIDQwMCwgNTAwKS5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBzdGF0dXNDb2RlOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGlzIGlzIGFuIG9wZXJhdGlvbmFsIGVycm9yIChleHBlY3RlZC9yZWNvdmVyYWJsZSkgdnMgcHJvZ3JhbW1pbmcgZXJyb3IuXG4gICAqIE9wZXJhdGlvbmFsIGVycm9ycyAodHJ1ZSk6IG5ldHdvcmsgZmFpbHVyZXMsIHZhbGlkYXRpb24gZXJyb3JzLCBtaXNzaW5nIGZpbGVzLlxuICAgKiBQcm9ncmFtbWluZyBlcnJvcnMgKGZhbHNlKTogbnVsbCByZWZlcmVuY2UgZXJyb3JzLCB0eXBlIGVycm9ycywgbG9naWMgYnVncy5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBpc09wZXJhdGlvbmFsOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIG1ldGFkYXRhIGFib3V0IHRoZSBlcnJvci5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBtZXRhZGF0YT86IEVycm9yTWV0YWRhdGE7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgQXBwRXJyb3IgaW5zdGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSBtZXNzYWdlIC0gSHVtYW4tcmVhZGFibGUgZXJyb3IgbWVzc2FnZVxuICAgKiBAcGFyYW0gY29kZSAtIFVuaXF1ZSBlcnJvciBjb2RlIGZvciBpZGVudGlmeWluZyBlcnJvciB0eXBlc1xuICAgKiBAcGFyYW0gc3RhdHVzQ29kZSAtIEhUVFAtc3R5bGUgc3RhdHVzIGNvZGUgKGRlZmF1bHQ6IDUwMClcbiAgICogQHBhcmFtIG1ldGFkYXRhIC0gQWRkaXRpb25hbCBjb250ZXh0IGFib3V0IHRoZSBlcnJvclxuICAgKiBAcGFyYW0gaXNPcGVyYXRpb25hbCAtIFdoZXRoZXIgdGhpcyBpcyBhbiBleHBlY3RlZC9yZWNvdmVyYWJsZSBlcnJvciAoZGVmYXVsdDogdHJ1ZSlcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICBjb2RlOiBzdHJpbmcsXG4gICAgc3RhdHVzQ29kZTogbnVtYmVyID0gNTAwLFxuICAgIG1ldGFkYXRhPzogRXJyb3JNZXRhZGF0YSxcbiAgICBpc09wZXJhdGlvbmFsOiBib29sZWFuID0gdHJ1ZVxuICApIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgIC8vIE1haW50YWlucyBwcm9wZXIgc3RhY2sgdHJhY2UgZm9yIHdoZXJlIG91ciBlcnJvciB3YXMgdGhyb3duIChvbmx5IGF2YWlsYWJsZSBvbiBWOClcbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG4gICAgdGhpcy5pc09wZXJhdGlvbmFsID0gaXNPcGVyYXRpb25hbDtcbiAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XG5cbiAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBleHBsaWNpdGx5IHRvIHN1cHBvcnQgaW5zdGFuY2VvZiBjaGVja3NcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGVycm9yIHRvIGEgSlNPTi1zYWZlIG9iamVjdC5cbiAgICogVXNlZnVsIGZvciBsb2dnaW5nIGFuZCBBUEkgcmVzcG9uc2VzLlxuICAgKlxuICAgKiBAcmV0dXJucyBKU09OLXNlcmlhbGl6YWJsZSBlcnJvciBvYmplY3RcbiAgICovXG4gIHRvSlNPTigpOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1c0NvZGU6IHRoaXMuc3RhdHVzQ29kZSxcbiAgICAgIGlzT3BlcmF0aW9uYWw6IHRoaXMuaXNPcGVyYXRpb25hbCxcbiAgICAgIG1ldGFkYXRhOiB0aGlzLm1ldGFkYXRhLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2tcbiAgICB9O1xuICB9XG59XG4iXSwibmFtZXMiOlsiQXBwRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImNvZGUiLCJzdGF0dXNDb2RlIiwibWV0YWRhdGEiLCJpc09wZXJhdGlvbmFsIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJuYW1lIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJ0b0pTT04iLCJzdGFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../src/errors/BaseError.ts\n");

/***/ }),

/***/ "(rsc)/../../src/errors/index.ts":
/*!*********************************!*\
  !*** ../../src/errors/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppError: () => (/* reexport safe */ _BaseError_js__WEBPACK_IMPORTED_MODULE_0__.AppError),\n/* harmony export */   AudioValidationError: () => (/* binding */ AudioValidationError),\n/* harmony export */   ConfigurationError: () => (/* binding */ ConfigurationError),\n/* harmony export */   DocumentExportError: () => (/* binding */ DocumentExportError),\n/* harmony export */   PIPGenerationError: () => (/* binding */ PIPGenerationError),\n/* harmony export */   TranscriptionError: () => (/* binding */ TranscriptionError)\n/* harmony export */ });\n/* harmony import */ var _BaseError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseError.js */ \"(rsc)/../../src/errors/BaseError.ts\");\n/**\n * Custom error classes for the PIP Agent application.\n * All errors extend from AppError for consistent error handling.\n */ \n/**\n * Error thrown when audio file validation fails.\n * Used for: invalid formats, corrupted files, missing audio streams, zero duration.\n */ class AudioValidationError extends _BaseError_js__WEBPACK_IMPORTED_MODULE_0__.AppError {\n    constructor(message, metadata){\n        super(message, \"AUDIO_VALIDATION_ERROR\", 400, metadata, true);\n    }\n}\n/**\n * Error thrown when transcription fails.\n * Used for: Gemini API failures, invalid responses, file upload errors.\n */ class TranscriptionError extends _BaseError_js__WEBPACK_IMPORTED_MODULE_0__.AppError {\n    constructor(message, metadata){\n        super(message, \"TRANSCRIPTION_ERROR\", 500, metadata, true);\n    }\n}\n/**\n * Error thrown when PIP generation fails.\n * Used for: Claude API failures, empty drafts, prompt errors.\n */ class PIPGenerationError extends _BaseError_js__WEBPACK_IMPORTED_MODULE_0__.AppError {\n    constructor(message, metadata){\n        super(message, \"PIP_GENERATION_ERROR\", 500, metadata, true);\n    }\n}\n/**\n * Error thrown when DOCX export fails.\n * Used for: template rendering errors, file write failures, path issues.\n */ class DocumentExportError extends _BaseError_js__WEBPACK_IMPORTED_MODULE_0__.AppError {\n    constructor(message, metadata){\n        super(message, \"DOCUMENT_EXPORT_ERROR\", 500, metadata, true);\n    }\n}\n/**\n * Error thrown when configuration is missing or invalid.\n * Used for: missing API keys, invalid config values, missing required files.\n */ class ConfigurationError extends _BaseError_js__WEBPACK_IMPORTED_MODULE_0__.AppError {\n    constructor(message, metadata){\n        super(message, \"CONFIGURATION_ERROR\", 400, metadata, true);\n    }\n}\n// Re-export AppError for convenience\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vc3JjL2Vycm9ycy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7OztDQUdDLEdBRXdEO0FBRXpEOzs7Q0FHQyxHQUNNLE1BQU1DLDZCQUE2QkQsbURBQVFBO0lBQ2hERSxZQUFZQyxPQUFlLEVBQUVDLFFBQTRDLENBQUU7UUFDekUsS0FBSyxDQUNIRCxTQUNBLDBCQUNBLEtBQ0FDLFVBQ0E7SUFFSjtBQUNGO0FBRUE7OztDQUdDLEdBQ00sTUFBTUMsMkJBQTJCTCxtREFBUUE7SUFDOUNFLFlBQVlDLE9BQWUsRUFBRUMsUUFBd0IsQ0FBRTtRQUNyRCxLQUFLLENBQ0hELFNBQ0EsdUJBQ0EsS0FDQUMsVUFDQTtJQUVKO0FBQ0Y7QUFFQTs7O0NBR0MsR0FDTSxNQUFNRSwyQkFBMkJOLG1EQUFRQTtJQUM5Q0UsWUFBWUMsT0FBZSxFQUFFQyxRQUF3QixDQUFFO1FBQ3JELEtBQUssQ0FDSEQsU0FDQSx3QkFDQSxLQUNBQyxVQUNBO0lBRUo7QUFDRjtBQUVBOzs7Q0FHQyxHQUNNLE1BQU1HLDRCQUE0QlAsbURBQVFBO0lBQy9DRSxZQUFZQyxPQUFlLEVBQUVDLFFBQXdCLENBQUU7UUFDckQsS0FBSyxDQUNIRCxTQUNBLHlCQUNBLEtBQ0FDLFVBQ0E7SUFFSjtBQUNGO0FBRUE7OztDQUdDLEdBQ00sTUFBTUksMkJBQTJCUixtREFBUUE7SUFDOUNFLFlBQVlDLE9BQWUsRUFBRUMsUUFBd0IsQ0FBRTtRQUNyRCxLQUFLLENBQ0hELFNBQ0EsdUJBQ0EsS0FDQUMsVUFDQTtJQUVKO0FBQ0Y7QUFFQSxxQ0FBcUM7QUFDSyIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vc3JjL2Vycm9ycy9pbmRleC50cz81YmZmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3VzdG9tIGVycm9yIGNsYXNzZXMgZm9yIHRoZSBQSVAgQWdlbnQgYXBwbGljYXRpb24uXG4gKiBBbGwgZXJyb3JzIGV4dGVuZCBmcm9tIEFwcEVycm9yIGZvciBjb25zaXN0ZW50IGVycm9yIGhhbmRsaW5nLlxuICovXG5cbmltcG9ydCB7IEFwcEVycm9yLCBFcnJvck1ldGFkYXRhIH0gZnJvbSBcIi4vQmFzZUVycm9yLmpzXCI7XG5cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYXVkaW8gZmlsZSB2YWxpZGF0aW9uIGZhaWxzLlxuICogVXNlZCBmb3I6IGludmFsaWQgZm9ybWF0cywgY29ycnVwdGVkIGZpbGVzLCBtaXNzaW5nIGF1ZGlvIHN0cmVhbXMsIHplcm8gZHVyYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBBdWRpb1ZhbGlkYXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBtZXRhZGF0YT86IEVycm9yTWV0YWRhdGEgJiB7IGhpbnQ/OiBzdHJpbmcgfSkge1xuICAgIHN1cGVyKFxuICAgICAgbWVzc2FnZSxcbiAgICAgIFwiQVVESU9fVkFMSURBVElPTl9FUlJPUlwiLFxuICAgICAgNDAwLFxuICAgICAgbWV0YWRhdGEsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm9yIHRocm93biB3aGVuIHRyYW5zY3JpcHRpb24gZmFpbHMuXG4gKiBVc2VkIGZvcjogR2VtaW5pIEFQSSBmYWlsdXJlcywgaW52YWxpZCByZXNwb25zZXMsIGZpbGUgdXBsb2FkIGVycm9ycy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRyYW5zY3JpcHRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBtZXRhZGF0YT86IEVycm9yTWV0YWRhdGEpIHtcbiAgICBzdXBlcihcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBcIlRSQU5TQ1JJUFRJT05fRVJST1JcIixcbiAgICAgIDUwMCxcbiAgICAgIG1ldGFkYXRhLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvciB0aHJvd24gd2hlbiBQSVAgZ2VuZXJhdGlvbiBmYWlscy5cbiAqIFVzZWQgZm9yOiBDbGF1ZGUgQVBJIGZhaWx1cmVzLCBlbXB0eSBkcmFmdHMsIHByb21wdCBlcnJvcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQSVBHZW5lcmF0aW9uRXJyb3IgZXh0ZW5kcyBBcHBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZywgbWV0YWRhdGE/OiBFcnJvck1ldGFkYXRhKSB7XG4gICAgc3VwZXIoXG4gICAgICBtZXNzYWdlLFxuICAgICAgXCJQSVBfR0VORVJBVElPTl9FUlJPUlwiLFxuICAgICAgNTAwLFxuICAgICAgbWV0YWRhdGEsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm9yIHRocm93biB3aGVuIERPQ1ggZXhwb3J0IGZhaWxzLlxuICogVXNlZCBmb3I6IHRlbXBsYXRlIHJlbmRlcmluZyBlcnJvcnMsIGZpbGUgd3JpdGUgZmFpbHVyZXMsIHBhdGggaXNzdWVzLlxuICovXG5leHBvcnQgY2xhc3MgRG9jdW1lbnRFeHBvcnRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBtZXRhZGF0YT86IEVycm9yTWV0YWRhdGEpIHtcbiAgICBzdXBlcihcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBcIkRPQ1VNRU5UX0VYUE9SVF9FUlJPUlwiLFxuICAgICAgNTAwLFxuICAgICAgbWV0YWRhdGEsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVycm9yIHRocm93biB3aGVuIGNvbmZpZ3VyYXRpb24gaXMgbWlzc2luZyBvciBpbnZhbGlkLlxuICogVXNlZCBmb3I6IG1pc3NpbmcgQVBJIGtleXMsIGludmFsaWQgY29uZmlnIHZhbHVlcywgbWlzc2luZyByZXF1aXJlZCBmaWxlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbmZpZ3VyYXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBtZXRhZGF0YT86IEVycm9yTWV0YWRhdGEpIHtcbiAgICBzdXBlcihcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBcIkNPTkZJR1VSQVRJT05fRVJST1JcIixcbiAgICAgIDQwMCxcbiAgICAgIG1ldGFkYXRhLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH1cbn1cblxuLy8gUmUtZXhwb3J0IEFwcEVycm9yIGZvciBjb252ZW5pZW5jZVxuZXhwb3J0IHsgQXBwRXJyb3IgfSBmcm9tIFwiLi9CYXNlRXJyb3IuanNcIjtcbiJdLCJuYW1lcyI6WyJBcHBFcnJvciIsIkF1ZGlvVmFsaWRhdGlvbkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwibWV0YWRhdGEiLCJUcmFuc2NyaXB0aW9uRXJyb3IiLCJQSVBHZW5lcmF0aW9uRXJyb3IiLCJEb2N1bWVudEV4cG9ydEVycm9yIiwiQ29uZmlndXJhdGlvbkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../src/errors/index.ts\n");

/***/ }),

/***/ "(rsc)/../../src/mcp/docxExporter.ts":
/*!*************************************!*\
  !*** ../../src/mcp/docxExporter.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   docxExporter: () => (/* binding */ docxExporter)\n/* harmony export */ });\n/* harmony import */ var _anthropic_ai_claude_agent_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @anthropic-ai/claude-agent-sdk */ \"(rsc)/../../node_modules/@anthropic-ai/claude-agent-sdk/sdk.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/v3/types.js\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var pizzip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pizzip */ \"(rsc)/../../node_modules/pizzip/js/index.js\");\n/* harmony import */ var pizzip__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pizzip__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var docxtemplater__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! docxtemplater */ \"(rsc)/../../node_modules/docxtemplater/js/docxtemplater.js\");\n/* harmony import */ var docxtemplater__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(docxtemplater__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _utils_sanitize_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/sanitize.js */ \"(rsc)/../../src/utils/sanitize.ts\");\n/* harmony import */ var _utils_safe_stringify_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/safe-stringify.js */ \"(rsc)/../../src/utils/safe-stringify.ts\");\n/* harmony import */ var _utils_mcp_helpers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/mcp-helpers.js */ \"(rsc)/../../src/utils/mcp-helpers.ts\");\n/* harmony import */ var _utils_validation_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/validation.js */ \"(rsc)/../../src/utils/validation.ts\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../errors/index.js */ \"(rsc)/../../src/errors/index.ts\");\n/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/logger.js */ \"(rsc)/../../src/utils/logger.ts\");\n/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../types/index.js */ \"(rsc)/../../src/types/index.ts\");\n/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../services/index.js */ \"(rsc)/../../src/services/index.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst logger = (0,_utils_logger_js__WEBPACK_IMPORTED_MODULE_9__.createChildLogger)(\"docx-exporter\");\n// Create filesystem service once at module level for reuse\nconst fsService = (0,_services_index_js__WEBPACK_IMPORTED_MODULE_11__.createFileSystemService)();\nconst docxExporter = (0,_anthropic_ai_claude_agent_sdk__WEBPACK_IMPORTED_MODULE_0__.createSdkMcpServer)({\n    name: \"docx-exporter\",\n    version: \"0.1.0\",\n    tools: [\n        (0,_anthropic_ai_claude_agent_sdk__WEBPACK_IMPORTED_MODULE_0__.tool)(\"render_docx\", \"Render a PIP text body into a DOCX using a template with {pip_body}. If template is missing, generate a fallback DOCX.\", {\n            templatePath: zod__WEBPACK_IMPORTED_MODULE_12__.string(),\n            outputPath: zod__WEBPACK_IMPORTED_MODULE_12__.string(),\n            body: zod__WEBPACK_IMPORTED_MODULE_12__.string(),\n            language: zod__WEBPACK_IMPORTED_MODULE_12__.string().default(\"en\"),\n            title: zod__WEBPACK_IMPORTED_MODULE_12__.string().default(\"Performance Improvement Plan\")\n        }, async ({ templatePath, outputPath, body, language, title })=>{\n            let safeOutputPath = outputPath; // Default fallback for error reporting\n            try {\n                const validationResult = (0,_utils_validation_js__WEBPACK_IMPORTED_MODULE_7__.validateOutputPath)(outputPath, {\n                    extensions: [\n                        \".docx\"\n                    ],\n                    allowOverwrite: true\n                });\n                if (!validationResult.valid || !validationResult.sanitizedPath) {\n                    throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.DocumentExportError(`Invalid output path: ${validationResult.error || \"Path validation failed\"}`);\n                }\n                safeOutputPath = validationResult.sanitizedPath;\n                if (fsService.existsSync(templatePath)) {\n                    const content = await fsService.readFile(templatePath);\n                    const zip = new (pizzip__WEBPACK_IMPORTED_MODULE_2___default())(content);\n                    const doc = new (docxtemplater__WEBPACK_IMPORTED_MODULE_3___default())(zip, {\n                        paragraphLoop: true,\n                        linebreaks: true\n                    });\n                    doc.render({\n                        pip_body: body,\n                        language,\n                        title,\n                        date: new Date().toISOString().slice(0, 10)\n                    });\n                    const buf = doc.getZip().generate({\n                        type: \"nodebuffer\"\n                    });\n                    // Parallelize directory creation and file writing preparation\n                    const outputDir = node_path__WEBPACK_IMPORTED_MODULE_1__.dirname(safeOutputPath);\n                    await fsService.mkdir(outputDir, {\n                        recursive: true\n                    });\n                    logger.info({\n                        outputPath: safeOutputPath,\n                        usingTemplate: true\n                    }, `[docx-exporter] writing template-based docx to ${safeOutputPath}`);\n                    await fsService.writeFile(safeOutputPath, buf);\n                    return (0,_utils_mcp_helpers_js__WEBPACK_IMPORTED_MODULE_6__.mcpSuccess)({\n                        outputPath: safeOutputPath\n                    });\n                } else {\n                    // Fallback: generate a docx without a template\n                    const importedDocx = await __webpack_require__.e(/*! import() */ \"vendor-chunks/docx\").then(__webpack_require__.bind(__webpack_require__, /*! docx */ \"(rsc)/../../node_modules/docx/build/index.mjs\"));\n                    if (!(0,_types_index_js__WEBPACK_IMPORTED_MODULE_10__.isDocxImport)(importedDocx)) {\n                        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.DocumentExportError(\"docx module did not expose expected API\");\n                    }\n                    const { Document, Packer, Paragraph, HeadingLevel, TextRun } = importedDocx;\n                    const paragraphs = [];\n                    paragraphs.push(new Paragraph({\n                        text: title,\n                        heading: HeadingLevel.HEADING_1\n                    }));\n                    paragraphs.push(new Paragraph({\n                        text: `Language: ${language}    Date: ${new Date().toISOString().slice(0, 10)}`\n                    }));\n                    paragraphs.push(new Paragraph({\n                        text: \"\"\n                    }));\n                    for (const line of body.split(/\\r?\\n/)){\n                        if (!line.trim()) {\n                            paragraphs.push(new Paragraph({\n                                text: \"\"\n                            }));\n                            continue;\n                        }\n                        paragraphs.push(new Paragraph({\n                            children: [\n                                new TextRun({\n                                    text: line\n                                })\n                            ]\n                        }));\n                    }\n                    const doc = new Document({\n                        sections: [\n                            {\n                                properties: {},\n                                children: paragraphs\n                            }\n                        ]\n                    });\n                    // Parallelize buffer generation and directory creation\n                    const outputDir = node_path__WEBPACK_IMPORTED_MODULE_1__.dirname(safeOutputPath);\n                    const [buf] = await Promise.all([\n                        Packer.toBuffer(doc),\n                        fsService.mkdir(outputDir, {\n                            recursive: true\n                        })\n                    ]);\n                    logger.info({\n                        outputPath: safeOutputPath,\n                        usingTemplate: false\n                    }, `[docx-exporter] writing fallback docx to ${safeOutputPath}`);\n                    await fsService.writeFile(safeOutputPath, buf);\n                    return (0,_utils_mcp_helpers_js__WEBPACK_IMPORTED_MODULE_6__.mcpSuccess)({\n                        outputPath: safeOutputPath,\n                        note: \"Generated fallback (no template found)\"\n                    });\n                }\n            } catch (error) {\n                // Check for custom errors first\n                if (error instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.DocumentExportError) {\n                    return (0,_utils_safe_stringify_js__WEBPACK_IMPORTED_MODULE_5__.mcpError)(error.message, error.metadata);\n                }\n                // Wrap other errors in DocumentExportError\n                const sanitized = (0,_utils_sanitize_js__WEBPACK_IMPORTED_MODULE_4__.sanitizeError)(error);\n                const message = (0,_utils_sanitize_js__WEBPACK_IMPORTED_MODULE_4__.sanitizePath)(sanitized.message);\n                return (0,_utils_safe_stringify_js__WEBPACK_IMPORTED_MODULE_5__.mcpError)(message, {\n                    ...sanitized,\n                    message,\n                    templatePath,\n                    outputPath: safeOutputPath\n                });\n            }\n        })\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../src/mcp/docxExporter.ts\n");

/***/ }),

/***/ "(rsc)/../../src/mcp/geminiTranscriber.ts":
/*!******************************************!*\
  !*** ../../src/mcp/geminiTranscriber.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   geminiTranscriber: () => (/* binding */ geminiTranscriber)\n/* harmony export */ });\n/* harmony import */ var _anthropic_ai_claude_agent_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @anthropic-ai/claude-agent-sdk */ \"(rsc)/../../node_modules/@anthropic-ai/claude-agent-sdk/sdk.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/v3/types.js\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:os */ \"node:os\");\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(node_os__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var mime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mime */ \"(rsc)/../../node_modules/mime/dist/src/index.js\");\n/* harmony import */ var _utils_cleanup_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/cleanup.js */ \"(rsc)/../../src/utils/cleanup.ts\");\n/* harmony import */ var _utils_sanitize_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/sanitize.js */ \"(rsc)/../../src/utils/sanitize.ts\");\n/* harmony import */ var _utils_safe_stringify_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/safe-stringify.js */ \"(rsc)/../../src/utils/safe-stringify.ts\");\n/* harmony import */ var _utils_mcp_helpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/mcp-helpers.js */ \"(rsc)/../../src/utils/mcp-helpers.ts\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../errors/index.js */ \"(rsc)/../../src/errors/index.ts\");\n/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/logger.js */ \"(rsc)/../../src/utils/logger.ts\");\n/* harmony import */ var _utils_shell_safe_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/shell-safe.js */ \"(rsc)/../../src/utils/shell-safe.ts\");\n/* harmony import */ var _utils_validation_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/validation.js */ \"(rsc)/../../src/utils/validation.ts\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../config.js */ \"(rsc)/../../src/config.ts\");\n/* harmony import */ var _types_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../types/index.js */ \"(rsc)/../../src/types/index.ts\");\n/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../services/index.js */ \"(rsc)/../../src/services/index.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst logger = (0,_utils_logger_js__WEBPACK_IMPORTED_MODULE_9__.createChildLogger)(\"gemini-transcriber\");\n/**\n * Safe logging wrapper that prevents worker crashes when logger fails\n * Falls back to console.log if Pino fails in webpack workers\n */ function safeLog(level, data, message) {\n    try {\n        logger[level](data, message);\n    } catch (err) {\n        // Fallback to console if logger fails in webpack worker\n        console.log(`[${level}] ${message}`, data);\n    }\n}\n// Create filesystem service once at module level for reuse\nconst fsService = (0,_services_index_js__WEBPACK_IMPORTED_MODULE_14__.createFileSystemService)();\nlet geminiService = null;\nfunction getGeminiService() {\n    if (!_config_js__WEBPACK_IMPORTED_MODULE_12__.GEMINI_API_KEY) {\n        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.ConfigurationError(\"Missing GEMINI_API_KEY\");\n    }\n    if (!geminiService) {\n        geminiService = (0,_services_index_js__WEBPACK_IMPORTED_MODULE_14__.createGeminiService)(_config_js__WEBPACK_IMPORTED_MODULE_12__.GEMINI_API_KEY);\n    }\n    return geminiService;\n}\nlet s3Service = null;\nfunction getS3Service() {\n    if (!s3Service) {\n        s3Service = (0,_services_index_js__WEBPACK_IMPORTED_MODULE_14__.createS3Service)(_config_js__WEBPACK_IMPORTED_MODULE_12__.S3_PROFILE);\n    }\n    return s3Service;\n}\nconst MAX_AUDIO_FILE_BYTES = 200 * 1024 * 1024;\nconst MIN_CHUNK_SECONDS = 10;\nconst MAX_CHUNKS_PER_CALL = 1; // Process one chunk at a time to prevent worker crashes\n/**\n * Format bytes to human-readable size (e.g., \"200MB\")\n */ function formatBytes(bytes) {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\n        \"Bytes\",\n        \"KB\",\n        \"MB\",\n        \"GB\"\n    ];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round(bytes / Math.pow(k, i)) + sizes[i];\n}\nfunction delay(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\nfunction hasTimeoutSignal(value, seen = new WeakSet()) {\n    if (value === null || value === undefined) {\n        return false;\n    }\n    if (typeof value === \"string\") {\n        const lower = value.toLowerCase();\n        return lower.includes(\"timeout\") || lower.includes(\"timed out\") || lower.includes(\"deadline exceeded\");\n    }\n    if (typeof value === \"number\") {\n        return value === 408;\n    }\n    if (value instanceof Error) {\n        return hasTimeoutSignal(value.message, seen);\n    }\n    if (typeof value === \"object\") {\n        const obj = value;\n        if (seen.has(obj)) {\n            return false;\n        }\n        seen.add(obj);\n        const keysToInspect = [\n            \"message\",\n            \"error\",\n            \"status\",\n            \"statusText\",\n            \"code\",\n            \"reason\"\n        ];\n        for (const key of keysToInspect){\n            const field = obj[key];\n            if (typeof field === \"string\" || typeof field === \"number\") {\n                if (hasTimeoutSignal(field, seen)) {\n                    return true;\n                }\n            }\n        }\n        const cause = obj.cause;\n        if (cause && hasTimeoutSignal(cause, seen)) {\n            return true;\n        }\n        const metadata = obj.metadata;\n        if (metadata && hasTimeoutSignal(metadata, seen)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isTimeoutLikeError(error) {\n    if (error instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.TranscriptionError) {\n        const metadata = error.metadata;\n        if (metadata && typeof metadata === \"object\") {\n            const reason = metadata.reason;\n            if (typeof reason === \"string\" && reason.toLowerCase() === \"timeout\") {\n                return true;\n            }\n        }\n    }\n    return hasTimeoutSignal(error);\n}\nasync function runWithConcurrency(items, worker, onProgress) {\n    const results = new Array(items.length);\n    let cursor = 0;\n    let completed = 0;\n    const runner = async ()=>{\n        while(true){\n            const index = cursor++;\n            if (index >= items.length) break;\n            const item = items[index];\n            results[index] = await worker(item);\n            completed++;\n            if (onProgress) {\n                onProgress(completed, items.length);\n            }\n        }\n    };\n    const workers = Array.from({\n        length: Math.min(_config_js__WEBPACK_IMPORTED_MODULE_12__.GEMINI_TRANSCRIBE_CONCURRENCY, items.length)\n    }, runner);\n    await Promise.all(workers);\n    return results;\n}\n/**\n * Secure wrapper for ffmpeg/ffprobe commands\n * Uses safeSpawn to prevent command injection\n *\n * @security This function replaces the unsafe spawn() usage (Issue #6)\n */ async function runCommand(command, args) {\n    try {\n        const result = await (0,_utils_shell_safe_js__WEBPACK_IMPORTED_MODULE_10__.safeSpawn)(command, args, {\n            timeout: 300000,\n            validatePaths: true\n        });\n        return {\n            stdout: result.stdout,\n            stderr: result.stderr\n        };\n    } catch (error) {\n        // safeSpawn throws an error if the command fails\n        // Extract the error message and re-throw in the expected format\n        throw error;\n    }\n}\nasync function validateAudioFile(filePath) {\n    try {\n        const { stdout } = await runCommand(\"ffprobe\", [\n            \"-v\",\n            \"error\",\n            \"-show_entries\",\n            \"stream=codec_name,codec_type,bit_rate,duration\",\n            \"-show_entries\",\n            \"format=duration,bit_rate\",\n            \"-of\",\n            \"json\",\n            filePath\n        ]);\n        let probeData;\n        try {\n            const parsed = JSON.parse(stdout.trim());\n            if (!(0,_types_index_js__WEBPACK_IMPORTED_MODULE_13__.isAudioProbeData)(parsed)) {\n                return {\n                    isValid: false,\n                    error: \"Unable to read audio file metadata\",\n                    hint: \"The file may be corrupt, encrypted, or an unsupported format. Try re-exporting as MP3 or WAV.\"\n                };\n            }\n            probeData = parsed;\n        } catch  {\n            return {\n                isValid: false,\n                error: \"Unable to read audio file metadata\",\n                hint: \"The file may be corrupt, encrypted, or an unsupported format. Try re-exporting as MP3 or WAV.\"\n            };\n        }\n        const streams = probeData.streams || [];\n        const format = probeData.format || {};\n        // Find audio stream\n        const audioStream = streams.find((s)=>s.codec_type === \"audio\");\n        if (!audioStream) {\n            // Check if there are any streams at all\n            if (streams.length === 0) {\n                return {\n                    isValid: false,\n                    error: \"No streams found in file\",\n                    hint: \"The file appears to be corrupt or empty. Try downloading/exporting it again.\"\n                };\n            }\n            // Check if it's video-only\n            const hasVideo = streams.some((s)=>s.codec_type === \"video\");\n            if (hasVideo) {\n                return {\n                    isValid: false,\n                    error: \"No audio stream found in file\",\n                    hint: \"This file appears to be video-only or has no audio track. Please provide a valid audio file.\"\n                };\n            }\n            return {\n                isValid: false,\n                error: \"No audio stream found in file\",\n                hint: \"Audio file appears to be corrupt. Please provide a valid audio file (MP3, WAV, FLAC, etc.).\"\n            };\n        }\n        // Extract codec name\n        const codec = audioStream.codec_name || \"unknown\";\n        // Check for supported codecs (common ones that ffmpeg/Gemini handle well)\n        const supportedCodecs = [\n            \"mp3\",\n            \"aac\",\n            \"opus\",\n            \"vorbis\",\n            \"wav\",\n            \"flac\",\n            \"pcm_s16le\",\n            \"pcm_s24le\",\n            \"pcm_s32le\",\n            \"pcm_f32le\",\n            \"pcm_f64le\",\n            \"pcm_u8\",\n            \"alac\",\n            \"wmav2\",\n            \"wmav1\"\n        ];\n        const isKnownCodec = supportedCodecs.some((supported)=>codec.toLowerCase().includes(supported));\n        if (!isKnownCodec) {\n            return {\n                isValid: false,\n                error: `Audio codec '${codec}' may not be supported`,\n                hint: \"Try converting your audio to MP3, WAV, or FLAC format for better compatibility.\"\n            };\n        }\n        // Get duration from stream or format\n        let duration = parseFloat(audioStream.duration || \"\") || parseFloat(format.duration || \"\") || 0;\n        if (!Number.isFinite(duration) || duration <= 0) {\n            return {\n                isValid: false,\n                error: \"Audio file has zero or invalid duration\",\n                hint: \"The file may be corrupt, empty, or incomplete. Try re-exporting or downloading it again.\"\n            };\n        }\n        // Get bitrate (prefer stream bitrate, fallback to format bitrate)\n        const bitrate = audioStream.bit_rate || format.bit_rate;\n        const bitrateFormatted = bitrate ? `${Math.round(parseInt(bitrate) / 1000)}k` : \"unknown\";\n        // Success case - return validation details\n        return {\n            isValid: true,\n            details: {\n                codec,\n                bitrate: bitrateFormatted,\n                duration\n            }\n        };\n    } catch (error) {\n        const message = error instanceof Error ? error.message : String(error);\n        // Handle specific ffprobe errors\n        if (message.includes(\"Invalid data found\")) {\n            return {\n                isValid: false,\n                error: \"File appears to be truncated or corrupted\",\n                hint: \"The audio file is incomplete or damaged. Try downloading/exporting it again.\"\n            };\n        }\n        if (message.includes(\"moov atom not found\")) {\n            return {\n                isValid: false,\n                error: \"File is incomplete or improperly encoded\",\n                hint: \"This MP4/M4A file is missing required metadata. Try re-exporting with a different tool.\"\n            };\n        }\n        // Generic failure\n        return {\n            isValid: false,\n            error: \"Unable to read audio file\",\n            hint: \"The file may be corrupt, encrypted, or an unsupported format. Try re-exporting as MP3 or WAV.\"\n        };\n    }\n}\nasync function probeDuration(filePath) {\n    try {\n        const { stdout } = await runCommand(\"ffprobe\", [\n            \"-v\",\n            \"error\",\n            \"-show_entries\",\n            \"format=duration\",\n            \"-of\",\n            \"default=noprint_wrappers=1:nokey=1\",\n            filePath\n        ]);\n        const value = parseFloat(stdout.trim());\n        return Number.isFinite(value) ? value : null;\n    } catch  {\n        return null;\n    }\n}\nasync function splitAudio(filePath, chunkSeconds) {\n    const tmpDir = await fsService.mkdtemp(node_path__WEBPACK_IMPORTED_MODULE_1__.join(node_os__WEBPACK_IMPORTED_MODULE_2__.tmpdir(), \"gemini-chunks-\"));\n    const ext = node_path__WEBPACK_IMPORTED_MODULE_1__.extname(filePath) || \".mp3\";\n    const pattern = node_path__WEBPACK_IMPORTED_MODULE_1__.join(tmpDir, `chunk_%03d${ext}`);\n    // Log chunk configuration before splitting\n    const duration = await probeDuration(filePath);\n    const estimatedChunks = duration ? Math.ceil(duration / chunkSeconds) : \"unknown\";\n    safeLog(\"info\", {\n        estimatedChunks,\n        chunkSeconds,\n        duration\n    }, `🎵 Splitting audio into ~${estimatedChunks} chunks (${chunkSeconds} seconds each)...`);\n    await runCommand(\"ffmpeg\", [\n        \"-hide_banner\",\n        \"-loglevel\",\n        \"error\",\n        \"-i\",\n        filePath,\n        \"-f\",\n        \"segment\",\n        \"-segment_time\",\n        String(chunkSeconds),\n        \"-c\",\n        \"copy\",\n        pattern\n    ]);\n    const entries = await fsService.readdir(tmpDir);\n    const chunks = entries.filter((name)=>name.startsWith(\"chunk_\")).sort().map((name, index)=>({\n            path: node_path__WEBPACK_IMPORTED_MODULE_1__.join(tmpDir, name),\n            index,\n            offsetSeconds: index * chunkSeconds\n        }));\n    // Log actual chunks created\n    safeLog(\"info\", {\n        chunkCount: chunks.length\n    }, `✂️  Created ${chunks.length} chunks from audio file`);\n    return {\n        tmpDir,\n        chunks\n    };\n}\nfunction toSeconds(value) {\n    if (value === null || value === undefined) return null;\n    if (typeof value === \"number\" && Number.isFinite(value)) return value;\n    if (typeof value === \"string\") {\n        const trimmed = value.trim();\n        if (!trimmed) return null;\n        if (/^-?\\d+(\\.\\d+)?$/.test(trimmed)) {\n            const num = parseFloat(trimmed);\n            return Number.isFinite(num) ? num : null;\n        }\n        const parts = trimmed.split(\":\").map((p)=>parseFloat(p));\n        if (parts.some((part)=>!Number.isFinite(part))) return null;\n        return parts.reduce((acc, part)=>acc * 60 + part, 0);\n    }\n    return null;\n}\nfunction formatTimestamp(seconds) {\n    if (seconds === null || !Number.isFinite(seconds)) return null;\n    const totalMs = Math.round(seconds * 1000);\n    const positiveMs = totalMs < 0 ? 0 : totalMs;\n    const ms = positiveMs % 1000;\n    const totalSeconds = Math.floor(positiveMs / 1000);\n    const s = totalSeconds % 60;\n    const totalMinutes = Math.floor(totalSeconds / 60);\n    const m = totalMinutes % 60;\n    const h = Math.floor(totalMinutes / 60);\n    const msPart = ms ? `.${ms.toString().padStart(3, \"0\")}` : \"\";\n    return `${h.toString().padStart(2, \"0\")}:${m.toString().padStart(2, \"0\")}:${s.toString().padStart(2, \"0\")}${msPart}`;\n}\nfunction normalizeSegments(rawSegments, offsetSeconds) {\n    return rawSegments.map((seg)=>{\n        const startSeconds = toSeconds(seg?.start ?? seg?.begin ?? seg?.from ?? null);\n        const endSeconds = toSeconds(seg?.end ?? seg?.finish ?? seg?.to ?? null);\n        const text = String(seg?.text ?? seg?.transcript ?? \"\").trim();\n        const speaker = String(seg?.speaker ?? \"SPEAKER_1\");\n        const start = formatTimestamp(startSeconds !== null ? startSeconds + offsetSeconds : null);\n        const end = formatTimestamp(endSeconds !== null ? endSeconds + offsetSeconds : null);\n        return {\n            start,\n            end,\n            startSeconds: startSeconds !== null ? startSeconds + offsetSeconds : null,\n            endSeconds: endSeconds !== null ? endSeconds + offsetSeconds : null,\n            text,\n            speaker\n        };\n    }).filter((seg)=>Boolean(seg.text));\n}\nasync function transcribeChunk(params) {\n    const { filePath, offsetSeconds, gemini, modelId, instructionsBase } = params;\n    let lastError = null;\n    for(let attempt = 0; attempt <= _config_js__WEBPACK_IMPORTED_MODULE_12__.GEMINI_TRANSCRIBE_RETRIES; attempt++){\n        try {\n            const mimeType = mime__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getType(filePath) || \"audio/wav\";\n            // For chunk path we keep SDK upload to limit presign churn\n            const uploaded = await gemini.uploadFile(filePath, mimeType);\n            const fileUri = uploaded.uri ?? uploaded.fileUri;\n            const fileMime = uploaded.mimeType ?? uploaded.fileMimeType ?? mimeType;\n            if (!fileUri) {\n                throw new Error(\"Upload failed: missing file URI\");\n            }\n            const offsetInstruction = offsetSeconds > 0 ? `This audio chunk begins at timestamp ${formatTimestamp(offsetSeconds)}. Return timestamps as absolute times in the original recording.` : \"Return timestamps as absolute times (HH:MM:SS) in the original recording.\";\n            const instructions = [\n                ...instructionsBase,\n                offsetInstruction\n            ].join(\"\\n\");\n            const result = await gemini.generateContent({\n                model: modelId,\n                contents: [\n                    {\n                        role: \"user\",\n                        parts: [\n                            {\n                                text: instructions\n                            },\n                            {\n                                fileData: {\n                                    fileUri,\n                                    mimeType: fileMime\n                                }\n                            }\n                        ]\n                    }\n                ],\n                config: {\n                    responseMimeType: \"application/json\"\n                }\n            });\n            const text = result.text ?? result.response?.text?.() ?? \"\";\n            const cleaned = String(text).replace(/```json|```/g, \"\").trim();\n            let parsed;\n            try {\n                parsed = JSON.parse(cleaned);\n            } catch (err) {\n                throw new Error(`Failed to parse JSON from Gemini response: ${err.message}`);\n            }\n            // Validate and extract transcription data\n            const transcriptionData = parsed;\n            const rawSegments = Array.isArray(transcriptionData?.segments) ? transcriptionData.segments : Array.isArray(parsed) ? parsed : [];\n            const transcript = typeof transcriptionData?.transcript === \"string\" && transcriptionData.transcript.trim() ? transcriptionData.transcript.trim() : rawSegments.map((seg)=>String(seg?.text ?? seg?.transcript ?? \"\").trim()).filter(Boolean).join(\"\\n\").trim();\n            const segments = normalizeSegments(rawSegments, offsetSeconds);\n            return {\n                transcript,\n                segments\n            };\n        } catch (err) {\n            lastError = err;\n            if (attempt < _config_js__WEBPACK_IMPORTED_MODULE_12__.GEMINI_TRANSCRIBE_RETRIES) {\n                await delay(1000 * (attempt + 1));\n                continue;\n            }\n            break;\n        }\n    }\n    const baseError = lastError ?? new Error(\"Unknown transcription failure\");\n    const sanitized = (0,_utils_sanitize_js__WEBPACK_IMPORTED_MODULE_5__.sanitizeError)(baseError);\n    const timeout = isTimeoutLikeError(baseError) || hasTimeoutSignal(sanitized);\n    const metadata = {\n        chunkOffsetSeconds: offsetSeconds,\n        chunkPath: (0,_utils_sanitize_js__WEBPACK_IMPORTED_MODULE_5__.sanitizePath)(filePath),\n        attempts: _config_js__WEBPACK_IMPORTED_MODULE_12__.GEMINI_TRANSCRIBE_RETRIES + 1,\n        cause: sanitized\n    };\n    if (timeout) {\n        metadata.reason = \"timeout\";\n    }\n    throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.TranscriptionError(timeout ? \"Transcription chunk timed out\" : sanitized.message || \"Transcription failed\", metadata);\n}\nfunction buildSuccess(transcript, segments, nextChunk, info) {\n    const printableSegments = segments.filter((seg)=>seg.text).map((seg)=>({\n            start: seg.start,\n            end: seg.end,\n            speaker: seg.speaker,\n            text: seg.text\n        }));\n    const payload = {\n        transcript: transcript.trim(),\n        segments: printableSegments\n    };\n    if (nextChunk !== null && Number.isFinite(nextChunk)) {\n        payload.nextChunk = nextChunk;\n    }\n    if (info?.totalChunks !== undefined) {\n        payload.totalChunks = info.totalChunks;\n    }\n    if (info?.processedChunks !== undefined) {\n        payload.processedChunks = info.processedChunks;\n    }\n    if (info?.startChunk !== undefined) {\n        payload.startChunk = info.startChunk;\n    }\n    return (0,_utils_mcp_helpers_js__WEBPACK_IMPORTED_MODULE_7__.mcpSuccess)(payload);\n}\n// We use the new Google Gen AI SDK (@google/genai).\n// Ensure GEMINI_API_KEY is set in your environment.\nconst geminiTranscriber = (0,_anthropic_ai_claude_agent_sdk__WEBPACK_IMPORTED_MODULE_0__.createSdkMcpServer)({\n    name: \"gemini-transcriber\",\n    version: \"0.1.0\",\n    tools: [\n        (0,_anthropic_ai_claude_agent_sdk__WEBPACK_IMPORTED_MODULE_0__.tool)(\"transcribe_audio\", \"Transcribe an audio file with Gemini 2.5 Pro; returns JSON with transcript and segments.\", {\n            audioPath: zod__WEBPACK_IMPORTED_MODULE_15__.string().describe(\"Path to audio file (.mp3, .wav, .flac, etc.)\"),\n            inputLanguage: zod__WEBPACK_IMPORTED_MODULE_15__.string().default(\"auto\").describe(\"Audio language hint, e.g., 'en-US', 'es-ES', or 'auto'\"),\n            outputLanguage: zod__WEBPACK_IMPORTED_MODULE_15__.string().default(\"en\").describe(\"Transcript target language, e.g., 'en', 'fr'\"),\n            diarize: zod__WEBPACK_IMPORTED_MODULE_15__.boolean().default(true),\n            timestamps: zod__WEBPACK_IMPORTED_MODULE_15__.boolean().default(true),\n            startChunk: zod__WEBPACK_IMPORTED_MODULE_15__.number().int().min(0).default(0).describe(\"Optional start chunk index for paginated transcription\")\n        }, async ({ audioPath, inputLanguage, outputLanguage, diarize, timestamps, startChunk })=>{\n            try {\n                if (!_config_js__WEBPACK_IMPORTED_MODULE_12__.GEMINI_API_KEY) {\n                    throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.ConfigurationError(\"Missing GEMINI_API_KEY\");\n                }\n                // Validate audio path for security (Issue #11)\n                const pathValidation = (0,_utils_validation_js__WEBPACK_IMPORTED_MODULE_11__.validateFilePath)(audioPath, {\n                    mustExist: true,\n                    mustBeFile: true,\n                    extensions: [\n                        ..._config_js__WEBPACK_IMPORTED_MODULE_12__.ALLOWED_AUDIO_EXTENSIONS\n                    ],\n                    allowAbsolute: true // Allow absolute paths in MCP context\n                });\n                if (!pathValidation.valid) {\n                    throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.AudioValidationError(pathValidation.error || \"Audio path validation failed\", {\n                        hint: pathValidation.hint\n                    });\n                }\n                // Use the sanitized path from validation\n                const validatedAudioPath = pathValidation.sanitizedPath;\n                const fileStats = await fsService.stat(validatedAudioPath);\n                if (fileStats.size > MAX_AUDIO_FILE_BYTES) {\n                    throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.AudioValidationError(`Audio file exceeds maximum supported size of ${formatBytes(MAX_AUDIO_FILE_BYTES)}.`);\n                }\n                // Validate audio file content before processing\n                const validation = await validateAudioFile(validatedAudioPath);\n                if (!validation.isValid) {\n                    throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.AudioValidationError(validation.error || \"Audio validation failed\", {\n                        hint: validation.hint\n                    });\n                }\n                // Log audio details if validation succeeded\n                if (validation.details) {\n                    const { codec, bitrate, duration } = validation.details;\n                    if (duration !== undefined) {\n                        safeLog(\"info\", {\n                            duration,\n                            codec,\n                            bitrate\n                        }, `Audio: ${duration.toFixed(1)}s, codec: ${codec}, bitrate: ${bitrate}`);\n                    } else {\n                        safeLog(\"info\", {\n                            codec,\n                            bitrate\n                        }, `Audio: codec: ${codec}, bitrate: ${bitrate}`);\n                    }\n                }\n                const gemini = getGeminiService();\n                const instructionsBase = [\n                    \"You are a professional HR meeting transcriber.\",\n                    `Audio language hint: ${inputLanguage}.`,\n                    `Output language: ${outputLanguage}.`,\n                    \"Return ONLY JSON with keys: transcript (string), segments (array of {start, end, speaker, text}).\",\n                    diarize ? \"Perform speaker diarization; infer 'Manager'/'HRBP' if obvious else SPEAKER_1..n.\" : \"No diarization; set speaker to 'SPEAKER_1'.\",\n                    timestamps ? \"Include start/end times HH:MM:SS.\" : \"Set start/end to null.\"\n                ];\n                const modelId = _config_js__WEBPACK_IMPORTED_MODULE_12__.MODELS.GEMINI_PRO;\n                const duration = await probeDuration(validatedAudioPath);\n                const chunkSeconds = _config_js__WEBPACK_IMPORTED_MODULE_12__.GEMINI_CHUNK_SECONDS;\n                const shouldChunkDefault = duration === null ? true : duration > _config_js__WEBPACK_IMPORTED_MODULE_12__.GEMINI_SINGLE_PASS_MAX;\n                const preferPresigned = _config_js__WEBPACK_IMPORTED_MODULE_12__.GEMINI_INPUT_MODE === \"presigned\";\n                // Warn user about long processing times for larger files\n                if (duration && duration > 120) {\n                    const estimatedMinutes = Math.ceil(duration / 60);\n                    safeLog(\"info\", {\n                        duration,\n                        estimatedMinutes\n                    }, `⏱️  Audio is ${estimatedMinutes} minutes long. Transcription may take 5-10 minutes. Progress updates will appear periodically.`);\n                }\n                const runSingleViaS3AndUpload = async ()=>{\n                    // For audit: store on S3, then upload the local file to Gemini File API\n                    safeLog(\"info\", {\n                        mode: \"s3+upload\"\n                    }, \"\\uD83C\\uDFA4 Transcribing audio: store in S3, then Gemini upload (single pass)...\");\n                    const s3 = getS3Service();\n                    const mimeType = mime__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getType(validatedAudioPath) || \"audio/wav\";\n                    let uploadedKey = null;\n                    let uploadedBucket = null;\n                    try {\n                        const uploaded = await s3.uploadAndPresign({\n                            filePath: validatedAudioPath,\n                            mimeType,\n                            bucket: _config_js__WEBPACK_IMPORTED_MODULE_12__.S3_BUCKET,\n                            prefix: _config_js__WEBPACK_IMPORTED_MODULE_12__.S3_PREFIX,\n                            expiresInSeconds: _config_js__WEBPACK_IMPORTED_MODULE_12__.S3_PRESIGN_TTL_SECONDS\n                        });\n                        uploadedKey = uploaded.key;\n                        uploadedBucket = uploaded.bucket;\n                    } catch (e) {\n                        const se = (0,_utils_sanitize_js__WEBPACK_IMPORTED_MODULE_5__.sanitizeError)(e);\n                        safeLog(\"warn\", {\n                            error: se\n                        }, \"S3 upload/presign failed; continuing with direct Gemini upload\");\n                    }\n                    const res = await transcribeChunk({\n                        filePath: validatedAudioPath,\n                        offsetSeconds: 0,\n                        gemini,\n                        modelId,\n                        instructionsBase\n                    });\n                    if (uploadedBucket && uploadedKey && _config_js__WEBPACK_IMPORTED_MODULE_12__.S3_DELETE_AFTER) {\n                        try {\n                            await s3.deleteObject(uploadedBucket, uploadedKey);\n                        } catch  {}\n                    }\n                    const transcript = res.transcript.trim() || res.segments.map((seg)=>seg.text).join(\"\\n\").trim();\n                    return buildSuccess(transcript, res.segments, null, {\n                        totalChunks: 1,\n                        processedChunks: 1,\n                        startChunk: 0\n                    });\n                };\n                const runSingleViaUpload = async ()=>{\n                    safeLog(\"info\", {\n                        mode: \"upload\"\n                    }, \"\\uD83C\\uDFA4 Transcribing audio via SDK upload (single pass)...\");\n                    const res = await transcribeChunk({\n                        filePath: validatedAudioPath,\n                        offsetSeconds: 0,\n                        gemini,\n                        modelId,\n                        instructionsBase\n                    });\n                    const transcript = res.transcript.trim() || res.segments.map((seg)=>seg.text).join(\"\\n\").trim();\n                    return buildSuccess(transcript, res.segments, null, {\n                        totalChunks: 1,\n                        processedChunks: 1,\n                        startChunk: 0\n                    });\n                };\n                // Prefer presigned single-pass regardless of duration; fallback to chunking on failure\n                if (preferPresigned) {\n                    try {\n                        return await runSingleViaS3AndUpload();\n                    } catch (e) {\n                        const se = (0,_utils_sanitize_js__WEBPACK_IMPORTED_MODULE_5__.sanitizeError)(e);\n                        safeLog(\"warn\", {\n                            error: se\n                        }, \"Presigned single-pass failed; considering fallback\");\n                        // Regardless of duration, try SDK upload once before chunking\n                        try {\n                            return await runSingleViaUpload();\n                        } catch  {\n                        // fall through to chunking\n                        }\n                    }\n                } else {\n                    if (!shouldChunkDefault) {\n                        return await runSingleViaUpload();\n                    }\n                }\n                const normalizedStartChunk = Number.isFinite(startChunk) && startChunk > 0 ? Math.floor(startChunk) : 0;\n                // If we got here, we either prefer upload mode and need chunking, or presigned failed and we must chunk\n                let tmpDir = null;\n                try {\n                    const split = await splitAudio(validatedAudioPath, chunkSeconds);\n                    tmpDir = split.tmpDir;\n                    const totalChunks = split.chunks.length;\n                    if (!totalChunks) {\n                        return await runSingle();\n                    }\n                    if (normalizedStartChunk >= totalChunks) {\n                        return buildSuccess(\"\", [], null, {\n                            totalChunks,\n                            processedChunks: 0,\n                            startChunk: normalizedStartChunk\n                        });\n                    }\n                    const remainingChunks = totalChunks - normalizedStartChunk;\n                    const batchSize = Math.min(MAX_CHUNKS_PER_CALL, Math.max(1, remainingChunks));\n                    const selectedChunks = split.chunks.slice(normalizedStartChunk, normalizedStartChunk + batchSize);\n                    const chunkResults = await runWithConcurrency(selectedChunks, (chunk)=>transcribeChunk({\n                            filePath: chunk.path,\n                            offsetSeconds: chunk.offsetSeconds,\n                            gemini,\n                            modelId,\n                            instructionsBase\n                        }), (completed, total)=>{\n                        const absoluteCompleted = normalizedStartChunk + completed;\n                        const reportInterval = Math.max(1, Math.min(5, Math.ceil(totalChunks * 0.1)));\n                        if (absoluteCompleted % reportInterval === 0 || completed === total) {\n                            const percentage = Math.floor(absoluteCompleted / totalChunks * 100);\n                            safeLog(\"info\", {\n                                completed: absoluteCompleted,\n                                total: totalChunks,\n                                percentage,\n                                chunkSeconds\n                            }, `📝 Transcribed ${absoluteCompleted}/${totalChunks} chunks (${percentage}%)`);\n                        }\n                    });\n                    const transcriptParts = chunkResults.map((r)=>r.transcript.trim()).filter(Boolean);\n                    const mergedSegments = chunkResults.flatMap((r)=>r.segments).sort((a, b)=>(a.startSeconds ?? Infinity) - (b.startSeconds ?? Infinity));\n                    const transcript = transcriptParts.join(\"\\n\\n\").trim() || mergedSegments.map((seg)=>seg.text).join(\"\\n\").trim();\n                    const nextChunkIndex = normalizedStartChunk + selectedChunks.length < totalChunks ? normalizedStartChunk + selectedChunks.length : null;\n                    return buildSuccess(transcript, mergedSegments, nextChunkIndex, {\n                        totalChunks,\n                        processedChunks: selectedChunks.length,\n                        startChunk: normalizedStartChunk\n                    });\n                } finally{\n                    if (tmpDir) {\n                        await (0,_utils_cleanup_js__WEBPACK_IMPORTED_MODULE_4__.cleanupTempDir)(tmpDir);\n                    }\n                }\n            } catch (error) {\n                // MCP tool-level error handler - convert all errors to mcpError format\n                if (error instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.AudioValidationError || error instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.TranscriptionError || error instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.ConfigurationError) {\n                    return (0,_utils_safe_stringify_js__WEBPACK_IMPORTED_MODULE_6__.mcpError)(error.message, error.metadata);\n                }\n                // Wrap other errors in TranscriptionError with helpful hints\n                const sanitized = (0,_utils_sanitize_js__WEBPACK_IMPORTED_MODULE_5__.sanitizeError)(error);\n                const message = sanitized.message;\n                let hint;\n                if (sanitized.code === \"ENOENT\" && message.includes(\"ffmpeg\")) {\n                    hint = \"ffmpeg is required for chunked transcription. Please install ffmpeg or provide a shorter audio clip.\";\n                } else if (/ffmpeg/.test(message) && /exited with code/.test(message)) {\n                    // Extract exit code for more specific error messages\n                    const exitCodeMatch = message.match(/exited with code (\\d+)/);\n                    const exitCode = exitCodeMatch ? parseInt(exitCodeMatch[1]) : null;\n                    if (exitCode === 1) {\n                        hint = \"ffmpeg reported a generic error. The audio file may be corrupt or in an unsupported format. Try re-exporting as MP3 or WAV.\";\n                    } else if (exitCode === 255) {\n                        hint = \"ffmpeg processing was interrupted. This might indicate a timeout or the file may be too large/corrupt to process.\";\n                    } else if (exitCode === -11 || message.includes(\"Segmentation fault\")) {\n                        hint = \"ffmpeg crashed (segmentation fault). The audio file is likely corrupt or severely damaged. Try re-downloading or re-exporting the file.\";\n                    } else {\n                        hint = \"ffmpeg reported an error while chunking audio. Verify ffmpeg is installed and the audio file is valid.\";\n                    }\n                }\n                safeLog(\"warn\", {\n                    error: sanitized,\n                    hint\n                }, \"Gemini transcription tool failed\");\n                return (0,_utils_safe_stringify_js__WEBPACK_IMPORTED_MODULE_6__.mcpError)(message, hint ? {\n                    ...sanitized,\n                    hint\n                } : sanitized);\n            }\n        })\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../src/mcp/geminiTranscriber.ts\n");

/***/ }),

/***/ "(rsc)/../../src/mcp/pipGenerator.ts":
/*!*************************************!*\
  !*** ../../src/mcp/pipGenerator.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pipGenerator: () => (/* binding */ pipGenerator)\n/* harmony export */ });\n/* harmony import */ var _anthropic_ai_claude_agent_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @anthropic-ai/claude-agent-sdk */ \"(rsc)/../../node_modules/@anthropic-ai/claude-agent-sdk/sdk.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! zod */ \"(rsc)/../../node_modules/zod/v3/types.js\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_sanitize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/sanitize.js */ \"(rsc)/../../src/utils/sanitize.ts\");\n/* harmony import */ var _utils_safe_stringify_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/safe-stringify.js */ \"(rsc)/../../src/utils/safe-stringify.ts\");\n/* harmony import */ var _utils_mcp_helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/mcp-helpers.js */ \"(rsc)/../../src/utils/mcp-helpers.ts\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../errors/index.js */ \"(rsc)/../../src/errors/index.ts\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../config.js */ \"(rsc)/../../src/config.ts\");\n/* harmony import */ var _services_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../services/index.js */ \"(rsc)/../../src/services/index.ts\");\n/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/logger.js */ \"(rsc)/../../src/utils/logger.ts\");\n\n\n\n\n\n\n\n\n\n\nconst logger = (0,_utils_logger_js__WEBPACK_IMPORTED_MODULE_8__.createChildLogger)(\"pip-generator\");\nasync function generateDraft(params, anthropicService, fsService) {\n    const promptPathResolved = node_path__WEBPACK_IMPORTED_MODULE_1__.resolve(params.promptPath);\n    const promptRaw = await fsService.readFile(promptPathResolved, \"utf-8\");\n    // Validate transcript is not empty or too short\n    if (!params.transcript || params.transcript.trim().length < 50) {\n        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_5__.PIPGenerationError(\"Transcript is too short or empty. Ensure transcription completed successfully.\", {\n            transcriptLength: params.transcript?.length ?? 0\n        });\n    }\n    const transcriptLength = params.transcript.length;\n    const transcriptWordCount = params.transcript.split(/\\s+/).length;\n    try {\n        logger.info({\n            transcriptLength,\n            transcriptWordCount,\n            model: params.model\n        }, `📝 Generating PIP draft from transcript (${transcriptLength} chars, ~${transcriptWordCount} words)`);\n    } catch  {\n        console.log(`Generating PIP from transcript (${transcriptLength} chars, ~${transcriptWordCount} words)`);\n    }\n    const sanitizedTranscript = params.transcript.replace(/<END_TRANSCRIPT>/g, \"<END_TRANSCRIPT_ESCAPED>\");\n    const filledPrompt = promptRaw.split(\"{request.transcript}\").join(sanitizedTranscript);\n    const systemPrompt = `You are an HR specialist analyzing a meeting transcript. Extract only the performance issues that are explicitly discussed in the transcript. Follow the format instructions exactly. Do not add information not present in the transcript. Output in ${params.outputLanguage}.`;\n    const text = await anthropicService.generateMessage({\n        model: params.model,\n        maxTokens: params.maxOutputTokens,\n        temperature: params.temperature,\n        systemPrompt: systemPrompt,\n        userPrompt: filledPrompt\n    });\n    if (!text) {\n        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_5__.PIPGenerationError(\"Claude returned an empty draft.\");\n    }\n    return text;\n}\n// Create services once at module level for reuse\n// This ensures we don't create new clients on every call\nlet anthropicService = null;\nconst fsService = (0,_services_index_js__WEBPACK_IMPORTED_MODULE_7__.createFileSystemService)();\nfunction getAnthropicService() {\n    if (!_config_js__WEBPACK_IMPORTED_MODULE_6__.ANTHROPIC_API_KEY) {\n        throw new _errors_index_js__WEBPACK_IMPORTED_MODULE_5__.ConfigurationError(\"Missing ANTHROPIC_API_KEY for pip-generator tool.\");\n    }\n    if (!anthropicService) {\n        anthropicService = (0,_services_index_js__WEBPACK_IMPORTED_MODULE_7__.createAnthropicService)(_config_js__WEBPACK_IMPORTED_MODULE_6__.ANTHROPIC_API_KEY);\n    }\n    return anthropicService;\n}\nconst pipGenerator = (0,_anthropic_ai_claude_agent_sdk__WEBPACK_IMPORTED_MODULE_0__.createSdkMcpServer)({\n    name: \"pip-generator\",\n    version: \"0.1.0\",\n    tools: [\n        (0,_anthropic_ai_claude_agent_sdk__WEBPACK_IMPORTED_MODULE_0__.tool)(\"draft_pip\", \"Generate a PIP draft from a transcript using the local drafting prompt and Claude model.\", {\n            transcript: zod__WEBPACK_IMPORTED_MODULE_9__.string().min(1, \"Transcript is required.\"),\n            outputLanguage: zod__WEBPACK_IMPORTED_MODULE_9__.string().default(\"en\"),\n            promptPath: zod__WEBPACK_IMPORTED_MODULE_9__.string().default(_config_js__WEBPACK_IMPORTED_MODULE_6__.PIP_PROMPT_PATH),\n            model: zod__WEBPACK_IMPORTED_MODULE_9__.string().default(_config_js__WEBPACK_IMPORTED_MODULE_6__.MODELS.CLAUDE_PIP),\n            temperature: zod__WEBPACK_IMPORTED_MODULE_9__.number().min(0).max(1).default(_config_js__WEBPACK_IMPORTED_MODULE_6__.PIP_TEMPERATURE),\n            maxOutputTokens: zod__WEBPACK_IMPORTED_MODULE_9__.number().min(512).max(8192).default(_config_js__WEBPACK_IMPORTED_MODULE_6__.PIP_MAX_OUTPUT_TOKENS)\n        }, async ({ transcript, outputLanguage, promptPath, model, temperature, maxOutputTokens })=>{\n            try {\n                const anthropic = getAnthropicService();\n                const draft = await generateDraft({\n                    transcript,\n                    outputLanguage,\n                    promptPath,\n                    model,\n                    temperature,\n                    maxOutputTokens\n                }, anthropic, fsService);\n                return (0,_utils_mcp_helpers_js__WEBPACK_IMPORTED_MODULE_4__.mcpSuccess)({\n                    draft\n                });\n            } catch (error) {\n                // Check for custom errors first\n                if (error instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_5__.PIPGenerationError || error instanceof _errors_index_js__WEBPACK_IMPORTED_MODULE_5__.ConfigurationError) {\n                    return (0,_utils_safe_stringify_js__WEBPACK_IMPORTED_MODULE_3__.mcpError)(error.message, error.metadata);\n                }\n                // Wrap other errors in PIPGenerationError\n                const sanitized = (0,_utils_sanitize_js__WEBPACK_IMPORTED_MODULE_2__.sanitizeError)(error);\n                const context = {\n                    model,\n                    promptPath,\n                    outputLanguage,\n                    temperature,\n                    maxOutputTokens\n                };\n                return (0,_utils_safe_stringify_js__WEBPACK_IMPORTED_MODULE_3__.mcpError)(sanitized.message, {\n                    ...sanitized,\n                    context\n                });\n            }\n        })\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../src/mcp/pipGenerator.ts\n");

/***/ }),

/***/ "(rsc)/../../src/services/AnthropicService.ts":
/*!**********************************************!*\
  !*** ../../src/services/AnthropicService.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnthropicService: () => (/* binding */ AnthropicService),\n/* harmony export */   createAnthropicService: () => (/* binding */ createAnthropicService)\n/* harmony export */ });\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/../../node_modules/@anthropic-ai/sdk/index.mjs\");\n/**\n * Anthropic Service - Dependency Injection Wrapper for Anthropic SDK\n *\n * This service encapsulates all interactions with the Anthropic API,\n * making the codebase more testable and maintainable by allowing\n * dependencies to be injected rather than created inline.\n *\n * @example\n * ```typescript\n * const service = createAnthropicService(apiKey);\n * const response = await service.generateMessage({\n *   model: \"claude-sonnet-4-5-20250929\",\n *   maxTokens: 4096,\n *   temperature: 0.2,\n *   systemPrompt: \"You are an HR specialist\",\n *   userPrompt: \"Draft a PIP...\"\n * });\n * ```\n */ \n/**\n * Implementation of the Anthropic service\n *\n * Wraps the Anthropic SDK client and provides a clean interface\n * for message generation operations.\n */ class AnthropicService {\n    /**\n   * Create a new Anthropic service instance\n   *\n   * @param apiKey - Anthropic API key for authentication\n   */ constructor(apiKey){\n        this.client = new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n            apiKey\n        });\n    }\n    /**\n   * Generate a text message using Claude\n   *\n   * @param params - Message generation parameters\n   * @returns The generated text content (all text blocks joined)\n   * @throws Error if the API call fails or returns empty content\n   */ async generateMessage(params) {\n        const response = await this.client.messages.create({\n            model: params.model,\n            max_tokens: params.maxTokens,\n            temperature: params.temperature,\n            system: params.systemPrompt,\n            messages: [\n                {\n                    role: \"user\",\n                    content: params.userPrompt\n                }\n            ]\n        });\n        // Extract and join all text blocks from the response\n        const text = response.content.filter((block)=>block.type === \"text\").map((block)=>block.text).join(\"\").trim();\n        return text;\n    }\n}\n/**\n * Factory function to create an Anthropic service instance\n *\n * This pattern allows for easy service creation while maintaining\n * the ability to swap implementations for testing.\n *\n * @param apiKey - Anthropic API key for authentication\n * @returns An instance of IAnthropicService\n *\n * @example\n * ```typescript\n * const service = createAnthropicService(process.env.ANTHROPIC_API_KEY!);\n * const draft = await service.generateMessage({...});\n * ```\n */ function createAnthropicService(apiKey) {\n    return new AnthropicService(apiKey);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vc3JjL3NlcnZpY2VzL0FudGhyb3BpY1NlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWtCQyxHQUV5QztBQXdDMUM7Ozs7O0NBS0MsR0FDTSxNQUFNQztJQUdYOzs7O0dBSUMsR0FDREMsWUFBWUMsTUFBYyxDQUFFO1FBQzFCLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlKLHlEQUFTQSxDQUFDO1lBQUVHO1FBQU87SUFDdkM7SUFFQTs7Ozs7O0dBTUMsR0FDRCxNQUFNRSxnQkFBZ0JDLE1BQXFCLEVBQW1CO1FBQzVELE1BQU1DLFdBQVcsTUFBTSxJQUFJLENBQUNILE1BQU0sQ0FBQ0ksUUFBUSxDQUFDQyxNQUFNLENBQUM7WUFDakRDLE9BQU9KLE9BQU9JLEtBQUs7WUFDbkJDLFlBQVlMLE9BQU9NLFNBQVM7WUFDNUJDLGFBQWFQLE9BQU9PLFdBQVc7WUFDL0JDLFFBQVFSLE9BQU9TLFlBQVk7WUFDM0JQLFVBQVU7Z0JBQ1I7b0JBQ0VRLE1BQU07b0JBQ05DLFNBQVNYLE9BQU9ZLFVBQVU7Z0JBQzVCO2FBQ0Q7UUFDSDtRQUVBLHFEQUFxRDtRQUNyRCxNQUFNQyxPQUFPWixTQUFTVSxPQUFPLENBQzFCRyxNQUFNLENBQUMsQ0FBQ0MsUUFBOEJBLE1BQU1DLElBQUksS0FBSyxRQUNyREMsR0FBRyxDQUFDRixDQUFBQSxRQUFTQSxNQUFNRixJQUFJLEVBQ3ZCSyxJQUFJLENBQUMsSUFDTEMsSUFBSTtRQUVQLE9BQU9OO0lBQ1Q7QUFDRjtBQUVBOzs7Ozs7Ozs7Ozs7OztDQWNDLEdBQ00sU0FBU08sdUJBQXVCdkIsTUFBYztJQUNuRCxPQUFPLElBQUlGLGlCQUFpQkU7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLy4uLy4uL3NyYy9zZXJ2aWNlcy9BbnRocm9waWNTZXJ2aWNlLnRzPzBiYTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbnRocm9waWMgU2VydmljZSAtIERlcGVuZGVuY3kgSW5qZWN0aW9uIFdyYXBwZXIgZm9yIEFudGhyb3BpYyBTREtcbiAqXG4gKiBUaGlzIHNlcnZpY2UgZW5jYXBzdWxhdGVzIGFsbCBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgQW50aHJvcGljIEFQSSxcbiAqIG1ha2luZyB0aGUgY29kZWJhc2UgbW9yZSB0ZXN0YWJsZSBhbmQgbWFpbnRhaW5hYmxlIGJ5IGFsbG93aW5nXG4gKiBkZXBlbmRlbmNpZXMgdG8gYmUgaW5qZWN0ZWQgcmF0aGVyIHRoYW4gY3JlYXRlZCBpbmxpbmUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IHNlcnZpY2UgPSBjcmVhdGVBbnRocm9waWNTZXJ2aWNlKGFwaUtleSk7XG4gKiBjb25zdCByZXNwb25zZSA9IGF3YWl0IHNlcnZpY2UuZ2VuZXJhdGVNZXNzYWdlKHtcbiAqICAgbW9kZWw6IFwiY2xhdWRlLXNvbm5ldC00LTUtMjAyNTA5MjlcIixcbiAqICAgbWF4VG9rZW5zOiA0MDk2LFxuICogICB0ZW1wZXJhdHVyZTogMC4yLFxuICogICBzeXN0ZW1Qcm9tcHQ6IFwiWW91IGFyZSBhbiBIUiBzcGVjaWFsaXN0XCIsXG4gKiAgIHVzZXJQcm9tcHQ6IFwiRHJhZnQgYSBQSVAuLi5cIlxuICogfSk7XG4gKiBgYGBcbiAqL1xuXG5pbXBvcnQgQW50aHJvcGljIGZyb20gXCJAYW50aHJvcGljLWFpL3Nka1wiO1xuaW1wb3J0IHR5cGUgeyBUZXh0QmxvY2sgfSBmcm9tIFwiQGFudGhyb3BpYy1haS9zZGsvcmVzb3VyY2VzL21lc3NhZ2VzXCI7XG5cbi8qKlxuICogUGFyYW1ldGVycyBmb3IgbWVzc2FnZSBnZW5lcmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZVBhcmFtcyB7XG4gIC8qKiBNb2RlbCBpZGVudGlmaWVyIChlLmcuLCBcImNsYXVkZS1zb25uZXQtNC01LTIwMjUwOTI5XCIpICovXG4gIG1vZGVsOiBzdHJpbmc7XG4gIC8qKiBNYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgdG8gZ2VuZXJhdGUgKi9cbiAgbWF4VG9rZW5zOiBudW1iZXI7XG4gIC8qKiBUZW1wZXJhdHVyZSBmb3IgcmFuZG9tbmVzcyAoMC0xKSAqL1xuICB0ZW1wZXJhdHVyZTogbnVtYmVyO1xuICAvKiogU3lzdGVtIHByb21wdCB0byBzZXQgYmVoYXZpb3IvY29udGV4dCAqL1xuICBzeXN0ZW1Qcm9tcHQ6IHN0cmluZztcbiAgLyoqIFVzZXIgcHJvbXB0IHdpdGggdGhlIGFjdHVhbCByZXF1ZXN0ICovXG4gIHVzZXJQcm9tcHQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIEFudGhyb3BpYyBzZXJ2aWNlIG9wZXJhdGlvbnNcbiAqXG4gKiBUaGlzIGludGVyZmFjZSBhbGxvd3MgZm9yIGVhc3kgbW9ja2luZyBpbiB0ZXN0czpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IG1vY2tTZXJ2aWNlOiBJQW50aHJvcGljU2VydmljZSA9IHtcbiAqICAgZ2VuZXJhdGVNZXNzYWdlOiBhc3luYyAoKSA9PiBcIm1vY2sgcmVzcG9uc2VcIlxuICogfTtcbiAqIGBgYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElBbnRocm9waWNTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgdGV4dCBtZXNzYWdlIHVzaW5nIENsYXVkZVxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIC0gTWVzc2FnZSBnZW5lcmF0aW9uIHBhcmFtZXRlcnNcbiAgICogQHJldHVybnMgVGhlIGdlbmVyYXRlZCB0ZXh0IGNvbnRlbnRcbiAgICogQHRocm93cyBFcnJvciBpZiB0aGUgQVBJIGNhbGwgZmFpbHMgb3IgcmV0dXJucyBlbXB0eSBjb250ZW50XG4gICAqL1xuICBnZW5lcmF0ZU1lc3NhZ2UocGFyYW1zOiBNZXNzYWdlUGFyYW1zKTogUHJvbWlzZTxzdHJpbmc+O1xufVxuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSBBbnRocm9waWMgc2VydmljZVxuICpcbiAqIFdyYXBzIHRoZSBBbnRocm9waWMgU0RLIGNsaWVudCBhbmQgcHJvdmlkZXMgYSBjbGVhbiBpbnRlcmZhY2VcbiAqIGZvciBtZXNzYWdlIGdlbmVyYXRpb24gb3BlcmF0aW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFudGhyb3BpY1NlcnZpY2UgaW1wbGVtZW50cyBJQW50aHJvcGljU2VydmljZSB7XG4gIHByaXZhdGUgY2xpZW50OiBBbnRocm9waWM7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBBbnRocm9waWMgc2VydmljZSBpbnN0YW5jZVxuICAgKlxuICAgKiBAcGFyYW0gYXBpS2V5IC0gQW50aHJvcGljIEFQSSBrZXkgZm9yIGF1dGhlbnRpY2F0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhcGlLZXk6IHN0cmluZykge1xuICAgIHRoaXMuY2xpZW50ID0gbmV3IEFudGhyb3BpYyh7IGFwaUtleSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHRleHQgbWVzc2FnZSB1c2luZyBDbGF1ZGVcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIE1lc3NhZ2UgZ2VuZXJhdGlvbiBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgdGV4dCBjb250ZW50IChhbGwgdGV4dCBibG9ja3Mgam9pbmVkKVxuICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBBUEkgY2FsbCBmYWlscyBvciByZXR1cm5zIGVtcHR5IGNvbnRlbnRcbiAgICovXG4gIGFzeW5jIGdlbmVyYXRlTWVzc2FnZShwYXJhbXM6IE1lc3NhZ2VQYXJhbXMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jbGllbnQubWVzc2FnZXMuY3JlYXRlKHtcbiAgICAgIG1vZGVsOiBwYXJhbXMubW9kZWwsXG4gICAgICBtYXhfdG9rZW5zOiBwYXJhbXMubWF4VG9rZW5zLFxuICAgICAgdGVtcGVyYXR1cmU6IHBhcmFtcy50ZW1wZXJhdHVyZSxcbiAgICAgIHN5c3RlbTogcGFyYW1zLnN5c3RlbVByb21wdCxcbiAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICByb2xlOiBcInVzZXJcIixcbiAgICAgICAgICBjb250ZW50OiBwYXJhbXMudXNlclByb21wdFxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSk7XG5cbiAgICAvLyBFeHRyYWN0IGFuZCBqb2luIGFsbCB0ZXh0IGJsb2NrcyBmcm9tIHRoZSByZXNwb25zZVxuICAgIGNvbnN0IHRleHQgPSByZXNwb25zZS5jb250ZW50XG4gICAgICAuZmlsdGVyKChibG9jayk6IGJsb2NrIGlzIFRleHRCbG9jayA9PiBibG9jay50eXBlID09PSBcInRleHRcIilcbiAgICAgIC5tYXAoYmxvY2sgPT4gYmxvY2sudGV4dClcbiAgICAgIC5qb2luKFwiXCIpXG4gICAgICAudHJpbSgpO1xuXG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbn1cblxuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhbiBBbnRocm9waWMgc2VydmljZSBpbnN0YW5jZVxuICpcbiAqIFRoaXMgcGF0dGVybiBhbGxvd3MgZm9yIGVhc3kgc2VydmljZSBjcmVhdGlvbiB3aGlsZSBtYWludGFpbmluZ1xuICogdGhlIGFiaWxpdHkgdG8gc3dhcCBpbXBsZW1lbnRhdGlvbnMgZm9yIHRlc3RpbmcuXG4gKlxuICogQHBhcmFtIGFwaUtleSAtIEFudGhyb3BpYyBBUEkga2V5IGZvciBhdXRoZW50aWNhdGlvblxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgSUFudGhyb3BpY1NlcnZpY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3Qgc2VydmljZSA9IGNyZWF0ZUFudGhyb3BpY1NlcnZpY2UocHJvY2Vzcy5lbnYuQU5USFJPUElDX0FQSV9LRVkhKTtcbiAqIGNvbnN0IGRyYWZ0ID0gYXdhaXQgc2VydmljZS5nZW5lcmF0ZU1lc3NhZ2Uoey4uLn0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBbnRocm9waWNTZXJ2aWNlKGFwaUtleTogc3RyaW5nKTogSUFudGhyb3BpY1NlcnZpY2Uge1xuICByZXR1cm4gbmV3IEFudGhyb3BpY1NlcnZpY2UoYXBpS2V5KTtcbn1cbiJdLCJuYW1lcyI6WyJBbnRocm9waWMiLCJBbnRocm9waWNTZXJ2aWNlIiwiY29uc3RydWN0b3IiLCJhcGlLZXkiLCJjbGllbnQiLCJnZW5lcmF0ZU1lc3NhZ2UiLCJwYXJhbXMiLCJyZXNwb25zZSIsIm1lc3NhZ2VzIiwiY3JlYXRlIiwibW9kZWwiLCJtYXhfdG9rZW5zIiwibWF4VG9rZW5zIiwidGVtcGVyYXR1cmUiLCJzeXN0ZW0iLCJzeXN0ZW1Qcm9tcHQiLCJyb2xlIiwiY29udGVudCIsInVzZXJQcm9tcHQiLCJ0ZXh0IiwiZmlsdGVyIiwiYmxvY2siLCJ0eXBlIiwibWFwIiwiam9pbiIsInRyaW0iLCJjcmVhdGVBbnRocm9waWNTZXJ2aWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../src/services/AnthropicService.ts\n");

/***/ }),

/***/ "(rsc)/../../src/services/FileSystemService.ts":
/*!***********************************************!*\
  !*** ../../src/services/FileSystemService.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileSystemService: () => (/* binding */ FileSystemService),\n/* harmony export */   createFileSystemService: () => (/* binding */ createFileSystemService)\n/* harmony export */ });\n/* harmony import */ var node_fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\n/* harmony import */ var node_fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_fs__WEBPACK_IMPORTED_MODULE_1__);\n/**\n * File System Service - Dependency Injection Wrapper for Node.js fs module\n *\n * This service encapsulates all file system operations, making the codebase\n * more testable by allowing file system interactions to be mocked.\n *\n * @example\n * ```typescript\n * const service = createFileSystemService();\n * const content = await service.readFile(\"/path/to/file.txt\", \"utf-8\");\n * await service.writeFile(\"/path/to/output.txt\", \"content\");\n * ```\n */ \n\n/**\n * Implementation of the file system service\n *\n * Wraps the Node.js fs module and provides a clean interface\n * for file system operations.\n */ class FileSystemService {\n    /**\n   * Read file contents asynchronously\n   */ async readFile(path, encoding) {\n        if (encoding) {\n            return await node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile(path, encoding);\n        }\n        return await node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile(path);\n    }\n    /**\n   * Write content to a file asynchronously\n   */ async writeFile(path, data) {\n        await node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.writeFile(path, data);\n    }\n    /**\n   * Create a directory asynchronously\n   */ async mkdir(path, options) {\n        await node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.mkdir(path, options);\n    }\n    /**\n   * Check if a file or directory exists asynchronously\n   */ async exists(path) {\n        try {\n            await node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.access(path);\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    /**\n   * Check if a file or directory exists synchronously\n   */ existsSync(path) {\n        return node_fs__WEBPACK_IMPORTED_MODULE_1__.existsSync(path);\n    }\n    /**\n   * Read directory contents asynchronously\n   */ async readdir(path) {\n        return await node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.readdir(path);\n    }\n    /**\n   * Create a temporary directory asynchronously\n   */ async mkdtemp(prefix) {\n        return await node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.mkdtemp(prefix);\n    }\n    /**\n   * Remove a directory and its contents recursively asynchronously\n   */ async rm(path, options) {\n        await node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.rm(path, options);\n    }\n    /**\n   * Get file or directory statistics asynchronously\n   */ async stat(path) {\n        const stats = await node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.stat(path);\n        return {\n            size: stats.size,\n            isFile: ()=>stats.isFile(),\n            isDirectory: ()=>stats.isDirectory()\n        };\n    }\n}\n/**\n * Factory function to create a file system service instance\n *\n * This pattern allows for easy service creation while maintaining\n * the ability to swap implementations for testing.\n *\n * @returns An instance of IFileSystemService\n *\n * @example\n * ```typescript\n * const service = createFileSystemService();\n * const content = await service.readFile(\"/path/to/file.txt\", \"utf-8\");\n * ```\n */ function createFileSystemService() {\n    return new FileSystemService();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vc3JjL3NlcnZpY2VzL0ZpbGVTeXN0ZW1TZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUVzQztBQUNMO0FBMEdsQzs7Ozs7Q0FLQyxHQUNNLE1BQU1FO0lBQ1g7O0dBRUMsR0FDRCxNQUFNQyxTQUFTQyxJQUFZLEVBQUVDLFFBQWdDLEVBQTRCO1FBQ3ZGLElBQUlBLFVBQVU7WUFDWixPQUFPLE1BQU1MLHNEQUFXLENBQUNJLE1BQU1DO1FBQ2pDO1FBQ0EsT0FBTyxNQUFNTCxzREFBVyxDQUFDSTtJQUMzQjtJQUVBOztHQUVDLEdBQ0QsTUFBTUUsVUFBVUYsSUFBWSxFQUFFRyxJQUFxQixFQUFpQjtRQUNsRSxNQUFNUCx1REFBWSxDQUFDSSxNQUFNRztJQUMzQjtJQUVBOztHQUVDLEdBQ0QsTUFBTUMsTUFBTUosSUFBWSxFQUFFSyxPQUFzQixFQUFpQjtRQUMvRCxNQUFNVCxtREFBUSxDQUFDSSxNQUFNSztJQUN2QjtJQUVBOztHQUVDLEdBQ0QsTUFBTUMsT0FBT04sSUFBWSxFQUFvQjtRQUMzQyxJQUFJO1lBQ0YsTUFBTUosb0RBQVMsQ0FBQ0k7WUFDaEIsT0FBTztRQUNULEVBQUUsT0FBTTtZQUNOLE9BQU87UUFDVDtJQUNGO0lBRUE7O0dBRUMsR0FDRFEsV0FBV1IsSUFBWSxFQUFXO1FBQ2hDLE9BQU9ILCtDQUFpQixDQUFDRztJQUMzQjtJQUVBOztHQUVDLEdBQ0QsTUFBTVMsUUFBUVQsSUFBWSxFQUFxQjtRQUM3QyxPQUFPLE1BQU1KLHFEQUFVLENBQUNJO0lBQzFCO0lBRUE7O0dBRUMsR0FDRCxNQUFNVSxRQUFRQyxNQUFjLEVBQW1CO1FBQzdDLE9BQU8sTUFBTWYscURBQVUsQ0FBQ2U7SUFDMUI7SUFFQTs7R0FFQyxHQUNELE1BQU1DLEdBQUdaLElBQVksRUFBRUssT0FBa0QsRUFBaUI7UUFDeEYsTUFBTVQsZ0RBQUssQ0FBQ0ksTUFBTUs7SUFDcEI7SUFFQTs7R0FFQyxHQUNELE1BQU1RLEtBQUtiLElBQVksRUFBZ0Y7UUFDckcsTUFBTWMsUUFBUSxNQUFNbEIsa0RBQU8sQ0FBQ0k7UUFDNUIsT0FBTztZQUNMZSxNQUFNRCxNQUFNQyxJQUFJO1lBQ2hCQyxRQUFRLElBQU1GLE1BQU1FLE1BQU07WUFDMUJDLGFBQWEsSUFBTUgsTUFBTUcsV0FBVztRQUN0QztJQUNGO0FBQ0Y7QUFFQTs7Ozs7Ozs7Ozs7OztDQWFDLEdBQ00sU0FBU0M7SUFDZCxPQUFPLElBQUlwQjtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBpcC91aS8uLi8uLi9zcmMvc2VydmljZXMvRmlsZVN5c3RlbVNlcnZpY2UudHM/NjcyYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZpbGUgU3lzdGVtIFNlcnZpY2UgLSBEZXBlbmRlbmN5IEluamVjdGlvbiBXcmFwcGVyIGZvciBOb2RlLmpzIGZzIG1vZHVsZVxuICpcbiAqIFRoaXMgc2VydmljZSBlbmNhcHN1bGF0ZXMgYWxsIGZpbGUgc3lzdGVtIG9wZXJhdGlvbnMsIG1ha2luZyB0aGUgY29kZWJhc2VcbiAqIG1vcmUgdGVzdGFibGUgYnkgYWxsb3dpbmcgZmlsZSBzeXN0ZW0gaW50ZXJhY3Rpb25zIHRvIGJlIG1vY2tlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3Qgc2VydmljZSA9IGNyZWF0ZUZpbGVTeXN0ZW1TZXJ2aWNlKCk7XG4gKiBjb25zdCBjb250ZW50ID0gYXdhaXQgc2VydmljZS5yZWFkRmlsZShcIi9wYXRoL3RvL2ZpbGUudHh0XCIsIFwidXRmLThcIik7XG4gKiBhd2FpdCBzZXJ2aWNlLndyaXRlRmlsZShcIi9wYXRoL3RvL291dHB1dC50eHRcIiwgXCJjb250ZW50XCIpO1xuICogYGBgXG4gKi9cblxuaW1wb3J0ICogYXMgZnMgZnJvbSBcIm5vZGU6ZnMvcHJvbWlzZXNcIjtcbmltcG9ydCAqIGFzIGZzc3luYyBmcm9tIFwibm9kZTpmc1wiO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIG1rZGlyIG9wZXJhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1rZGlyT3B0aW9ucyB7XG4gIC8qKiBDcmVhdGUgcGFyZW50IGRpcmVjdG9yaWVzIGlmIHRoZXkgZG9uJ3QgZXhpc3QgKi9cbiAgcmVjdXJzaXZlPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIGZpbGUgc3lzdGVtIHNlcnZpY2Ugb3BlcmF0aW9uc1xuICpcbiAqIFRoaXMgaW50ZXJmYWNlIGFsbG93cyBmb3IgZWFzeSBtb2NraW5nIGluIHRlc3RzOlxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgbW9ja0ZzOiBJRmlsZVN5c3RlbVNlcnZpY2UgPSB7XG4gKiAgIHJlYWRGaWxlOiBhc3luYyAoKSA9PiBcIm1vY2sgY29udGVudFwiLFxuICogICB3cml0ZUZpbGU6IGFzeW5jICgpID0+IHt9LFxuICogICBta2RpcjogYXN5bmMgKCkgPT4ge30sXG4gKiAgIGV4aXN0czogYXN5bmMgKCkgPT4gdHJ1ZSxcbiAqICAgZXhpc3RzU3luYzogKCkgPT4gdHJ1ZVxuICogfTtcbiAqIGBgYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlU3lzdGVtU2VydmljZSB7XG4gIC8qKlxuICAgKiBSZWFkIGZpbGUgY29udGVudHMgYXN5bmNocm9ub3VzbHlcbiAgICpcbiAgICogQHBhcmFtIHBhdGggLSBQYXRoIHRvIHRoZSBmaWxlIHRvIHJlYWRcbiAgICogQHBhcmFtIGVuY29kaW5nIC0gVGV4dCBlbmNvZGluZyAoZS5nLiwgXCJ1dGYtOFwiKSBvciBudWxsIGZvciBCdWZmZXJcbiAgICogQHJldHVybnMgRmlsZSBjb250ZW50cyBhcyBzdHJpbmcgKGlmIGVuY29kaW5nIHNwZWNpZmllZCkgb3IgQnVmZmVyXG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgZmlsZSBkb2Vzbid0IGV4aXN0IG9yIGNhbm5vdCBiZSByZWFkXG4gICAqL1xuICByZWFkRmlsZShwYXRoOiBzdHJpbmcsIGVuY29kaW5nPzogQnVmZmVyRW5jb2RpbmcgfCBudWxsKTogUHJvbWlzZTxzdHJpbmcgfCBCdWZmZXI+O1xuXG4gIC8qKlxuICAgKiBXcml0ZSBjb250ZW50IHRvIGEgZmlsZSBhc3luY2hyb25vdXNseVxuICAgKlxuICAgKiBAcGFyYW0gcGF0aCAtIFBhdGggdG8gdGhlIGZpbGUgdG8gd3JpdGVcbiAgICogQHBhcmFtIGRhdGEgLSBDb250ZW50IHRvIHdyaXRlIChzdHJpbmcgb3IgQnVmZmVyKVxuICAgKiBAdGhyb3dzIEVycm9yIGlmIGZpbGUgY2Fubm90IGJlIHdyaXR0ZW5cbiAgICovXG4gIHdyaXRlRmlsZShwYXRoOiBzdHJpbmcsIGRhdGE6IHN0cmluZyB8IEJ1ZmZlcik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGRpcmVjdG9yeSBhc3luY2hyb25vdXNseVxuICAgKlxuICAgKiBAcGFyYW0gcGF0aCAtIFBhdGggdG8gdGhlIGRpcmVjdG9yeSB0byBjcmVhdGVcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGxpa2UgcmVjdXJzaXZlIGRpcmVjdG9yeSBjcmVhdGlvblxuICAgKiBAdGhyb3dzIEVycm9yIGlmIGRpcmVjdG9yeSBjYW5ub3QgYmUgY3JlYXRlZFxuICAgKi9cbiAgbWtkaXIocGF0aDogc3RyaW5nLCBvcHRpb25zPzogTWtkaXJPcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBmaWxlIG9yIGRpcmVjdG9yeSBleGlzdHMgYXN5bmNocm9ub3VzbHlcbiAgICpcbiAgICogQHBhcmFtIHBhdGggLSBQYXRoIHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHBhdGggZXhpc3RzLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIGV4aXN0cyhwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIGZpbGUgb3IgZGlyZWN0b3J5IGV4aXN0cyBzeW5jaHJvbm91c2x5XG4gICAqXG4gICAqIEBwYXJhbSBwYXRoIC0gUGF0aCB0byBjaGVja1xuICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBwYXRoIGV4aXN0cywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBleGlzdHNTeW5jKHBhdGg6IHN0cmluZyk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFJlYWQgZGlyZWN0b3J5IGNvbnRlbnRzIGFzeW5jaHJvbm91c2x5XG4gICAqXG4gICAqIEBwYXJhbSBwYXRoIC0gUGF0aCB0byB0aGUgZGlyZWN0b3J5IHRvIHJlYWRcbiAgICogQHJldHVybnMgQXJyYXkgb2YgZmlsZSBhbmQgZGlyZWN0b3J5IG5hbWVzXG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgZGlyZWN0b3J5IGNhbm5vdCBiZSByZWFkXG4gICAqL1xuICByZWFkZGlyKHBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+O1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSB0ZW1wb3JhcnkgZGlyZWN0b3J5IGFzeW5jaHJvbm91c2x5XG4gICAqXG4gICAqIEBwYXJhbSBwcmVmaXggLSBQcmVmaXggZm9yIHRoZSB0ZW1wb3JhcnkgZGlyZWN0b3J5IG5hbWVcbiAgICogQHJldHVybnMgUGF0aCB0byB0aGUgY3JlYXRlZCB0ZW1wb3JhcnkgZGlyZWN0b3J5XG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgZGlyZWN0b3J5IGNhbm5vdCBiZSBjcmVhdGVkXG4gICAqL1xuICBta2R0ZW1wKHByZWZpeDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBkaXJlY3RvcnkgYW5kIGl0cyBjb250ZW50cyByZWN1cnNpdmVseSBhc3luY2hyb25vdXNseVxuICAgKlxuICAgKiBAcGFyYW0gcGF0aCAtIFBhdGggdG8gdGhlIGRpcmVjdG9yeSB0byByZW1vdmVcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGxpa2UgcmVjdXJzaXZlIHJlbW92YWxcbiAgICogQHRocm93cyBFcnJvciBpZiBkaXJlY3RvcnkgY2Fubm90IGJlIHJlbW92ZWRcbiAgICovXG4gIHJtKHBhdGg6IHN0cmluZywgb3B0aW9ucz86IHsgcmVjdXJzaXZlPzogYm9vbGVhbjsgZm9yY2U/OiBib29sZWFuIH0pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBHZXQgZmlsZSBvciBkaXJlY3Rvcnkgc3RhdGlzdGljcyBhc3luY2hyb25vdXNseVxuICAgKlxuICAgKiBAcGFyYW0gcGF0aCAtIFBhdGggdG8gdGhlIGZpbGUgb3IgZGlyZWN0b3J5XG4gICAqIEByZXR1cm5zIEZpbGUgc3RhdGlzdGljcyBpbmNsdWRpbmcgc2l6ZSwgbW9kaWZpY2F0aW9uIHRpbWUsIGV0Yy5cbiAgICogQHRocm93cyBFcnJvciBpZiBwYXRoIGRvZXNuJ3QgZXhpc3Qgb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG4gICAqL1xuICBzdGF0KHBhdGg6IHN0cmluZyk6IFByb21pc2U8eyBzaXplOiBudW1iZXI7IGlzRmlsZTogKCkgPT4gYm9vbGVhbjsgaXNEaXJlY3Rvcnk6ICgpID0+IGJvb2xlYW4gfT47XG59XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIGZpbGUgc3lzdGVtIHNlcnZpY2VcbiAqXG4gKiBXcmFwcyB0aGUgTm9kZS5qcyBmcyBtb2R1bGUgYW5kIHByb3ZpZGVzIGEgY2xlYW4gaW50ZXJmYWNlXG4gKiBmb3IgZmlsZSBzeXN0ZW0gb3BlcmF0aW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIEZpbGVTeXN0ZW1TZXJ2aWNlIGltcGxlbWVudHMgSUZpbGVTeXN0ZW1TZXJ2aWNlIHtcbiAgLyoqXG4gICAqIFJlYWQgZmlsZSBjb250ZW50cyBhc3luY2hyb25vdXNseVxuICAgKi9cbiAgYXN5bmMgcmVhZEZpbGUocGF0aDogc3RyaW5nLCBlbmNvZGluZz86IEJ1ZmZlckVuY29kaW5nIHwgbnVsbCk6IFByb21pc2U8c3RyaW5nIHwgQnVmZmVyPiB7XG4gICAgaWYgKGVuY29kaW5nKSB7XG4gICAgICByZXR1cm4gYXdhaXQgZnMucmVhZEZpbGUocGF0aCwgZW5jb2RpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgZnMucmVhZEZpbGUocGF0aCk7XG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgY29udGVudCB0byBhIGZpbGUgYXN5bmNocm9ub3VzbHlcbiAgICovXG4gIGFzeW5jIHdyaXRlRmlsZShwYXRoOiBzdHJpbmcsIGRhdGE6IHN0cmluZyB8IEJ1ZmZlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShwYXRoLCBkYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBkaXJlY3RvcnkgYXN5bmNocm9ub3VzbHlcbiAgICovXG4gIGFzeW5jIG1rZGlyKHBhdGg6IHN0cmluZywgb3B0aW9ucz86IE1rZGlyT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IGZzLm1rZGlyKHBhdGgsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgZmlsZSBvciBkaXJlY3RvcnkgZXhpc3RzIGFzeW5jaHJvbm91c2x5XG4gICAqL1xuICBhc3luYyBleGlzdHMocGF0aDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGZzLmFjY2VzcyhwYXRoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIGZpbGUgb3IgZGlyZWN0b3J5IGV4aXN0cyBzeW5jaHJvbm91c2x5XG4gICAqL1xuICBleGlzdHNTeW5jKHBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmc3N5bmMuZXhpc3RzU3luYyhwYXRoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIGRpcmVjdG9yeSBjb250ZW50cyBhc3luY2hyb25vdXNseVxuICAgKi9cbiAgYXN5bmMgcmVhZGRpcihwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuIGF3YWl0IGZzLnJlYWRkaXIocGF0aCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgdGVtcG9yYXJ5IGRpcmVjdG9yeSBhc3luY2hyb25vdXNseVxuICAgKi9cbiAgYXN5bmMgbWtkdGVtcChwcmVmaXg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIGF3YWl0IGZzLm1rZHRlbXAocHJlZml4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBkaXJlY3RvcnkgYW5kIGl0cyBjb250ZW50cyByZWN1cnNpdmVseSBhc3luY2hyb25vdXNseVxuICAgKi9cbiAgYXN5bmMgcm0ocGF0aDogc3RyaW5nLCBvcHRpb25zPzogeyByZWN1cnNpdmU/OiBib29sZWFuOyBmb3JjZT86IGJvb2xlYW4gfSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IGZzLnJtKHBhdGgsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBmaWxlIG9yIGRpcmVjdG9yeSBzdGF0aXN0aWNzIGFzeW5jaHJvbm91c2x5XG4gICAqL1xuICBhc3luYyBzdGF0KHBhdGg6IHN0cmluZyk6IFByb21pc2U8eyBzaXplOiBudW1iZXI7IGlzRmlsZTogKCkgPT4gYm9vbGVhbjsgaXNEaXJlY3Rvcnk6ICgpID0+IGJvb2xlYW4gfT4ge1xuICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgZnMuc3RhdChwYXRoKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2l6ZTogc3RhdHMuc2l6ZSxcbiAgICAgIGlzRmlsZTogKCkgPT4gc3RhdHMuaXNGaWxlKCksXG4gICAgICBpc0RpcmVjdG9yeTogKCkgPT4gc3RhdHMuaXNEaXJlY3RvcnkoKVxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIGZpbGUgc3lzdGVtIHNlcnZpY2UgaW5zdGFuY2VcbiAqXG4gKiBUaGlzIHBhdHRlcm4gYWxsb3dzIGZvciBlYXN5IHNlcnZpY2UgY3JlYXRpb24gd2hpbGUgbWFpbnRhaW5pbmdcbiAqIHRoZSBhYmlsaXR5IHRvIHN3YXAgaW1wbGVtZW50YXRpb25zIGZvciB0ZXN0aW5nLlxuICpcbiAqIEByZXR1cm5zIEFuIGluc3RhbmNlIG9mIElGaWxlU3lzdGVtU2VydmljZVxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBzZXJ2aWNlID0gY3JlYXRlRmlsZVN5c3RlbVNlcnZpY2UoKTtcbiAqIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBzZXJ2aWNlLnJlYWRGaWxlKFwiL3BhdGgvdG8vZmlsZS50eHRcIiwgXCJ1dGYtOFwiKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmlsZVN5c3RlbVNlcnZpY2UoKTogSUZpbGVTeXN0ZW1TZXJ2aWNlIHtcbiAgcmV0dXJuIG5ldyBGaWxlU3lzdGVtU2VydmljZSgpO1xufVxuIl0sIm5hbWVzIjpbImZzIiwiZnNzeW5jIiwiRmlsZVN5c3RlbVNlcnZpY2UiLCJyZWFkRmlsZSIsInBhdGgiLCJlbmNvZGluZyIsIndyaXRlRmlsZSIsImRhdGEiLCJta2RpciIsIm9wdGlvbnMiLCJleGlzdHMiLCJhY2Nlc3MiLCJleGlzdHNTeW5jIiwicmVhZGRpciIsIm1rZHRlbXAiLCJwcmVmaXgiLCJybSIsInN0YXQiLCJzdGF0cyIsInNpemUiLCJpc0ZpbGUiLCJpc0RpcmVjdG9yeSIsImNyZWF0ZUZpbGVTeXN0ZW1TZXJ2aWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../src/services/FileSystemService.ts\n");

/***/ }),

/***/ "(rsc)/../../src/services/GeminiService.ts":
/*!*******************************************!*\
  !*** ../../src/services/GeminiService.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GeminiService: () => (/* binding */ GeminiService),\n/* harmony export */   createGeminiService: () => (/* binding */ createGeminiService)\n/* harmony export */ });\n/**\n * Gemini Service - Dependency Injection Wrapper for Google Gen AI SDK\n *\n * This service encapsulates all interactions with the Gemini API,\n * making the codebase more testable and maintainable by allowing\n * dependencies to be injected rather than created inline.\n *\n * @example\n * ```typescript\n * const service = createGeminiService(apiKey);\n * const uploadedFile = await service.uploadFile(\"/path/to/audio.mp3\", \"audio/mp3\");\n * const result = await service.generateContent({\n *   model: \"gemini-2.5-pro\",\n *   contents: [...],\n *   config: { responseMimeType: \"application/json\" }\n * });\n * ```\n */ /**\n * Uploaded file information returned by Gemini\n */ /**\n * Implementation of the Gemini service\n *\n * Wraps the Google Gen AI SDK and provides a clean interface\n * for file upload and content generation operations.\n */ class GeminiService {\n    /**\n   * Create a new Gemini service instance\n   *\n   * @param apiKey - Gemini API key for authentication\n   */ constructor(apiKey){\n        // Lazy-load the Google Gen AI SDK to avoid import errors if not installed\n        // This is safe because the service is only created when needed\n        const loadGeminiSDK = async ()=>{\n            const { GoogleGenAI } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/google-auth-library\"), __webpack_require__.e(\"vendor-chunks/uuid\"), __webpack_require__.e(\"vendor-chunks/ws\"), __webpack_require__.e(\"vendor-chunks/gaxios\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/jws\"), __webpack_require__.e(\"vendor-chunks/debug\"), __webpack_require__.e(\"vendor-chunks/json-bigint\"), __webpack_require__.e(\"vendor-chunks/google-logging-utils\"), __webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/https-proxy-agent\"), __webpack_require__.e(\"vendor-chunks/gcp-metadata\"), __webpack_require__.e(\"vendor-chunks/ecdsa-sig-formatter\"), __webpack_require__.e(\"vendor-chunks/agent-base\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\"), __webpack_require__.e(\"vendor-chunks/supports-color\"), __webpack_require__.e(\"vendor-chunks/safe-buffer\"), __webpack_require__.e(\"vendor-chunks/ms\"), __webpack_require__.e(\"vendor-chunks/jwa\"), __webpack_require__.e(\"vendor-chunks/is-stream\"), __webpack_require__.e(\"vendor-chunks/has-flag\"), __webpack_require__.e(\"vendor-chunks/gtoken\"), __webpack_require__.e(\"vendor-chunks/extend\"), __webpack_require__.e(\"vendor-chunks/buffer-equal-constant-time\"), __webpack_require__.e(\"vendor-chunks/bignumber.js\"), __webpack_require__.e(\"vendor-chunks/base64-js\"), __webpack_require__.e(\"vendor-chunks/@google\"), __webpack_require__.e(\"_3713-_8e41\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @google/genai */ \"(rsc)/../../node_modules/@google/genai/dist/node/index.js\", 19));\n            return new GoogleGenAI({\n                apiKey\n            });\n        };\n        // Store the promise for lazy initialization\n        this.aiPromise = loadGeminiSDK();\n    }\n    /**\n   * Ensure the AI client is initialized\n   */ async ensureClient() {\n        if (!this.ai) {\n            this.ai = await this.aiPromise;\n        }\n        return this.ai;\n    }\n    /**\n   * Upload a file to Gemini for processing\n   *\n   * @param filePath - Absolute path to the file to upload\n   * @param mimeType - MIME type of the file\n   * @returns Upload result with file URI and metadata\n   */ async uploadFile(filePath, mimeType) {\n        const ai = await this.ensureClient();\n        const uploaded = await ai.files.upload({\n            file: filePath,\n            config: {\n                mimeType\n            }\n        });\n        // Normalize the response structure (API may return different shapes)\n        const uploadedFile = uploaded.file ?? uploaded;\n        return {\n            uri: uploadedFile?.uri,\n            fileUri: uploadedFile?.fileUri,\n            mimeType: uploadedFile?.mimeType,\n            fileMimeType: uploadedFile?.fileMimeType\n        };\n    }\n    /**\n   * Generate content using Gemini model\n   *\n   * @param params - Content generation parameters\n   * @returns Generated content result\n   */ async generateContent(params) {\n        const ai = await this.ensureClient();\n        const result = await ai.models.generateContent({\n            model: params.model,\n            contents: params.contents,\n            config: params.config\n        });\n        return {\n            text: result.text,\n            response: result.response\n        };\n    }\n}\n/**\n * Factory function to create a Gemini service instance\n *\n * This pattern allows for easy service creation while maintaining\n * the ability to swap implementations for testing.\n *\n * @param apiKey - Gemini API key for authentication\n * @returns An instance of IGeminiService\n *\n * @example\n * ```typescript\n * const service = createGeminiService(process.env.GEMINI_API_KEY!);\n * const uploaded = await service.uploadFile(\"/audio.mp3\", \"audio/mp3\");\n * ```\n */ function createGeminiService(apiKey) {\n    return new GeminiService(apiKey);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../src/services/GeminiService.ts\n");

/***/ }),

/***/ "(rsc)/../../src/services/S3Service.ts":
/*!***************************************!*\
  !*** ../../src/services/S3Service.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S3Service: () => (/* binding */ S3Service),\n/* harmony export */   createS3Service: () => (/* binding */ createS3Service)\n/* harmony export */ });\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_shell_safe_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/shell-safe.js */ \"(rsc)/../../src/utils/shell-safe.ts\");\n/* harmony import */ var _utils_logger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger.js */ \"(rsc)/../../src/utils/logger.ts\");\n/* harmony import */ var _utils_sanitize_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/sanitize.js */ \"(rsc)/../../src/utils/sanitize.ts\");\n\n\n\n\n\nclass S3Service {\n    constructor(profile){\n        this.profile = profile;\n        this.logger = (0,_utils_logger_js__WEBPACK_IMPORTED_MODULE_3__.createChildLogger)(\"s3-service\");\n    }\n    async aws(args, opts) {\n        // Use validatePaths: false to allow s3:// URIs\n        try {\n            return await (0,_utils_shell_safe_js__WEBPACK_IMPORTED_MODULE_2__.safeSpawn)(\"aws\", args, {\n                timeout: opts?.timeout ?? 120000,\n                validatePaths: false\n            });\n        } catch (err) {\n            const msg = String(err?.message || err || \"\");\n            const ssoExpired = /Token has expired and refresh failed|SSO.+expired|sso login required/i.test(msg);\n            if (!ssoExpired) throw err;\n            // Attempt interactive SSO login (opens browser) then retry once\n            this.logger.info({\n                profile: this.profile\n            }, \"AWS SSO token expired; attempting 'aws sso login'\");\n            try {\n                await (0,_utils_shell_safe_js__WEBPACK_IMPORTED_MODULE_2__.safeSpawn)(\"aws\", [\n                    \"sso\",\n                    \"login\",\n                    \"--profile\",\n                    this.profile\n                ], {\n                    timeout: 10 * 60 * 1000,\n                    validatePaths: false\n                });\n            } catch (e1) {\n                // As a fallback, try device code flow (no-browser)\n                this.logger.warn({\n                    profile: this.profile\n                }, \"Interactive SSO login failed; attempting device code (--no-browser)\");\n                await (0,_utils_shell_safe_js__WEBPACK_IMPORTED_MODULE_2__.safeSpawn)(\"aws\", [\n                    \"sso\",\n                    \"login\",\n                    \"--no-browser\",\n                    \"--profile\",\n                    this.profile\n                ], {\n                    timeout: 10 * 60 * 1000,\n                    validatePaths: false\n                });\n            }\n            // Retry original command once\n            return await (0,_utils_shell_safe_js__WEBPACK_IMPORTED_MODULE_2__.safeSpawn)(\"aws\", args, {\n                timeout: opts?.timeout ?? 120000,\n                validatePaths: false\n            });\n        }\n    }\n    async getRegion() {\n        try {\n            const { stdout } = await this.aws([\n                \"configure\",\n                \"get\",\n                \"region\",\n                \"--profile\",\n                this.profile\n            ], {\n                timeout: 10000\n            });\n            const region = stdout.trim() || \"us-east-1\";\n            return region;\n        } catch  {\n            return \"us-east-1\";\n        }\n    }\n    async getAccountId() {\n        try {\n            const { stdout } = await this.aws([\n                \"sts\",\n                \"get-caller-identity\",\n                \"--query\",\n                \"Account\",\n                \"--output\",\n                \"text\",\n                \"--profile\",\n                this.profile\n            ], {\n                timeout: 10000\n            });\n            return stdout.trim() || null;\n        } catch  {\n            return null;\n        }\n    }\n    async bucketExists(bucket) {\n        try {\n            await this.aws([\n                \"s3api\",\n                \"head-bucket\",\n                \"--bucket\",\n                bucket,\n                \"--profile\",\n                this.profile\n            ], {\n                timeout: 15000\n            });\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    async ensureCors(bucket) {\n        // Try to read CORS; if missing, apply a permissive read CORS suitable for presigned GET\n        try {\n            await this.aws([\n                \"s3api\",\n                \"get-bucket-cors\",\n                \"--bucket\",\n                bucket,\n                \"--profile\",\n                this.profile\n            ], {\n                timeout: 10000\n            });\n            // If the command succeeds, leave existing CORS as-is\n            return;\n        } catch  {\n            const corsConfig = {\n                CORSRules: [\n                    {\n                        AllowedOrigins: [\n                            \"*\"\n                        ],\n                        AllowedMethods: [\n                            \"GET\",\n                            \"HEAD\"\n                        ],\n                        AllowedHeaders: [\n                            \"*\"\n                        ],\n                        ExposeHeaders: [\n                            \"ETag\"\n                        ],\n                        MaxAgeSeconds: 300\n                    }\n                ]\n            };\n            const json = JSON.stringify(corsConfig);\n            try {\n                await this.aws([\n                    \"s3api\",\n                    \"put-bucket-cors\",\n                    \"--bucket\",\n                    bucket,\n                    \"--cors-configuration\",\n                    json,\n                    \"--profile\",\n                    this.profile\n                ], {\n                    timeout: 10000\n                });\n                this.logger.info({\n                    bucket\n                }, \"Applied default S3 CORS configuration\");\n            } catch (err) {\n                const e = (0,_utils_sanitize_js__WEBPACK_IMPORTED_MODULE_4__.sanitizeError)(err);\n                this.logger.warn({\n                    err: e,\n                    bucket\n                }, \"Failed to set CORS (continuing)\");\n            }\n        }\n    }\n    async ensureBucket(explicitBucket) {\n        const region = await this.getRegion();\n        let bucket = (explicitBucket || \"\").trim();\n        if (!bucket) {\n            const acct = await this.getAccountId();\n            const base = \"pip-agent-autonomous-audio\";\n            const suffix = acct ? `${acct}-${region}` : `${region}-${(0,node_crypto__WEBPACK_IMPORTED_MODULE_1__.randomUUID)().slice(0, 8)}`;\n            bucket = `${base}-${suffix}`.toLowerCase();\n        }\n        const exists = await this.bucketExists(bucket);\n        if (!exists) {\n            try {\n                if (region === \"us-east-1\") {\n                    await this.aws([\n                        \"s3api\",\n                        \"create-bucket\",\n                        \"--bucket\",\n                        bucket,\n                        \"--region\",\n                        region,\n                        \"--profile\",\n                        this.profile\n                    ]);\n                } else {\n                    await this.aws([\n                        \"s3api\",\n                        \"create-bucket\",\n                        \"--bucket\",\n                        bucket,\n                        \"--region\",\n                        region,\n                        \"--create-bucket-configuration\",\n                        `LocationConstraint=${region}`,\n                        \"--profile\",\n                        this.profile\n                    ]);\n                }\n                this.logger.info({\n                    bucket,\n                    region\n                }, \"Created S3 bucket\");\n                await this.ensureCors(bucket);\n            } catch (err) {\n                const e = (0,_utils_sanitize_js__WEBPACK_IMPORTED_MODULE_4__.sanitizeError)(err);\n                this.logger.error({\n                    err: e,\n                    bucket,\n                    region\n                }, \"Failed to create bucket\");\n                throw new Error(`Failed to create S3 bucket '${bucket}' in ${region}: ${e.message || e}`);\n            }\n        }\n        return {\n            bucket,\n            region\n        };\n    }\n    buildKey(prefix, filePath) {\n        const date = new Date();\n        const yyyy = date.getUTCFullYear();\n        const mm = String(date.getUTCMonth() + 1).padStart(2, \"0\");\n        const dd = String(date.getUTCDate()).padStart(2, \"0\");\n        const name = (0,node_path__WEBPACK_IMPORTED_MODULE_0__.basename)(filePath);\n        const ext = (0,node_path__WEBPACK_IMPORTED_MODULE_0__.extname)(name) || \".bin\";\n        const id = (0,node_crypto__WEBPACK_IMPORTED_MODULE_1__.randomUUID)();\n        const safePrefix = (prefix || \"audio\").replace(/^\\/+|\\/+$/g, \"\");\n        return `${safePrefix}/${yyyy}-${mm}-${dd}/${id}${ext}`;\n    }\n    async uploadAndPresign(params) {\n        const { filePath, mimeType, bucket: bucketMaybe, prefix, expiresInSeconds } = params;\n        const { bucket, region } = await this.ensureBucket(bucketMaybe);\n        await this.ensureCors(bucket);\n        const key = this.buildKey(prefix, filePath);\n        // Upload\n        await this.aws([\n            \"s3\",\n            \"cp\",\n            filePath,\n            `s3://${bucket}/${key}`,\n            \"--content-type\",\n            mimeType,\n            \"--only-show-errors\",\n            \"--profile\",\n            this.profile\n        ], {\n            timeout: 10 * 60 * 1000\n        });\n        // Presign\n        const { stdout } = await this.aws([\n            \"s3\",\n            \"presign\",\n            `s3://${bucket}/${key}`,\n            \"--expires-in\",\n            String(Math.max(60, expiresInSeconds)),\n            \"--profile\",\n            this.profile\n        ], {\n            timeout: 15000\n        });\n        const url = stdout.trim();\n        if (!url.startsWith(\"http\")) {\n            throw new Error(\"Failed to generate presigned URL\");\n        }\n        this.logger.info({\n            bucket,\n            key,\n            region,\n            expiresInSeconds\n        }, \"Uploaded and presigned S3 object\");\n        return {\n            bucket,\n            key,\n            url,\n            region\n        };\n    }\n    async deleteObject(bucket, key) {\n        try {\n            await this.aws([\n                \"s3\",\n                \"rm\",\n                `s3://${bucket}/${key}`,\n                \"--only-show-errors\",\n                \"--profile\",\n                this.profile\n            ], {\n                timeout: 20000\n            });\n            this.logger.info({\n                bucket,\n                key\n            }, \"Deleted S3 object\");\n        } catch (err) {\n            const e = (0,_utils_sanitize_js__WEBPACK_IMPORTED_MODULE_4__.sanitizeError)(err);\n            this.logger.warn({\n                err: e,\n                bucket,\n                key\n            }, \"Failed to delete S3 object (continuing)\");\n        }\n    }\n}\nfunction createS3Service(profile) {\n    return new S3Service(profile);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../src/services/S3Service.ts\n");

/***/ }),

/***/ "(rsc)/../../src/services/ServiceContainer.ts":
/*!**********************************************!*\
  !*** ../../src/services/ServiceContainer.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceContainer: () => (/* binding */ ServiceContainer),\n/* harmony export */   createServiceContainer: () => (/* binding */ createServiceContainer)\n/* harmony export */ });\n/**\n * Service Container - Simple Dependency Injection Container\n *\n * This container manages service instances and their lifecycle,\n * providing a centralized place to register and resolve dependencies.\n *\n * Features:\n * - Singleton management: Services are created once and reused\n * - Factory pattern: Services are created lazily when first requested\n * - Type-safe: Full TypeScript support with generics\n *\n * @example\n * ```typescript\n * const container = createServiceContainer();\n *\n * // Register services\n * container.register('anthropic', () =>\n *   createAnthropicService(process.env.ANTHROPIC_API_KEY!)\n * );\n * container.register('gemini', () =>\n *   createGeminiService(process.env.GEMINI_API_KEY!)\n * );\n *\n * // Resolve services\n * const anthropic = container.resolve<IAnthropicService>('anthropic');\n * const gemini = container.resolve<IGeminiService>('gemini');\n * ```\n */ /**\n * Factory function type for creating service instances\n */ /**\n * Service container for dependency injection\n *\n * This simple container provides basic DI functionality:\n * - register: Add a service factory\n * - resolve: Get or create a service instance (singleton)\n * - has: Check if a service is registered\n * - clear: Remove all registered services\n */ class ServiceContainer {\n    /**\n   * Register a service factory\n   *\n   * @param name - Service identifier (e.g., \"anthropic\", \"gemini\")\n   * @param factory - Factory function that creates the service\n   *\n   * @example\n   * ```typescript\n   * container.register('anthropic', () =>\n   *   createAnthropicService(apiKey)\n   * );\n   * ```\n   */ register(name, factory) {\n        this.factories.set(name, factory);\n    }\n    /**\n   * Resolve a service instance (creates if needed, then caches)\n   *\n   * @param name - Service identifier\n   * @returns The service instance\n   * @throws Error if service is not registered\n   *\n   * @example\n   * ```typescript\n   * const anthropic = container.resolve<IAnthropicService>('anthropic');\n   * ```\n   */ resolve(name) {\n        // Return cached instance if available\n        if (this.instances.has(name)) {\n            return this.instances.get(name);\n        }\n        // Get factory and create instance\n        const factory = this.factories.get(name);\n        if (!factory) {\n            throw new Error(`Service '${name}' is not registered in the container`);\n        }\n        const instance = factory();\n        this.instances.set(name, instance);\n        return instance;\n    }\n    /**\n   * Check if a service is registered\n   *\n   * @param name - Service identifier\n   * @returns true if the service is registered, false otherwise\n   */ has(name) {\n        return this.factories.has(name);\n    }\n    /**\n   * Clear all registered services and cached instances\n   *\n   * Useful for testing or resetting the container state.\n   */ clear() {\n        this.factories.clear();\n        this.instances.clear();\n    }\n    /**\n   * Get all registered service names\n   *\n   * @returns Array of service identifiers\n   */ getRegisteredServices() {\n        return Array.from(this.factories.keys());\n    }\n    constructor(){\n        this.factories = new Map();\n        this.instances = new Map();\n    }\n}\n/**\n * Factory function to create a new service container\n *\n * @returns A new ServiceContainer instance\n *\n * @example\n * ```typescript\n * const container = createServiceContainer();\n * container.register('anthropic', () => createAnthropicService(apiKey));\n * ```\n */ function createServiceContainer() {\n    return new ServiceContainer();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vc3JjL3NlcnZpY2VzL1NlcnZpY2VDb250YWluZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBMkJDLEdBRUQ7O0NBRUMsR0FHRDs7Ozs7Ozs7Q0FRQyxHQUNNLE1BQU1BO0lBSVg7Ozs7Ozs7Ozs7OztHQVlDLEdBQ0RDLFNBQVlDLElBQVksRUFBRUMsT0FBMEIsRUFBUTtRQUMxRCxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDSCxNQUFNQztJQUMzQjtJQUVBOzs7Ozs7Ozs7OztHQVdDLEdBQ0RHLFFBQVdKLElBQVksRUFBSztRQUMxQixzQ0FBc0M7UUFDdEMsSUFBSSxJQUFJLENBQUNLLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDTixPQUFPO1lBQzVCLE9BQU8sSUFBSSxDQUFDSyxTQUFTLENBQUNFLEdBQUcsQ0FBQ1A7UUFDNUI7UUFFQSxrQ0FBa0M7UUFDbEMsTUFBTUMsVUFBVSxJQUFJLENBQUNDLFNBQVMsQ0FBQ0ssR0FBRyxDQUFDUDtRQUNuQyxJQUFJLENBQUNDLFNBQVM7WUFDWixNQUFNLElBQUlPLE1BQU0sQ0FBQyxTQUFTLEVBQUVSLEtBQUssb0NBQW9DLENBQUM7UUFDeEU7UUFFQSxNQUFNUyxXQUFXUjtRQUNqQixJQUFJLENBQUNJLFNBQVMsQ0FBQ0YsR0FBRyxDQUFDSCxNQUFNUztRQUN6QixPQUFPQTtJQUNUO0lBRUE7Ozs7O0dBS0MsR0FDREgsSUFBSU4sSUFBWSxFQUFXO1FBQ3pCLE9BQU8sSUFBSSxDQUFDRSxTQUFTLENBQUNJLEdBQUcsQ0FBQ047SUFDNUI7SUFFQTs7OztHQUlDLEdBQ0RVLFFBQWM7UUFDWixJQUFJLENBQUNSLFNBQVMsQ0FBQ1EsS0FBSztRQUNwQixJQUFJLENBQUNMLFNBQVMsQ0FBQ0ssS0FBSztJQUN0QjtJQUVBOzs7O0dBSUMsR0FDREMsd0JBQWtDO1FBQ2hDLE9BQU9DLE1BQU1DLElBQUksQ0FBQyxJQUFJLENBQUNYLFNBQVMsQ0FBQ1ksSUFBSTtJQUN2Qzs7YUE1RVFaLFlBQVksSUFBSWE7YUFDaEJWLFlBQVksSUFBSVU7O0FBNEUxQjtBQUVBOzs7Ozs7Ozs7O0NBVUMsR0FDTSxTQUFTQztJQUNkLE9BQU8sSUFBSWxCO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AcGlwL3VpLy4uLy4uL3NyYy9zZXJ2aWNlcy9TZXJ2aWNlQ29udGFpbmVyLnRzP2MwMTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTZXJ2aWNlIENvbnRhaW5lciAtIFNpbXBsZSBEZXBlbmRlbmN5IEluamVjdGlvbiBDb250YWluZXJcbiAqXG4gKiBUaGlzIGNvbnRhaW5lciBtYW5hZ2VzIHNlcnZpY2UgaW5zdGFuY2VzIGFuZCB0aGVpciBsaWZlY3ljbGUsXG4gKiBwcm92aWRpbmcgYSBjZW50cmFsaXplZCBwbGFjZSB0byByZWdpc3RlciBhbmQgcmVzb2x2ZSBkZXBlbmRlbmNpZXMuXG4gKlxuICogRmVhdHVyZXM6XG4gKiAtIFNpbmdsZXRvbiBtYW5hZ2VtZW50OiBTZXJ2aWNlcyBhcmUgY3JlYXRlZCBvbmNlIGFuZCByZXVzZWRcbiAqIC0gRmFjdG9yeSBwYXR0ZXJuOiBTZXJ2aWNlcyBhcmUgY3JlYXRlZCBsYXppbHkgd2hlbiBmaXJzdCByZXF1ZXN0ZWRcbiAqIC0gVHlwZS1zYWZlOiBGdWxsIFR5cGVTY3JpcHQgc3VwcG9ydCB3aXRoIGdlbmVyaWNzXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IGNvbnRhaW5lciA9IGNyZWF0ZVNlcnZpY2VDb250YWluZXIoKTtcbiAqXG4gKiAvLyBSZWdpc3RlciBzZXJ2aWNlc1xuICogY29udGFpbmVyLnJlZ2lzdGVyKCdhbnRocm9waWMnLCAoKSA9PlxuICogICBjcmVhdGVBbnRocm9waWNTZXJ2aWNlKHByb2Nlc3MuZW52LkFOVEhST1BJQ19BUElfS0VZISlcbiAqICk7XG4gKiBjb250YWluZXIucmVnaXN0ZXIoJ2dlbWluaScsICgpID0+XG4gKiAgIGNyZWF0ZUdlbWluaVNlcnZpY2UocHJvY2Vzcy5lbnYuR0VNSU5JX0FQSV9LRVkhKVxuICogKTtcbiAqXG4gKiAvLyBSZXNvbHZlIHNlcnZpY2VzXG4gKiBjb25zdCBhbnRocm9waWMgPSBjb250YWluZXIucmVzb2x2ZTxJQW50aHJvcGljU2VydmljZT4oJ2FudGhyb3BpYycpO1xuICogY29uc3QgZ2VtaW5pID0gY29udGFpbmVyLnJlc29sdmU8SUdlbWluaVNlcnZpY2U+KCdnZW1pbmknKTtcbiAqIGBgYFxuICovXG5cbi8qKlxuICogRmFjdG9yeSBmdW5jdGlvbiB0eXBlIGZvciBjcmVhdGluZyBzZXJ2aWNlIGluc3RhbmNlc1xuICovXG50eXBlIFNlcnZpY2VGYWN0b3J5PFQgPSBhbnk+ID0gKCkgPT4gVDtcblxuLyoqXG4gKiBTZXJ2aWNlIGNvbnRhaW5lciBmb3IgZGVwZW5kZW5jeSBpbmplY3Rpb25cbiAqXG4gKiBUaGlzIHNpbXBsZSBjb250YWluZXIgcHJvdmlkZXMgYmFzaWMgREkgZnVuY3Rpb25hbGl0eTpcbiAqIC0gcmVnaXN0ZXI6IEFkZCBhIHNlcnZpY2UgZmFjdG9yeVxuICogLSByZXNvbHZlOiBHZXQgb3IgY3JlYXRlIGEgc2VydmljZSBpbnN0YW5jZSAoc2luZ2xldG9uKVxuICogLSBoYXM6IENoZWNrIGlmIGEgc2VydmljZSBpcyByZWdpc3RlcmVkXG4gKiAtIGNsZWFyOiBSZW1vdmUgYWxsIHJlZ2lzdGVyZWQgc2VydmljZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFNlcnZpY2VDb250YWluZXIge1xuICBwcml2YXRlIGZhY3RvcmllcyA9IG5ldyBNYXA8c3RyaW5nLCBTZXJ2aWNlRmFjdG9yeT4oKTtcbiAgcHJpdmF0ZSBpbnN0YW5jZXMgPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHNlcnZpY2UgZmFjdG9yeVxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSAtIFNlcnZpY2UgaWRlbnRpZmllciAoZS5nLiwgXCJhbnRocm9waWNcIiwgXCJnZW1pbmlcIilcbiAgICogQHBhcmFtIGZhY3RvcnkgLSBGYWN0b3J5IGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyB0aGUgc2VydmljZVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnRhaW5lci5yZWdpc3RlcignYW50aHJvcGljJywgKCkgPT5cbiAgICogICBjcmVhdGVBbnRocm9waWNTZXJ2aWNlKGFwaUtleSlcbiAgICogKTtcbiAgICogYGBgXG4gICAqL1xuICByZWdpc3RlcjxUPihuYW1lOiBzdHJpbmcsIGZhY3Rvcnk6IFNlcnZpY2VGYWN0b3J5PFQ+KTogdm9pZCB7XG4gICAgdGhpcy5mYWN0b3JpZXMuc2V0KG5hbWUsIGZhY3RvcnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmUgYSBzZXJ2aWNlIGluc3RhbmNlIChjcmVhdGVzIGlmIG5lZWRlZCwgdGhlbiBjYWNoZXMpXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIC0gU2VydmljZSBpZGVudGlmaWVyXG4gICAqIEByZXR1cm5zIFRoZSBzZXJ2aWNlIGluc3RhbmNlXG4gICAqIEB0aHJvd3MgRXJyb3IgaWYgc2VydmljZSBpcyBub3QgcmVnaXN0ZXJlZFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IGFudGhyb3BpYyA9IGNvbnRhaW5lci5yZXNvbHZlPElBbnRocm9waWNTZXJ2aWNlPignYW50aHJvcGljJyk7XG4gICAqIGBgYFxuICAgKi9cbiAgcmVzb2x2ZTxUPihuYW1lOiBzdHJpbmcpOiBUIHtcbiAgICAvLyBSZXR1cm4gY2FjaGVkIGluc3RhbmNlIGlmIGF2YWlsYWJsZVxuICAgIGlmICh0aGlzLmluc3RhbmNlcy5oYXMobmFtZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlcy5nZXQobmFtZSkgYXMgVDtcbiAgICB9XG5cbiAgICAvLyBHZXQgZmFjdG9yeSBhbmQgY3JlYXRlIGluc3RhbmNlXG4gICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuZmFjdG9yaWVzLmdldChuYW1lKTtcbiAgICBpZiAoIWZhY3RvcnkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2VydmljZSAnJHtuYW1lfScgaXMgbm90IHJlZ2lzdGVyZWQgaW4gdGhlIGNvbnRhaW5lcmApO1xuICAgIH1cblxuICAgIGNvbnN0IGluc3RhbmNlID0gZmFjdG9yeSgpO1xuICAgIHRoaXMuaW5zdGFuY2VzLnNldChuYW1lLCBpbnN0YW5jZSk7XG4gICAgcmV0dXJuIGluc3RhbmNlIGFzIFQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBzZXJ2aWNlIGlzIHJlZ2lzdGVyZWRcbiAgICpcbiAgICogQHBhcmFtIG5hbWUgLSBTZXJ2aWNlIGlkZW50aWZpZXJcbiAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgc2VydmljZSBpcyByZWdpc3RlcmVkLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIGhhcyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5mYWN0b3JpZXMuaGFzKG5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCByZWdpc3RlcmVkIHNlcnZpY2VzIGFuZCBjYWNoZWQgaW5zdGFuY2VzXG4gICAqXG4gICAqIFVzZWZ1bCBmb3IgdGVzdGluZyBvciByZXNldHRpbmcgdGhlIGNvbnRhaW5lciBzdGF0ZS5cbiAgICovXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuZmFjdG9yaWVzLmNsZWFyKCk7XG4gICAgdGhpcy5pbnN0YW5jZXMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHJlZ2lzdGVyZWQgc2VydmljZSBuYW1lc1xuICAgKlxuICAgKiBAcmV0dXJucyBBcnJheSBvZiBzZXJ2aWNlIGlkZW50aWZpZXJzXG4gICAqL1xuICBnZXRSZWdpc3RlcmVkU2VydmljZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZmFjdG9yaWVzLmtleXMoKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIG5ldyBzZXJ2aWNlIGNvbnRhaW5lclxuICpcbiAqIEByZXR1cm5zIEEgbmV3IFNlcnZpY2VDb250YWluZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgY29udGFpbmVyID0gY3JlYXRlU2VydmljZUNvbnRhaW5lcigpO1xuICogY29udGFpbmVyLnJlZ2lzdGVyKCdhbnRocm9waWMnLCAoKSA9PiBjcmVhdGVBbnRocm9waWNTZXJ2aWNlKGFwaUtleSkpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZXJ2aWNlQ29udGFpbmVyKCk6IFNlcnZpY2VDb250YWluZXIge1xuICByZXR1cm4gbmV3IFNlcnZpY2VDb250YWluZXIoKTtcbn1cbiJdLCJuYW1lcyI6WyJTZXJ2aWNlQ29udGFpbmVyIiwicmVnaXN0ZXIiLCJuYW1lIiwiZmFjdG9yeSIsImZhY3RvcmllcyIsInNldCIsInJlc29sdmUiLCJpbnN0YW5jZXMiLCJoYXMiLCJnZXQiLCJFcnJvciIsImluc3RhbmNlIiwiY2xlYXIiLCJnZXRSZWdpc3RlcmVkU2VydmljZXMiLCJBcnJheSIsImZyb20iLCJrZXlzIiwiTWFwIiwiY3JlYXRlU2VydmljZUNvbnRhaW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../src/services/ServiceContainer.ts\n");

/***/ }),

/***/ "(rsc)/../../src/services/index.ts":
/*!***********************************!*\
  !*** ../../src/services/index.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnthropicService: () => (/* reexport safe */ _AnthropicService_js__WEBPACK_IMPORTED_MODULE_0__.AnthropicService),\n/* harmony export */   FileSystemService: () => (/* reexport safe */ _FileSystemService_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemService),\n/* harmony export */   GeminiService: () => (/* reexport safe */ _GeminiService_js__WEBPACK_IMPORTED_MODULE_1__.GeminiService),\n/* harmony export */   S3Service: () => (/* reexport safe */ _S3Service_js__WEBPACK_IMPORTED_MODULE_2__.S3Service),\n/* harmony export */   ServiceContainer: () => (/* reexport safe */ _ServiceContainer_js__WEBPACK_IMPORTED_MODULE_4__.ServiceContainer),\n/* harmony export */   createAnthropicService: () => (/* reexport safe */ _AnthropicService_js__WEBPACK_IMPORTED_MODULE_0__.createAnthropicService),\n/* harmony export */   createFileSystemService: () => (/* reexport safe */ _FileSystemService_js__WEBPACK_IMPORTED_MODULE_3__.createFileSystemService),\n/* harmony export */   createGeminiService: () => (/* reexport safe */ _GeminiService_js__WEBPACK_IMPORTED_MODULE_1__.createGeminiService),\n/* harmony export */   createS3Service: () => (/* reexport safe */ _S3Service_js__WEBPACK_IMPORTED_MODULE_2__.createS3Service),\n/* harmony export */   createServiceContainer: () => (/* reexport safe */ _ServiceContainer_js__WEBPACK_IMPORTED_MODULE_4__.createServiceContainer)\n/* harmony export */ });\n/* harmony import */ var _AnthropicService_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AnthropicService.js */ \"(rsc)/../../src/services/AnthropicService.ts\");\n/* harmony import */ var _GeminiService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GeminiService.js */ \"(rsc)/../../src/services/GeminiService.ts\");\n/* harmony import */ var _S3Service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./S3Service.js */ \"(rsc)/../../src/services/S3Service.ts\");\n/* harmony import */ var _FileSystemService_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FileSystemService.js */ \"(rsc)/../../src/services/FileSystemService.ts\");\n/* harmony import */ var _ServiceContainer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ServiceContainer.js */ \"(rsc)/../../src/services/ServiceContainer.ts\");\n/**\n * Services Module - Centralized Dependency Injection\n *\n * This module exports all service interfaces, implementations, and factory functions\n * for dependency injection throughout the application.\n *\n * Benefits:\n * - Better testability: Services can be easily mocked\n * - Loose coupling: Components depend on interfaces, not concrete implementations\n * - Single point of configuration: All service creation goes through factory functions\n *\n * @example\n * ```typescript\n * import {\n *   createAnthropicService,\n *   createGeminiService,\n *   createFileSystemService,\n *   IAnthropicService\n * } from \"./services/index.js\";\n *\n * // Create services with real implementations\n * const anthropic = createAnthropicService(apiKey);\n * const gemini = createGeminiService(apiKey);\n * const fs = createFileSystemService();\n *\n * // Or mock for testing\n * const mockAnthropic: IAnthropicService = {\n *   generateMessage: async () => \"test response\"\n * };\n * ```\n */ // Anthropic Service\n\n// Gemini Service\n\n// S3 Service\n\n// File System Service\n\n// Service Container (optional but recommended)\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vc3JjL3NlcnZpY2VzL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E4QkMsR0FFRCxvQkFBb0I7QUFJVztBQU0vQixpQkFBaUI7QUFJVztBQVE1QixhQUFhO0FBSVc7QUFNeEIsc0JBQXNCO0FBSVU7QUFNaEMsK0NBQStDO0FBSWhCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBpcC91aS8uLi8uLi9zcmMvc2VydmljZXMvaW5kZXgudHM/ZGFhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNlcnZpY2VzIE1vZHVsZSAtIENlbnRyYWxpemVkIERlcGVuZGVuY3kgSW5qZWN0aW9uXG4gKlxuICogVGhpcyBtb2R1bGUgZXhwb3J0cyBhbGwgc2VydmljZSBpbnRlcmZhY2VzLCBpbXBsZW1lbnRhdGlvbnMsIGFuZCBmYWN0b3J5IGZ1bmN0aW9uc1xuICogZm9yIGRlcGVuZGVuY3kgaW5qZWN0aW9uIHRocm91Z2hvdXQgdGhlIGFwcGxpY2F0aW9uLlxuICpcbiAqIEJlbmVmaXRzOlxuICogLSBCZXR0ZXIgdGVzdGFiaWxpdHk6IFNlcnZpY2VzIGNhbiBiZSBlYXNpbHkgbW9ja2VkXG4gKiAtIExvb3NlIGNvdXBsaW5nOiBDb21wb25lbnRzIGRlcGVuZCBvbiBpbnRlcmZhY2VzLCBub3QgY29uY3JldGUgaW1wbGVtZW50YXRpb25zXG4gKiAtIFNpbmdsZSBwb2ludCBvZiBjb25maWd1cmF0aW9uOiBBbGwgc2VydmljZSBjcmVhdGlvbiBnb2VzIHRocm91Z2ggZmFjdG9yeSBmdW5jdGlvbnNcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHtcbiAqICAgY3JlYXRlQW50aHJvcGljU2VydmljZSxcbiAqICAgY3JlYXRlR2VtaW5pU2VydmljZSxcbiAqICAgY3JlYXRlRmlsZVN5c3RlbVNlcnZpY2UsXG4gKiAgIElBbnRocm9waWNTZXJ2aWNlXG4gKiB9IGZyb20gXCIuL3NlcnZpY2VzL2luZGV4LmpzXCI7XG4gKlxuICogLy8gQ3JlYXRlIHNlcnZpY2VzIHdpdGggcmVhbCBpbXBsZW1lbnRhdGlvbnNcbiAqIGNvbnN0IGFudGhyb3BpYyA9IGNyZWF0ZUFudGhyb3BpY1NlcnZpY2UoYXBpS2V5KTtcbiAqIGNvbnN0IGdlbWluaSA9IGNyZWF0ZUdlbWluaVNlcnZpY2UoYXBpS2V5KTtcbiAqIGNvbnN0IGZzID0gY3JlYXRlRmlsZVN5c3RlbVNlcnZpY2UoKTtcbiAqXG4gKiAvLyBPciBtb2NrIGZvciB0ZXN0aW5nXG4gKiBjb25zdCBtb2NrQW50aHJvcGljOiBJQW50aHJvcGljU2VydmljZSA9IHtcbiAqICAgZ2VuZXJhdGVNZXNzYWdlOiBhc3luYyAoKSA9PiBcInRlc3QgcmVzcG9uc2VcIlxuICogfTtcbiAqIGBgYFxuICovXG5cbi8vIEFudGhyb3BpYyBTZXJ2aWNlXG5leHBvcnQge1xuICBBbnRocm9waWNTZXJ2aWNlLFxuICBjcmVhdGVBbnRocm9waWNTZXJ2aWNlXG59IGZyb20gXCIuL0FudGhyb3BpY1NlcnZpY2UuanNcIjtcbmV4cG9ydCB0eXBlIHtcbiAgSUFudGhyb3BpY1NlcnZpY2UsXG4gIE1lc3NhZ2VQYXJhbXNcbn0gZnJvbSBcIi4vQW50aHJvcGljU2VydmljZS5qc1wiO1xuXG4vLyBHZW1pbmkgU2VydmljZVxuZXhwb3J0IHtcbiAgR2VtaW5pU2VydmljZSxcbiAgY3JlYXRlR2VtaW5pU2VydmljZVxufSBmcm9tIFwiLi9HZW1pbmlTZXJ2aWNlLmpzXCI7XG5leHBvcnQgdHlwZSB7XG4gIElHZW1pbmlTZXJ2aWNlLFxuICBVcGxvYWRlZEZpbGUsXG4gIEdlbmVyYXRlQ29udGVudFBhcmFtcyxcbiAgR2VuZXJhdGVDb250ZW50UmVzdWx0XG59IGZyb20gXCIuL0dlbWluaVNlcnZpY2UuanNcIjtcblxuLy8gUzMgU2VydmljZVxuZXhwb3J0IHtcbiAgUzNTZXJ2aWNlLFxuICBjcmVhdGVTM1NlcnZpY2Vcbn0gZnJvbSBcIi4vUzNTZXJ2aWNlLmpzXCI7XG5leHBvcnQgdHlwZSB7XG4gIElTM1NlcnZpY2UsXG4gIFVwbG9hZFJlc3VsdFxufSBmcm9tIFwiLi9TM1NlcnZpY2UuanNcIjtcblxuLy8gRmlsZSBTeXN0ZW0gU2VydmljZVxuZXhwb3J0IHtcbiAgRmlsZVN5c3RlbVNlcnZpY2UsXG4gIGNyZWF0ZUZpbGVTeXN0ZW1TZXJ2aWNlXG59IGZyb20gXCIuL0ZpbGVTeXN0ZW1TZXJ2aWNlLmpzXCI7XG5leHBvcnQgdHlwZSB7XG4gIElGaWxlU3lzdGVtU2VydmljZSxcbiAgTWtkaXJPcHRpb25zXG59IGZyb20gXCIuL0ZpbGVTeXN0ZW1TZXJ2aWNlLmpzXCI7XG5cbi8vIFNlcnZpY2UgQ29udGFpbmVyIChvcHRpb25hbCBidXQgcmVjb21tZW5kZWQpXG5leHBvcnQge1xuICBTZXJ2aWNlQ29udGFpbmVyLFxuICBjcmVhdGVTZXJ2aWNlQ29udGFpbmVyXG59IGZyb20gXCIuL1NlcnZpY2VDb250YWluZXIuanNcIjtcbiJdLCJuYW1lcyI6WyJBbnRocm9waWNTZXJ2aWNlIiwiY3JlYXRlQW50aHJvcGljU2VydmljZSIsIkdlbWluaVNlcnZpY2UiLCJjcmVhdGVHZW1pbmlTZXJ2aWNlIiwiUzNTZXJ2aWNlIiwiY3JlYXRlUzNTZXJ2aWNlIiwiRmlsZVN5c3RlbVNlcnZpY2UiLCJjcmVhdGVGaWxlU3lzdGVtU2VydmljZSIsIlNlcnZpY2VDb250YWluZXIiLCJjcmVhdGVTZXJ2aWNlQ29udGFpbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../src/services/index.ts\n");

/***/ }),

/***/ "(rsc)/../../src/types/index.ts":
/*!********************************!*\
  !*** ../../src/types/index.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   hasUsage: () => (/* binding */ hasUsage),\n/* harmony export */   isAssistantMessage: () => (/* binding */ isAssistantMessage),\n/* harmony export */   isAudioProbeData: () => (/* binding */ isAudioProbeData),\n/* harmony export */   isDocxImport: () => (/* binding */ isDocxImport),\n/* harmony export */   isErrorWithMessage: () => (/* binding */ isErrorWithMessage),\n/* harmony export */   isGeminiTranscriptionResult: () => (/* binding */ isGeminiTranscriptionResult),\n/* harmony export */   isPipelineError: () => (/* binding */ isPipelineError),\n/* harmony export */   isPipelineSuccess: () => (/* binding */ isPipelineSuccess),\n/* harmony export */   isResultMessage: () => (/* binding */ isResultMessage),\n/* harmony export */   isStreamEvent: () => (/* binding */ isStreamEvent),\n/* harmony export */   isSystemMessage: () => (/* binding */ isSystemMessage),\n/* harmony export */   isToolResultEvent: () => (/* binding */ isToolResultEvent),\n/* harmony export */   isToolUseEvent: () => (/* binding */ isToolUseEvent)\n/* harmony export */ });\n/**\n * Type definitions for the PIP Agent Autonomous application\n * This file provides proper TypeScript types to eliminate all 'any' usage\n */ // ===== Claude Agent SDK Stream Message Types =====\n/**\n * Type guard to check if a message is an assistant message\n */ function isAssistantMessage(msg) {\n    return msg.type === \"assistant\";\n}\n/**\n * Type guard to check if a message is a stream event\n */ function isStreamEvent(msg) {\n    return msg.type === \"stream_event\";\n}\n/**\n * Type guard to check if a message is a result message\n */ function isResultMessage(msg) {\n    return msg.type === \"result\";\n}\n/**\n * Type guard to check if a message is a system message\n */ function isSystemMessage(msg) {\n    return msg.type === \"system\";\n}\n/**\n * Type guard to check if a message has usage metrics\n */ function hasUsage(msg) {\n    return typeof msg === \"object\" && msg !== null && \"usage\" in msg && typeof msg.usage === \"object\";\n}\n/**\n * Type guard for Gemini transcription result\n */ function isGeminiTranscriptionResult(data) {\n    return typeof data === \"object\" && data !== null && (typeof data.transcript === \"string\" || Array.isArray(data.segments));\n}\n/**\n * Type guard for audio probe data\n */ function isAudioProbeData(data) {\n    return typeof data === \"object\" && data !== null && \"streams\" in data && Array.isArray(data.streams) && \"format\" in data && typeof data.format === \"object\";\n}\n/**\n * Type guard for docx import\n */ function isDocxImport(module) {\n    return typeof module === \"object\" && module !== null && \"Document\" in module && \"Packer\" in module && \"Paragraph\" in module && \"HeadingLevel\" in module && \"TextRun\" in module;\n}\n/**\n * Type guard for pipeline success\n */ function isPipelineSuccess(result) {\n    return typeof result === \"object\" && result !== null && result.status === \"ok\" && typeof result.draft === \"string\";\n}\n/**\n * Type guard for pipeline error\n */ function isPipelineError(result) {\n    return typeof result === \"object\" && result !== null && result.status === \"error\" && typeof result.message === \"string\";\n}\n/**\n * Type guard for tool use event\n */ function isToolUseEvent(data) {\n    return typeof data === \"object\" && data !== null && data.type === \"tool_use\" && typeof data.name === \"string\";\n}\n/**\n * Type guard for tool result event\n */ function isToolResultEvent(data) {\n    return typeof data === \"object\" && data !== null && data.type === \"tool_result\";\n}\n/**\n * Type guard for error-like objects\n */ function isErrorWithMessage(error) {\n    return typeof error === \"object\" && error !== null && \"message\" in error && typeof error.message === \"string\";\n}\n/**\n * Extracts error message from unknown error type\n */ function getErrorMessage(error) {\n    if (isErrorWithMessage(error)) {\n        return error.message;\n    }\n    return String(error);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../src/types/index.ts\n");

/***/ }),

/***/ "(rsc)/../../src/utils/cleanup.ts":
/*!**********************************!*\
  !*** ../../src/utils/cleanup.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanupTempDir: () => (/* binding */ cleanupTempDir),\n/* harmony export */   tempDirResource: () => (/* binding */ tempDirResource),\n/* harmony export */   withCleanup: () => (/* binding */ withCleanup)\n/* harmony export */ });\n/* harmony import */ var node_fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\n/* harmony import */ var node_fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger.js */ \"(rsc)/../../src/utils/logger.ts\");\n\n\nconst logger = (0,_logger_js__WEBPACK_IMPORTED_MODULE_1__.createChildLogger)(\"cleanup\");\n/**\n * Clean up a temporary directory with proper error logging\n * @param dirPath - Path to the temporary directory to remove\n * @throws Never throws - logs errors instead\n */ async function cleanupTempDir(dirPath) {\n    try {\n        await node_fs_promises__WEBPACK_IMPORTED_MODULE_0__.rm(dirPath, {\n            recursive: true,\n            force: true\n        });\n        logger.debug({\n            dirPath\n        }, `✓ Cleaned up temporary directory: ${dirPath}`);\n    } catch (error) {\n        // Log the error instead of silently swallowing it\n        logger.warn({\n            dirPath,\n            error: error?.message\n        }, `⚠️  Failed to clean up temporary directory: ${dirPath}`);\n        logger.warn(`   Error: ${error?.message || String(error)}`);\n    // Don't throw - cleanup failures shouldn't break the main operation\n    }\n}\n/**\n * Execute a function with automatic resource cleanup\n * @param resource - Resource with cleanup method\n * @param fn - Function to execute\n * @returns The result of the function\n * @throws Rethrows any error from fn after ensuring cleanup\n */ async function withCleanup(resource, fn) {\n    try {\n        return await fn();\n    } finally{\n        // Always attempt cleanup, even if fn throws\n        try {\n            await resource.cleanup();\n        } catch (cleanupError) {\n            // Log cleanup errors but don't mask the original error\n            logger.warn({\n                error: cleanupError?.message\n            }, `⚠️  Resource cleanup failed: ${cleanupError?.message || String(cleanupError)}`);\n        }\n    }\n}\n/**\n * Create a resource wrapper for a temp directory\n * @param dirPath - Path to the temporary directory\n * @returns Resource object with cleanup method\n */ function tempDirResource(dirPath) {\n    return {\n        async cleanup () {\n            await cleanupTempDir(dirPath);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vc3JjL3V0aWxzL2NsZWFudXAudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXdDO0FBQ1E7QUFFaEQsTUFBTUUsU0FBU0QsNkRBQWlCQSxDQUFDO0FBU2pDOzs7O0NBSUMsR0FDTSxlQUFlRSxlQUFlQyxPQUFlO0lBQ2xELElBQUk7UUFDRixNQUFNSixnREFBTSxDQUFDSSxTQUFTO1lBQUVFLFdBQVc7WUFBTUMsT0FBTztRQUFLO1FBQ3JETCxPQUFPTSxLQUFLLENBQUM7WUFBRUo7UUFBUSxHQUFHLENBQUMsa0NBQWtDLEVBQUVBLFFBQVEsQ0FBQztJQUMxRSxFQUFFLE9BQU9LLE9BQVk7UUFDbkIsa0RBQWtEO1FBQ2xEUCxPQUFPUSxJQUFJLENBQUM7WUFBRU47WUFBU0ssT0FBT0EsT0FBT0U7UUFBUSxHQUFHLENBQUMsNENBQTRDLEVBQUVQLFFBQVEsQ0FBQztRQUN4R0YsT0FBT1EsSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFRCxPQUFPRSxXQUFXQyxPQUFPSCxPQUFPLENBQUM7SUFDMUQsb0VBQW9FO0lBQ3RFO0FBQ0Y7QUFFQTs7Ozs7O0NBTUMsR0FDTSxlQUFlSSxZQUNwQkMsUUFBa0IsRUFDbEJDLEVBQW9CO0lBRXBCLElBQUk7UUFDRixPQUFPLE1BQU1BO0lBQ2YsU0FBVTtRQUNSLDRDQUE0QztRQUM1QyxJQUFJO1lBQ0YsTUFBTUQsU0FBU0UsT0FBTztRQUN4QixFQUFFLE9BQU9DLGNBQW1CO1lBQzFCLHVEQUF1RDtZQUN2RGYsT0FBT1EsSUFBSSxDQUFDO2dCQUFFRCxPQUFPUSxjQUFjTjtZQUFRLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRU0sY0FBY04sV0FBV0MsT0FBT0ssY0FBYyxDQUFDO1FBQy9IO0lBQ0Y7QUFDRjtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTQyxnQkFBZ0JkLE9BQWU7SUFDN0MsT0FBTztRQUNMLE1BQU1ZO1lBQ0osTUFBTWIsZUFBZUM7UUFDdkI7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBpcC91aS8uLi8uLi9zcmMvdXRpbHMvY2xlYW51cC50cz9jZGEzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzcCBmcm9tIFwibm9kZTpmcy9wcm9taXNlc1wiO1xuaW1wb3J0IHsgY3JlYXRlQ2hpbGRMb2dnZXIgfSBmcm9tIFwiLi9sb2dnZXIuanNcIjtcblxuY29uc3QgbG9nZ2VyID0gY3JlYXRlQ2hpbGRMb2dnZXIoXCJjbGVhbnVwXCIpO1xuXG4vKipcbiAqIFJlc291cmNlIGludGVyZmFjZSBmb3IgZ2VuZXJpYyBjbGVhbnVwIHdyYXBwZXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZSB7XG4gIGNsZWFudXAoKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuLyoqXG4gKiBDbGVhbiB1cCBhIHRlbXBvcmFyeSBkaXJlY3Rvcnkgd2l0aCBwcm9wZXIgZXJyb3IgbG9nZ2luZ1xuICogQHBhcmFtIGRpclBhdGggLSBQYXRoIHRvIHRoZSB0ZW1wb3JhcnkgZGlyZWN0b3J5IHRvIHJlbW92ZVxuICogQHRocm93cyBOZXZlciB0aHJvd3MgLSBsb2dzIGVycm9ycyBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhbnVwVGVtcERpcihkaXJQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmc3Aucm0oZGlyUGF0aCwgeyByZWN1cnNpdmU6IHRydWUsIGZvcmNlOiB0cnVlIH0pO1xuICAgIGxvZ2dlci5kZWJ1Zyh7IGRpclBhdGggfSwgYOKckyBDbGVhbmVkIHVwIHRlbXBvcmFyeSBkaXJlY3Rvcnk6ICR7ZGlyUGF0aH1gKTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIC8vIExvZyB0aGUgZXJyb3IgaW5zdGVhZCBvZiBzaWxlbnRseSBzd2FsbG93aW5nIGl0XG4gICAgbG9nZ2VyLndhcm4oeyBkaXJQYXRoLCBlcnJvcjogZXJyb3I/Lm1lc3NhZ2UgfSwgYOKaoO+4jyAgRmFpbGVkIHRvIGNsZWFuIHVwIHRlbXBvcmFyeSBkaXJlY3Rvcnk6ICR7ZGlyUGF0aH1gKTtcbiAgICBsb2dnZXIud2FybihgICAgRXJyb3I6ICR7ZXJyb3I/Lm1lc3NhZ2UgfHwgU3RyaW5nKGVycm9yKX1gKTtcbiAgICAvLyBEb24ndCB0aHJvdyAtIGNsZWFudXAgZmFpbHVyZXMgc2hvdWxkbid0IGJyZWFrIHRoZSBtYWluIG9wZXJhdGlvblxuICB9XG59XG5cbi8qKlxuICogRXhlY3V0ZSBhIGZ1bmN0aW9uIHdpdGggYXV0b21hdGljIHJlc291cmNlIGNsZWFudXBcbiAqIEBwYXJhbSByZXNvdXJjZSAtIFJlc291cmNlIHdpdGggY2xlYW51cCBtZXRob2RcbiAqIEBwYXJhbSBmbiAtIEZ1bmN0aW9uIHRvIGV4ZWN1dGVcbiAqIEByZXR1cm5zIFRoZSByZXN1bHQgb2YgdGhlIGZ1bmN0aW9uXG4gKiBAdGhyb3dzIFJldGhyb3dzIGFueSBlcnJvciBmcm9tIGZuIGFmdGVyIGVuc3VyaW5nIGNsZWFudXBcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdpdGhDbGVhbnVwPFQ+KFxuICByZXNvdXJjZTogUmVzb3VyY2UsXG4gIGZuOiAoKSA9PiBQcm9taXNlPFQ+XG4pOiBQcm9taXNlPFQ+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBBbHdheXMgYXR0ZW1wdCBjbGVhbnVwLCBldmVuIGlmIGZuIHRocm93c1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCByZXNvdXJjZS5jbGVhbnVwKCk7XG4gICAgfSBjYXRjaCAoY2xlYW51cEVycm9yOiBhbnkpIHtcbiAgICAgIC8vIExvZyBjbGVhbnVwIGVycm9ycyBidXQgZG9uJ3QgbWFzayB0aGUgb3JpZ2luYWwgZXJyb3JcbiAgICAgIGxvZ2dlci53YXJuKHsgZXJyb3I6IGNsZWFudXBFcnJvcj8ubWVzc2FnZSB9LCBg4pqg77iPICBSZXNvdXJjZSBjbGVhbnVwIGZhaWxlZDogJHtjbGVhbnVwRXJyb3I/Lm1lc3NhZ2UgfHwgU3RyaW5nKGNsZWFudXBFcnJvcil9YCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcmVzb3VyY2Ugd3JhcHBlciBmb3IgYSB0ZW1wIGRpcmVjdG9yeVxuICogQHBhcmFtIGRpclBhdGggLSBQYXRoIHRvIHRoZSB0ZW1wb3JhcnkgZGlyZWN0b3J5XG4gKiBAcmV0dXJucyBSZXNvdXJjZSBvYmplY3Qgd2l0aCBjbGVhbnVwIG1ldGhvZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVtcERpclJlc291cmNlKGRpclBhdGg6IHN0cmluZyk6IFJlc291cmNlIHtcbiAgcmV0dXJuIHtcbiAgICBhc3luYyBjbGVhbnVwKCkge1xuICAgICAgYXdhaXQgY2xlYW51cFRlbXBEaXIoZGlyUGF0aCk7XG4gICAgfVxuICB9O1xufVxuIl0sIm5hbWVzIjpbImZzcCIsImNyZWF0ZUNoaWxkTG9nZ2VyIiwibG9nZ2VyIiwiY2xlYW51cFRlbXBEaXIiLCJkaXJQYXRoIiwicm0iLCJyZWN1cnNpdmUiLCJmb3JjZSIsImRlYnVnIiwiZXJyb3IiLCJ3YXJuIiwibWVzc2FnZSIsIlN0cmluZyIsIndpdGhDbGVhbnVwIiwicmVzb3VyY2UiLCJmbiIsImNsZWFudXAiLCJjbGVhbnVwRXJyb3IiLCJ0ZW1wRGlyUmVzb3VyY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../src/utils/cleanup.ts\n");

/***/ }),

/***/ "(rsc)/../../src/utils/logger.ts":
/*!*********************************!*\
  !*** ../../src/utils/logger.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createChildLogger: () => (/* binding */ createChildLogger),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   info: () => (/* binding */ info),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pino */ \"(rsc)/../../node_modules/pino/pino.js\");\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pino__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Structured Logging Module\n *\n * This module provides a centralized logging solution using Pino.\n * Features:\n * - Structured JSON logging in production\n * - Pretty-printed logs in development\n * - Configurable log levels\n * - Automatic redaction of sensitive fields\n * - Child loggers for module-specific contexts\n */ \n/**\n * Determine if we're in development mode\n */ const isDevelopment = \"development\" !== \"production\";\n/**\n * Get log level from environment or use default\n * Priority: LOG_LEVEL env var > default 'info'\n */ const logLevel = process.env.LOG_LEVEL || \"info\";\n/**\n * Configure pino transport for pretty printing in development\n */ const transport = isDevelopment ? {\n    target: \"pino-pretty\",\n    options: {\n        colorize: true,\n        translateTime: \"HH:MM:ss\",\n        ignore: \"pid,hostname\",\n        singleLine: false\n    }\n} : undefined;\n/**\n * Main logger instance\n * Configured with:\n * - Environment-based formatting (pretty in dev, JSON in prod)\n * - Sensitive field redaction\n * - Configurable log level\n */ const logger = (0,pino__WEBPACK_IMPORTED_MODULE_0__.pino)({\n    level: logLevel,\n    transport,\n    redact: {\n        paths: [\n            \"req.headers.authorization\",\n            \"req.headers.cookie\",\n            \"req.headers['set-cookie']\",\n            \"req.headers['x-api-key']\",\n            \"req.headers['x-auth-token']\"\n        ],\n        remove: true\n    },\n    formatters: {\n        level: (label)=>{\n            return {\n                level: label\n            };\n        }\n    },\n    // Add timestamp in production\n    timestamp: !isDevelopment ? pino__WEBPACK_IMPORTED_MODULE_0__.pino.stdTimeFunctions.isoTime : undefined\n});\n/**\n * Create a child logger with a specific name/context\n * Useful for module-specific logging\n *\n * @param name - Name of the module or component\n * @returns Child logger instance with name context\n *\n * @example\n * const moduleLogger = createChildLogger('gemini-transcriber');\n * moduleLogger.info('Processing audio file');\n */ function createChildLogger(name) {\n    return logger.child({\n        module: name\n    });\n}\n/**\n * Debug level logging - for verbose debugging information\n * @param msg - Log message\n * @param context - Optional structured data context\n */ function debug(msg, context) {\n    if (context) {\n        logger.debug(context, msg);\n    } else {\n        logger.debug(msg);\n    }\n}\n/**\n * Info level logging - for general informational messages\n * @param msg - Log message\n * @param context - Optional structured data context\n */ function info(msg, context) {\n    if (context) {\n        logger.info(context, msg);\n    } else {\n        logger.info(msg);\n    }\n}\n/**\n * Warning level logging - for warning messages\n * @param msg - Log message\n * @param context - Optional structured data context\n */ function warn(msg, context) {\n    if (context) {\n        logger.warn(context, msg);\n    } else {\n        logger.warn(msg);\n    }\n}\n/**\n * Error level logging - for error messages\n * @param msg - Log message\n * @param context - Optional structured data context (including error objects)\n */ function error(msg, context) {\n    if (context) {\n        logger.error(context, msg);\n    } else {\n        logger.error(msg);\n    }\n}\n// Export default logger for convenience\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vc3JjL3V0aWxzL2xvZ2dlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7OztDQVVDLEdBRTJCO0FBRTVCOztDQUVDLEdBQ0QsTUFBTUMsZ0JBQWdCQyxrQkFBeUI7QUFFL0M7OztDQUdDLEdBQ0QsTUFBTUMsV0FBWUQsUUFBUUUsR0FBRyxDQUFDQyxTQUFTLElBQUk7QUFFM0M7O0NBRUMsR0FDRCxNQUFNQyxZQUFZTCxnQkFDZDtJQUNFTSxRQUFRO0lBQ1JDLFNBQVM7UUFDUEMsVUFBVTtRQUNWQyxlQUFlO1FBQ2ZDLFFBQVE7UUFDUkMsWUFBWTtJQUNkO0FBQ0YsSUFDQUM7QUFFSjs7Ozs7O0NBTUMsR0FDTSxNQUFNQyxTQUFTZCwwQ0FBSUEsQ0FBQztJQUN6QmUsT0FBT1o7SUFDUEc7SUFDQVUsUUFBUTtRQUNOQyxPQUFPO1lBQ0w7WUFDQTtZQUNBO1lBQ0E7WUFDQTtTQUNEO1FBQ0RDLFFBQVE7SUFDVjtJQUNBQyxZQUFZO1FBQ1ZKLE9BQU8sQ0FBQ0s7WUFDTixPQUFPO2dCQUFFTCxPQUFPSztZQUFNO1FBQ3hCO0lBQ0Y7SUFDQSw4QkFBOEI7SUFDOUJDLFdBQVcsQ0FBQ3BCLGdCQUFnQkQsc0NBQUlBLENBQUNzQixnQkFBZ0IsQ0FBQ0MsT0FBTyxHQUFHVjtBQUM5RCxHQUFHO0FBRUg7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLFNBQVNXLGtCQUFrQkMsSUFBWTtJQUM1QyxPQUFPWCxPQUFPWSxLQUFLLENBQUM7UUFBRUMsUUFBUUY7SUFBSztBQUNyQztBQVNBOzs7O0NBSUMsR0FDTSxTQUFTRyxNQUFNQyxHQUFXLEVBQUVDLE9BQW9CO0lBQ3JELElBQUlBLFNBQVM7UUFDWGhCLE9BQU9jLEtBQUssQ0FBQ0UsU0FBU0Q7SUFDeEIsT0FBTztRQUNMZixPQUFPYyxLQUFLLENBQUNDO0lBQ2Y7QUFDRjtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTRSxLQUFLRixHQUFXLEVBQUVDLE9BQW9CO0lBQ3BELElBQUlBLFNBQVM7UUFDWGhCLE9BQU9pQixJQUFJLENBQUNELFNBQVNEO0lBQ3ZCLE9BQU87UUFDTGYsT0FBT2lCLElBQUksQ0FBQ0Y7SUFDZDtBQUNGO0FBRUE7Ozs7Q0FJQyxHQUNNLFNBQVNHLEtBQUtILEdBQVcsRUFBRUMsT0FBb0I7SUFDcEQsSUFBSUEsU0FBUztRQUNYaEIsT0FBT2tCLElBQUksQ0FBQ0YsU0FBU0Q7SUFDdkIsT0FBTztRQUNMZixPQUFPa0IsSUFBSSxDQUFDSDtJQUNkO0FBQ0Y7QUFFQTs7OztDQUlDLEdBQ00sU0FBU0ksTUFBTUosR0FBVyxFQUFFQyxPQUFvQjtJQUNyRCxJQUFJQSxTQUFTO1FBQ1hoQixPQUFPbUIsS0FBSyxDQUFDSCxTQUFTRDtJQUN4QixPQUFPO1FBQ0xmLE9BQU9tQixLQUFLLENBQUNKO0lBQ2Y7QUFDRjtBQUVBLHdDQUF3QztBQUN4QyxpRUFBZWYsTUFBTUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BwaXAvdWkvLi4vLi4vc3JjL3V0aWxzL2xvZ2dlci50cz9hM2NmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3RydWN0dXJlZCBMb2dnaW5nIE1vZHVsZVxuICpcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIGEgY2VudHJhbGl6ZWQgbG9nZ2luZyBzb2x1dGlvbiB1c2luZyBQaW5vLlxuICogRmVhdHVyZXM6XG4gKiAtIFN0cnVjdHVyZWQgSlNPTiBsb2dnaW5nIGluIHByb2R1Y3Rpb25cbiAqIC0gUHJldHR5LXByaW50ZWQgbG9ncyBpbiBkZXZlbG9wbWVudFxuICogLSBDb25maWd1cmFibGUgbG9nIGxldmVsc1xuICogLSBBdXRvbWF0aWMgcmVkYWN0aW9uIG9mIHNlbnNpdGl2ZSBmaWVsZHNcbiAqIC0gQ2hpbGQgbG9nZ2VycyBmb3IgbW9kdWxlLXNwZWNpZmljIGNvbnRleHRzXG4gKi9cblxuaW1wb3J0IHsgcGlubyB9IGZyb20gXCJwaW5vXCI7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIGluIGRldmVsb3BtZW50IG1vZGVcbiAqL1xuY29uc3QgaXNEZXZlbG9wbWVudCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIjtcblxuLyoqXG4gKiBHZXQgbG9nIGxldmVsIGZyb20gZW52aXJvbm1lbnQgb3IgdXNlIGRlZmF1bHRcbiAqIFByaW9yaXR5OiBMT0dfTEVWRUwgZW52IHZhciA+IGRlZmF1bHQgJ2luZm8nXG4gKi9cbmNvbnN0IGxvZ0xldmVsID0gKHByb2Nlc3MuZW52LkxPR19MRVZFTCB8fCBcImluZm9cIikgYXMgcGluby5MZXZlbFdpdGhTaWxlbnQ7XG5cbi8qKlxuICogQ29uZmlndXJlIHBpbm8gdHJhbnNwb3J0IGZvciBwcmV0dHkgcHJpbnRpbmcgaW4gZGV2ZWxvcG1lbnRcbiAqL1xuY29uc3QgdHJhbnNwb3J0ID0gaXNEZXZlbG9wbWVudFxuICA/IHtcbiAgICAgIHRhcmdldDogXCJwaW5vLXByZXR0eVwiLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBjb2xvcml6ZTogdHJ1ZSxcbiAgICAgICAgdHJhbnNsYXRlVGltZTogXCJISDpNTTpzc1wiLFxuICAgICAgICBpZ25vcmU6IFwicGlkLGhvc3RuYW1lXCIsXG4gICAgICAgIHNpbmdsZUxpbmU6IGZhbHNlXG4gICAgICB9XG4gICAgfVxuICA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBNYWluIGxvZ2dlciBpbnN0YW5jZVxuICogQ29uZmlndXJlZCB3aXRoOlxuICogLSBFbnZpcm9ubWVudC1iYXNlZCBmb3JtYXR0aW5nIChwcmV0dHkgaW4gZGV2LCBKU09OIGluIHByb2QpXG4gKiAtIFNlbnNpdGl2ZSBmaWVsZCByZWRhY3Rpb25cbiAqIC0gQ29uZmlndXJhYmxlIGxvZyBsZXZlbFxuICovXG5leHBvcnQgY29uc3QgbG9nZ2VyID0gcGlubyh7XG4gIGxldmVsOiBsb2dMZXZlbCxcbiAgdHJhbnNwb3J0LFxuICByZWRhY3Q6IHtcbiAgICBwYXRoczogW1xuICAgICAgXCJyZXEuaGVhZGVycy5hdXRob3JpemF0aW9uXCIsXG4gICAgICBcInJlcS5oZWFkZXJzLmNvb2tpZVwiLFxuICAgICAgXCJyZXEuaGVhZGVyc1snc2V0LWNvb2tpZSddXCIsXG4gICAgICBcInJlcS5oZWFkZXJzWyd4LWFwaS1rZXknXVwiLFxuICAgICAgXCJyZXEuaGVhZGVyc1sneC1hdXRoLXRva2VuJ11cIlxuICAgIF0sXG4gICAgcmVtb3ZlOiB0cnVlXG4gIH0sXG4gIGZvcm1hdHRlcnM6IHtcbiAgICBsZXZlbDogKGxhYmVsOiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiB7IGxldmVsOiBsYWJlbCB9O1xuICAgIH1cbiAgfSxcbiAgLy8gQWRkIHRpbWVzdGFtcCBpbiBwcm9kdWN0aW9uXG4gIHRpbWVzdGFtcDogIWlzRGV2ZWxvcG1lbnQgPyBwaW5vLnN0ZFRpbWVGdW5jdGlvbnMuaXNvVGltZSA6IHVuZGVmaW5lZFxufSk7XG5cbi8qKlxuICogQ3JlYXRlIGEgY2hpbGQgbG9nZ2VyIHdpdGggYSBzcGVjaWZpYyBuYW1lL2NvbnRleHRcbiAqIFVzZWZ1bCBmb3IgbW9kdWxlLXNwZWNpZmljIGxvZ2dpbmdcbiAqXG4gKiBAcGFyYW0gbmFtZSAtIE5hbWUgb2YgdGhlIG1vZHVsZSBvciBjb21wb25lbnRcbiAqIEByZXR1cm5zIENoaWxkIGxvZ2dlciBpbnN0YW5jZSB3aXRoIG5hbWUgY29udGV4dFxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBtb2R1bGVMb2dnZXIgPSBjcmVhdGVDaGlsZExvZ2dlcignZ2VtaW5pLXRyYW5zY3JpYmVyJyk7XG4gKiBtb2R1bGVMb2dnZXIuaW5mbygnUHJvY2Vzc2luZyBhdWRpbyBmaWxlJyk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDaGlsZExvZ2dlcihuYW1lOiBzdHJpbmcpOiBwaW5vLkxvZ2dlciB7XG4gIHJldHVybiBsb2dnZXIuY2hpbGQoeyBtb2R1bGU6IG5hbWUgfSk7XG59XG5cbi8qKlxuICogVHlwZS1zYWZlIGxvZ2dpbmcgaGVscGVyIHdpdGggc3RydWN0dXJlZCBkYXRhIHN1cHBvcnRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMb2dDb250ZXh0IHtcbiAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuLyoqXG4gKiBEZWJ1ZyBsZXZlbCBsb2dnaW5nIC0gZm9yIHZlcmJvc2UgZGVidWdnaW5nIGluZm9ybWF0aW9uXG4gKiBAcGFyYW0gbXNnIC0gTG9nIG1lc3NhZ2VcbiAqIEBwYXJhbSBjb250ZXh0IC0gT3B0aW9uYWwgc3RydWN0dXJlZCBkYXRhIGNvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnKG1zZzogc3RyaW5nLCBjb250ZXh0PzogTG9nQ29udGV4dCk6IHZvaWQge1xuICBpZiAoY29udGV4dCkge1xuICAgIGxvZ2dlci5kZWJ1Zyhjb250ZXh0LCBtc2cpO1xuICB9IGVsc2Uge1xuICAgIGxvZ2dlci5kZWJ1Zyhtc2cpO1xuICB9XG59XG5cbi8qKlxuICogSW5mbyBsZXZlbCBsb2dnaW5nIC0gZm9yIGdlbmVyYWwgaW5mb3JtYXRpb25hbCBtZXNzYWdlc1xuICogQHBhcmFtIG1zZyAtIExvZyBtZXNzYWdlXG4gKiBAcGFyYW0gY29udGV4dCAtIE9wdGlvbmFsIHN0cnVjdHVyZWQgZGF0YSBjb250ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmZvKG1zZzogc3RyaW5nLCBjb250ZXh0PzogTG9nQ29udGV4dCk6IHZvaWQge1xuICBpZiAoY29udGV4dCkge1xuICAgIGxvZ2dlci5pbmZvKGNvbnRleHQsIG1zZyk7XG4gIH0gZWxzZSB7XG4gICAgbG9nZ2VyLmluZm8obXNnKTtcbiAgfVxufVxuXG4vKipcbiAqIFdhcm5pbmcgbGV2ZWwgbG9nZ2luZyAtIGZvciB3YXJuaW5nIG1lc3NhZ2VzXG4gKiBAcGFyYW0gbXNnIC0gTG9nIG1lc3NhZ2VcbiAqIEBwYXJhbSBjb250ZXh0IC0gT3B0aW9uYWwgc3RydWN0dXJlZCBkYXRhIGNvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdhcm4obXNnOiBzdHJpbmcsIGNvbnRleHQ/OiBMb2dDb250ZXh0KTogdm9pZCB7XG4gIGlmIChjb250ZXh0KSB7XG4gICAgbG9nZ2VyLndhcm4oY29udGV4dCwgbXNnKTtcbiAgfSBlbHNlIHtcbiAgICBsb2dnZXIud2Fybihtc2cpO1xuICB9XG59XG5cbi8qKlxuICogRXJyb3IgbGV2ZWwgbG9nZ2luZyAtIGZvciBlcnJvciBtZXNzYWdlc1xuICogQHBhcmFtIG1zZyAtIExvZyBtZXNzYWdlXG4gKiBAcGFyYW0gY29udGV4dCAtIE9wdGlvbmFsIHN0cnVjdHVyZWQgZGF0YSBjb250ZXh0IChpbmNsdWRpbmcgZXJyb3Igb2JqZWN0cylcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yKG1zZzogc3RyaW5nLCBjb250ZXh0PzogTG9nQ29udGV4dCk6IHZvaWQge1xuICBpZiAoY29udGV4dCkge1xuICAgIGxvZ2dlci5lcnJvcihjb250ZXh0LCBtc2cpO1xuICB9IGVsc2Uge1xuICAgIGxvZ2dlci5lcnJvcihtc2cpO1xuICB9XG59XG5cbi8vIEV4cG9ydCBkZWZhdWx0IGxvZ2dlciBmb3IgY29udmVuaWVuY2VcbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjtcbiJdLCJuYW1lcyI6WyJwaW5vIiwiaXNEZXZlbG9wbWVudCIsInByb2Nlc3MiLCJsb2dMZXZlbCIsImVudiIsIkxPR19MRVZFTCIsInRyYW5zcG9ydCIsInRhcmdldCIsIm9wdGlvbnMiLCJjb2xvcml6ZSIsInRyYW5zbGF0ZVRpbWUiLCJpZ25vcmUiLCJzaW5nbGVMaW5lIiwidW5kZWZpbmVkIiwibG9nZ2VyIiwibGV2ZWwiLCJyZWRhY3QiLCJwYXRocyIsInJlbW92ZSIsImZvcm1hdHRlcnMiLCJsYWJlbCIsInRpbWVzdGFtcCIsInN0ZFRpbWVGdW5jdGlvbnMiLCJpc29UaW1lIiwiY3JlYXRlQ2hpbGRMb2dnZXIiLCJuYW1lIiwiY2hpbGQiLCJtb2R1bGUiLCJkZWJ1ZyIsIm1zZyIsImNvbnRleHQiLCJpbmZvIiwid2FybiIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../src/utils/logger.ts\n");

/***/ }),

/***/ "(rsc)/../../src/utils/mcp-helpers.ts":
/*!**************************************!*\
  !*** ../../src/utils/mcp-helpers.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnvNumber: () => (/* binding */ getEnvNumber),\n/* harmony export */   hasEnvVar: () => (/* binding */ hasEnvVar),\n/* harmony export */   mcpSuccess: () => (/* binding */ mcpSuccess)\n/* harmony export */ });\n/**\n * Helper functions for standardized MCP tool responses.\n * These utilities eliminate duplicate JSON response patterns across MCP tools.\n *\n * Note: For error responses, use mcpError from safe-stringify.ts which includes\n * sanitization and redaction of sensitive data.\n */ /**\n * Creates a standardized successful MCP tool response.\n *\n * @param data - The success data to return (will be merged with { ok: true })\n * @returns Formatted MCP tool result with success payload\n *\n * @example\n * return mcpSuccess({ transcript: \"...\", segments: [...] });\n * // Returns: { content: [{ type: \"text\", text: '{\"ok\":true,\"transcript\":\"...\",\"segments\":[...]}' }] }\n *\n * @example\n * return mcpSuccess({ draft: \"Performance Improvement Plan...\" });\n * // Returns: { content: [{ type: \"text\", text: '{\"ok\":true,\"draft\":\"...\"}' }] }\n *\n * @example\n * return mcpSuccess({ outputPath: \"/path/to/file.docx\" });\n * // Returns: { content: [{ type: \"text\", text: '{\"ok\":true,\"outputPath\":\"/path/to/file.docx\"}' }] }\n */ function mcpSuccess(data) {\n    const response = {\n        ok: true,\n        ...data\n    };\n    return {\n        content: [\n            {\n                type: \"text\",\n                text: JSON.stringify(response)\n            }\n        ]\n    };\n}\n/**\n * Helper to check if an environment variable exists.\n *\n * @param key - Environment variable name\n * @returns True if the environment variable is set and non-empty\n *\n * @example\n * if (!hasEnvVar(\"GEMINI_API_KEY\")) {\n *   return mcpError(\"Missing GEMINI_API_KEY\");\n * }\n */ function hasEnvVar(key) {\n    const value = process.env[key];\n    return typeof value === \"string\" && value.length > 0;\n}\n/**\n * Helper to get an environment variable as a number with a default fallback.\n *\n * @param key - Environment variable name\n * @param defaultValue - Default value if env var is not set or invalid\n * @returns Parsed number value or default\n *\n * @example\n * const chunkSeconds = getEnvNumber(\"GEMINI_CHUNK_SECONDS\", DEFAULT_AUDIO_CHUNK_SECONDS);\n */ function getEnvNumber(key, defaultValue) {\n    const value = process.env[key];\n    if (!value) return defaultValue;\n    const parsed = Number(value);\n    return Number.isFinite(parsed) ? parsed : defaultValue;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vc3JjL3V0aWxzL21jcC1oZWxwZXJzLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7Q0FNQyxHQVlEOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNNLFNBQVNBLFdBQVdDLElBQTZCO0lBQ3RELE1BQU1DLFdBQStCO1FBQ25DQyxJQUFJO1FBQ0osR0FBR0YsSUFBSTtJQUNUO0lBRUEsT0FBTztRQUNMRyxTQUFTO1lBQ1A7Z0JBQ0VDLE1BQU07Z0JBQ05DLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ047WUFDdkI7U0FDRDtJQUNIO0FBQ0Y7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBQ00sU0FBU08sVUFBVUMsR0FBVztJQUNuQyxNQUFNQyxRQUFRQyxRQUFRQyxHQUFHLENBQUNILElBQUk7SUFDOUIsT0FBTyxPQUFPQyxVQUFVLFlBQVlBLE1BQU1HLE1BQU0sR0FBRztBQUNyRDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNDLGFBQWFMLEdBQVcsRUFBRU0sWUFBb0I7SUFDNUQsTUFBTUwsUUFBUUMsUUFBUUMsR0FBRyxDQUFDSCxJQUFJO0lBQzlCLElBQUksQ0FBQ0MsT0FBTyxPQUFPSztJQUVuQixNQUFNQyxTQUFTQyxPQUFPUDtJQUN0QixPQUFPTyxPQUFPQyxRQUFRLENBQUNGLFVBQVVBLFNBQVNEO0FBQzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHBpcC91aS8uLi8uLi9zcmMvdXRpbHMvbWNwLWhlbHBlcnMudHM/MjRjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIHN0YW5kYXJkaXplZCBNQ1AgdG9vbCByZXNwb25zZXMuXG4gKiBUaGVzZSB1dGlsaXRpZXMgZWxpbWluYXRlIGR1cGxpY2F0ZSBKU09OIHJlc3BvbnNlIHBhdHRlcm5zIGFjcm9zcyBNQ1AgdG9vbHMuXG4gKlxuICogTm90ZTogRm9yIGVycm9yIHJlc3BvbnNlcywgdXNlIG1jcEVycm9yIGZyb20gc2FmZS1zdHJpbmdpZnkudHMgd2hpY2ggaW5jbHVkZXNcbiAqIHNhbml0aXphdGlvbiBhbmQgcmVkYWN0aW9uIG9mIHNlbnNpdGl2ZSBkYXRhLlxuICovXG5cbmltcG9ydCB0eXBlIHsgTUNQVG9vbFJlc3VsdCB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIFN0cnVjdHVyZSBmb3Igc3VjY2Vzc2Z1bCBNQ1AgcmVzcG9uc2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1DUFN1Y2Nlc3NSZXNwb25zZSB7XG4gIG9rOiB0cnVlO1xuICBba2V5OiBzdHJpbmddOiB1bmtub3duO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFuZGFyZGl6ZWQgc3VjY2Vzc2Z1bCBNQ1AgdG9vbCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0gZGF0YSAtIFRoZSBzdWNjZXNzIGRhdGEgdG8gcmV0dXJuICh3aWxsIGJlIG1lcmdlZCB3aXRoIHsgb2s6IHRydWUgfSlcbiAqIEByZXR1cm5zIEZvcm1hdHRlZCBNQ1AgdG9vbCByZXN1bHQgd2l0aCBzdWNjZXNzIHBheWxvYWRcbiAqXG4gKiBAZXhhbXBsZVxuICogcmV0dXJuIG1jcFN1Y2Nlc3MoeyB0cmFuc2NyaXB0OiBcIi4uLlwiLCBzZWdtZW50czogWy4uLl0gfSk7XG4gKiAvLyBSZXR1cm5zOiB7IGNvbnRlbnQ6IFt7IHR5cGU6IFwidGV4dFwiLCB0ZXh0OiAne1wib2tcIjp0cnVlLFwidHJhbnNjcmlwdFwiOlwiLi4uXCIsXCJzZWdtZW50c1wiOlsuLi5dfScgfV0gfVxuICpcbiAqIEBleGFtcGxlXG4gKiByZXR1cm4gbWNwU3VjY2Vzcyh7IGRyYWZ0OiBcIlBlcmZvcm1hbmNlIEltcHJvdmVtZW50IFBsYW4uLi5cIiB9KTtcbiAqIC8vIFJldHVybnM6IHsgY29udGVudDogW3sgdHlwZTogXCJ0ZXh0XCIsIHRleHQ6ICd7XCJva1wiOnRydWUsXCJkcmFmdFwiOlwiLi4uXCJ9JyB9XSB9XG4gKlxuICogQGV4YW1wbGVcbiAqIHJldHVybiBtY3BTdWNjZXNzKHsgb3V0cHV0UGF0aDogXCIvcGF0aC90by9maWxlLmRvY3hcIiB9KTtcbiAqIC8vIFJldHVybnM6IHsgY29udGVudDogW3sgdHlwZTogXCJ0ZXh0XCIsIHRleHQ6ICd7XCJva1wiOnRydWUsXCJvdXRwdXRQYXRoXCI6XCIvcGF0aC90by9maWxlLmRvY3hcIn0nIH1dIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1jcFN1Y2Nlc3MoZGF0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiBNQ1BUb29sUmVzdWx0IHtcbiAgY29uc3QgcmVzcG9uc2U6IE1DUFN1Y2Nlc3NSZXNwb25zZSA9IHtcbiAgICBvazogdHJ1ZSxcbiAgICAuLi5kYXRhXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeShyZXNwb25zZSlcbiAgICAgIH1cbiAgICBdXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGNoZWNrIGlmIGFuIGVudmlyb25tZW50IHZhcmlhYmxlIGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ga2V5IC0gRW52aXJvbm1lbnQgdmFyaWFibGUgbmFtZVxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgc2V0IGFuZCBub24tZW1wdHlcbiAqXG4gKiBAZXhhbXBsZVxuICogaWYgKCFoYXNFbnZWYXIoXCJHRU1JTklfQVBJX0tFWVwiKSkge1xuICogICByZXR1cm4gbWNwRXJyb3IoXCJNaXNzaW5nIEdFTUlOSV9BUElfS0VZXCIpO1xuICogfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzRW52VmFyKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IHZhbHVlID0gcHJvY2Vzcy5lbnZba2V5XTtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5sZW5ndGggPiAwO1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUgYXMgYSBudW1iZXIgd2l0aCBhIGRlZmF1bHQgZmFsbGJhY2suXG4gKlxuICogQHBhcmFtIGtleSAtIEVudmlyb25tZW50IHZhcmlhYmxlIG5hbWVcbiAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgLSBEZWZhdWx0IHZhbHVlIGlmIGVudiB2YXIgaXMgbm90IHNldCBvciBpbnZhbGlkXG4gKiBAcmV0dXJucyBQYXJzZWQgbnVtYmVyIHZhbHVlIG9yIGRlZmF1bHRcbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgY2h1bmtTZWNvbmRzID0gZ2V0RW52TnVtYmVyKFwiR0VNSU5JX0NIVU5LX1NFQ09ORFNcIiwgREVGQVVMVF9BVURJT19DSFVOS19TRUNPTkRTKTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVudk51bWJlcihrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICBjb25zdCB2YWx1ZSA9IHByb2Nlc3MuZW52W2tleV07XG4gIGlmICghdmFsdWUpIHJldHVybiBkZWZhdWx0VmFsdWU7XG5cbiAgY29uc3QgcGFyc2VkID0gTnVtYmVyKHZhbHVlKTtcbiAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZShwYXJzZWQpID8gcGFyc2VkIDogZGVmYXVsdFZhbHVlO1xufVxuIl0sIm5hbWVzIjpbIm1jcFN1Y2Nlc3MiLCJkYXRhIiwicmVzcG9uc2UiLCJvayIsImNvbnRlbnQiLCJ0eXBlIiwidGV4dCIsIkpTT04iLCJzdHJpbmdpZnkiLCJoYXNFbnZWYXIiLCJrZXkiLCJ2YWx1ZSIsInByb2Nlc3MiLCJlbnYiLCJsZW5ndGgiLCJnZXRFbnZOdW1iZXIiLCJkZWZhdWx0VmFsdWUiLCJwYXJzZWQiLCJOdW1iZXIiLCJpc0Zpbml0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../src/utils/mcp-helpers.ts\n");

/***/ }),

/***/ "(rsc)/../../src/utils/safe-stringify.ts":
/*!*****************************************!*\
  !*** ../../src/utils/safe-stringify.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mcpError: () => (/* binding */ mcpError),\n/* harmony export */   safeStringify: () => (/* binding */ safeStringify)\n/* harmony export */ });\n/**\n * Safe JSON stringification utilities that handle circular references and redact sensitive data.\n */ const SENSITIVE_KEYS = [\n    \"password\",\n    \"apiKey\",\n    \"api_key\",\n    \"token\",\n    \"secret\",\n    \"authorization\",\n    \"auth\",\n    \"bearer\",\n    \"credential\",\n    \"apikey\",\n    \"accessToken\",\n    \"access_token\",\n    \"refreshToken\",\n    \"refresh_token\",\n    \"privateKey\",\n    \"private_key\"\n];\nconst REDACTED = \"[REDACTED]\";\nconst CIRCULAR = \"[Circular Reference]\";\n/**\n * Safely stringifies an object, handling circular references and redacting sensitive fields.\n * @param obj - The object to stringify\n * @param maxLength - Maximum length of the output string (default: 10000)\n * @returns A safe JSON string\n */ function safeStringify(obj, maxLength = 10000) {\n    try {\n        const seen = new WeakSet();\n        const json = JSON.stringify(obj, (key, value)=>{\n            // Redact sensitive fields\n            if (SENSITIVE_KEYS.includes(key.toLowerCase())) {\n                return REDACTED;\n            }\n            // Handle null/undefined\n            if (value === null || value === undefined) {\n                return value;\n            }\n            // Handle primitives\n            if (typeof value !== \"object\") {\n                return value;\n            }\n            // Detect circular references\n            if (seen.has(value)) {\n                return CIRCULAR;\n            }\n            seen.add(value);\n            // Handle errors specially\n            if (value instanceof Error) {\n                return {\n                    name: value.name,\n                    message: value.message,\n                    stack: value.stack?.split(\"\\n\").slice(0, 3).join(\"\\n\")\n                };\n            }\n            return value;\n        }, 2 // Pretty print with 2 spaces\n        );\n        // Truncate if too long\n        if (json.length > maxLength) {\n            return json.slice(0, maxLength) + `\\n... [truncated ${json.length - maxLength} characters]`;\n        }\n        return json;\n    } catch (error) {\n        // Fallback for non-serializable objects\n        return `[Failed to stringify: ${error instanceof Error ? error.message : String(error)}]`;\n    }\n}\n/**\n * Creates a safe MCP error response with sanitized error details.\n * @param message - The error message\n * @param error - The error object (optional)\n * @returns An MCP-compatible error response\n */ function mcpError(message, error) {\n    const payload = {\n        ok: false,\n        error: message\n    };\n    if (error) {\n        // Sanitize error details\n        if (error instanceof Error) {\n            payload.details = {\n                name: error.name,\n                message: error.message,\n                code: error.code\n            };\n        } else if (typeof error === \"object\" && error !== null) {\n            payload.details = sanitizeObject(error);\n        } else {\n            payload.details = String(error);\n        }\n    }\n    return {\n        content: [\n            {\n                type: \"text\",\n                text: safeStringify(payload)\n            }\n        ],\n        isError: true\n    };\n}\n/**\n * Sanitizes an object by removing sensitive fields and truncating large values.\n * @param obj - The object to sanitize\n * @param maxDepth - Maximum recursion depth\n * @returns A sanitized object\n */ function sanitizeObject(obj, maxDepth = 2) {\n    if (maxDepth <= 0) {\n        return \"[Max depth]\";\n    }\n    if (obj === null || obj === undefined) {\n        return obj;\n    }\n    if (typeof obj !== \"object\") {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.slice(0, 10).map((item)=>sanitizeObject(item, maxDepth - 1));\n    }\n    const sanitized = {};\n    let count = 0;\n    for(const key in obj){\n        if (count >= 20) {\n            sanitized[\"...\"] = \"[More fields omitted]\";\n            break;\n        }\n        if (SENSITIVE_KEYS.includes(key.toLowerCase())) {\n            sanitized[key] = REDACTED;\n        } else {\n            sanitized[key] = sanitizeObject(obj[key], maxDepth - 1);\n        }\n        count++;\n    }\n    return sanitized;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../src/utils/safe-stringify.ts\n");

/***/ }),

/***/ "(rsc)/../../src/utils/sanitize.ts":
/*!***********************************!*\
  !*** ../../src/utils/sanitize.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redactApiKey: () => (/* binding */ redactApiKey),\n/* harmony export */   sanitizeError: () => (/* binding */ sanitizeError),\n/* harmony export */   sanitizeForLogging: () => (/* binding */ sanitizeForLogging),\n/* harmony export */   sanitizePath: () => (/* binding */ sanitizePath)\n/* harmony export */ });\n/**\n * Sanitization utilities to prevent sensitive data leakage in error messages and logs.\n */ const SENSITIVE_FIELD_PATTERNS = [\n    /password/i,\n    /apikey/i,\n    /api_key/i,\n    /token/i,\n    /secret/i,\n    /authorization/i,\n    /auth/i,\n    /bearer/i,\n    /credential/i,\n    /key/i\n];\nconst API_KEY_PATTERN = /\\b(sk-[a-zA-Z0-9]{32,}|AIza[a-zA-Z0-9_-]{35})\\b/g;\nconst REDACTED = \"[REDACTED]\";\n/**\n * Sanitizes an error object by removing sensitive fields and truncating stack traces.\n * @param error - The error to sanitize\n * @returns A sanitized error object safe for logging\n */ function sanitizeError(error) {\n    if (!error) {\n        return {\n            name: \"UnknownError\",\n            message: \"An unknown error occurred\"\n        };\n    }\n    // Handle Error objects\n    if (error instanceof Error) {\n        const sanitized = {\n            name: error.name || \"Error\",\n            message: redactApiKey(error.message || \"Unknown error\")\n        };\n        // Include error code if present (e.g., ENOENT)\n        if (\"code\" in error && typeof error.code === \"string\") {\n            sanitized.code = error.code;\n        }\n        // Sanitize and truncate stack trace (remove absolute paths)\n        if (error.stack) {\n            sanitized.stack = sanitizePath(error.stack).split(\"\\n\").slice(0, 5) // Only keep first 5 lines\n            .join(\"\\n\");\n        }\n        // Check for additional properties on the error object\n        const errorObj = error;\n        for(const key in errorObj){\n            if (key === \"name\" || key === \"message\" || key === \"stack\" || key === \"code\") {\n                continue;\n            }\n            // Skip sensitive fields\n            if (isSensitiveField(key)) {\n                continue;\n            }\n            // Include safe additional properties\n            const value = errorObj[key];\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n                sanitized[key] = typeof value === \"string\" ? redactApiKey(value) : value;\n            }\n        }\n        return sanitized;\n    }\n    // Handle string errors\n    if (typeof error === \"string\") {\n        return {\n            name: \"Error\",\n            message: redactApiKey(error)\n        };\n    }\n    // Handle plain objects\n    if (typeof error === \"object\") {\n        const errorObj = error;\n        const sanitized = {\n            name: errorObj.name || \"Error\",\n            message: redactApiKey(errorObj.message || errorObj.error || \"Unknown error\")\n        };\n        // Include safe properties\n        for(const key in errorObj){\n            if (key === \"name\" || key === \"message\" || key === \"error\") {\n                continue;\n            }\n            if (isSensitiveField(key)) {\n                continue;\n            }\n            const value = errorObj[key];\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n                sanitized[key] = typeof value === \"string\" ? redactApiKey(value) : value;\n            }\n        }\n        return sanitized;\n    }\n    // Fallback for primitives\n    return {\n        name: \"Error\",\n        message: String(error)\n    };\n}\n/**\n * Sanitizes file paths by converting absolute paths to relative paths.\n * @param path - The path string to sanitize\n * @returns A sanitized path with sensitive directory information removed\n */ function sanitizePath(path) {\n    if (!path) return path;\n    // Remove common sensitive path prefixes\n    const sensitivePatterns = [\n        /\\/Users\\/[^/]+/g,\n        /\\/home\\/[^/]+/g,\n        /C:\\\\Users\\\\[^\\\\]+/g,\n        /\\/private\\/[^/]+/g\n    ];\n    let sanitized = path;\n    for (const pattern of sensitivePatterns){\n        sanitized = sanitized.replace(pattern, \"~\");\n    }\n    return sanitized;\n}\n/**\n * Redacts API keys and tokens from text.\n * @param text - The text to redact\n * @returns Text with API keys replaced with [REDACTED]\n */ function redactApiKey(text) {\n    if (!text) return text;\n    return text.replace(API_KEY_PATTERN, REDACTED);\n}\n/**\n * Deep sanitizes data structures for logging, removing sensitive fields and truncating large values.\n * @param data - The data to sanitize\n * @param maxDepth - Maximum recursion depth\n * @returns Sanitized data safe for logging\n */ function sanitizeForLogging(data, maxDepth = 3) {\n    if (maxDepth <= 0) {\n        return \"[Max depth reached]\";\n    }\n    // Handle null/undefined\n    if (data === null || data === undefined) {\n        return data;\n    }\n    // Handle primitives\n    if (typeof data === \"string\") {\n        // Truncate long strings\n        const truncated = data.length > 1000 ? data.slice(0, 1000) + \"...\" : data;\n        return redactApiKey(truncated);\n    }\n    if (typeof data === \"number\" || typeof data === \"boolean\") {\n        return data;\n    }\n    // Handle arrays\n    if (Array.isArray(data)) {\n        return data.slice(0, 50) // Limit array length\n        .map((item)=>sanitizeForLogging(item, maxDepth - 1));\n    }\n    // Handle objects\n    if (typeof data === \"object\") {\n        const sanitized = {};\n        let count = 0;\n        const maxKeys = 50;\n        for(const key in data){\n            if (count >= maxKeys) {\n                sanitized[\"...\"] = `[${Object.keys(data).length - maxKeys} more keys]`;\n                break;\n            }\n            // Skip sensitive fields\n            if (isSensitiveField(key)) {\n                sanitized[key] = REDACTED;\n                count++;\n                continue;\n            }\n            const value = data[key];\n            sanitized[key] = sanitizeForLogging(value, maxDepth - 1);\n            count++;\n        }\n        return sanitized;\n    }\n    // Fallback for functions, symbols, etc.\n    return String(data);\n}\n/**\n * Checks if a field name is sensitive.\n * @param fieldName - The field name to check\n * @returns True if the field is sensitive\n */ function isSensitiveField(fieldName) {\n    return SENSITIVE_FIELD_PATTERNS.some((pattern)=>pattern.test(fieldName));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../src/utils/sanitize.ts\n");

/***/ }),

/***/ "(rsc)/../../src/utils/shell-safe.ts":
/*!*************************************!*\
  !*** ../../src/utils/shell-safe.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCommandAvailable: () => (/* binding */ isCommandAvailable),\n/* harmony export */   runFFmpeg: () => (/* binding */ runFFmpeg),\n/* harmony export */   runFFprobe: () => (/* binding */ runFFprobe),\n/* harmony export */   safeSpawn: () => (/* binding */ safeSpawn)\n/* harmony export */ });\n/* harmony import */ var node_child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:child_process */ \"node:child_process\");\n/* harmony import */ var node_child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_child_process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _validation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validation.js */ \"(rsc)/../../src/utils/validation.ts\");\n/**\n * Shell-Safe Command Execution Utilities\n *\n * This module provides secure wrappers for executing shell commands with\n * comprehensive validation and sanitization to prevent command injection attacks.\n *\n * @security CRITICAL - This module prevents command injection vulnerabilities.\n * All external command execution should go through these wrappers.\n *\n * @warning NEVER use child_process.exec() or shell: true with user input.\n * Always use spawn() with argument arrays and validation.\n */ \n\n\n// ============================================================================\n// Command Whitelist\n// ============================================================================\n/**\n * Whitelist of allowed commands\n * Only these commands can be executed through safeSpawn\n *\n * @security This whitelist prevents arbitrary command execution.\n * Add commands with extreme caution.\n */ const ALLOWED_COMMANDS = new Set([\n    \"ffmpeg\",\n    \"ffprobe\",\n    \"aws\"\n]);\n// ============================================================================\n// Command Validation\n// ============================================================================\n/**\n * Validates that a command is in the whitelist\n *\n * @param command - The command to validate\n * @throws Error if command is not whitelisted\n *\n * @security This prevents execution of arbitrary commands\n */ function validateCommand(command) {\n    if (!command || typeof command !== \"string\") {\n        throw new Error(\"Command must be a non-empty string\");\n    }\n    // Extract base command name (remove path)\n    const baseCommand = command.split(\"/\").pop()?.split(\"\\\\\").pop() || command;\n    if (!ALLOWED_COMMANDS.has(baseCommand)) {\n        throw new Error(`Command \"${baseCommand}\" is not whitelisted. ` + `Allowed commands: ${Array.from(ALLOWED_COMMANDS).join(\", \")}`);\n    }\n}\n/**\n * Validates command arguments for safety\n *\n * @param args - Arguments to validate\n * @param options - Validation options\n * @returns Validated and potentially sanitized arguments\n *\n * @security This function detects and blocks injection attempts\n */ function validateArguments(args, options = {}) {\n    const validatedArgs = [];\n    for(let i = 0; i < args.length; i++){\n        const arg = args[i];\n        if (typeof arg !== \"string\") {\n            throw new Error(`Argument at index ${i} must be a string`);\n        }\n        // Check for null bytes\n        if (arg.includes(\"\\0\")) {\n            throw new Error(`Argument at index ${i} contains null bytes (potential injection attempt)`);\n        }\n        // Check for newlines (potential injection)\n        if (arg.includes(\"\\n\") || arg.includes(\"\\r\")) {\n            throw new Error(`Argument at index ${i} contains newlines (potential injection attempt)`);\n        }\n        // If this looks like a file path argument, validate it\n        if (options.validatePaths && isFilePath(arg, args[i - 1])) {\n            // Path validation for file arguments\n            // Allow paths that exist or look like output paths\n            const validation = (0,_validation_js__WEBPACK_IMPORTED_MODULE_2__.validateFilePath)(arg, {\n                mustExist: false,\n                allowAbsolute: true // ffmpeg/ffprobe may need absolute paths\n            });\n            if (!validation.valid) {\n                throw new Error(`Invalid file path at argument ${i}: ${validation.error}. ${validation.hint || \"\"}`);\n            }\n            // Use the sanitized path\n            validatedArgs.push(validation.sanitizedPath);\n        } else {\n            validatedArgs.push(arg);\n        }\n    }\n    return validatedArgs;\n}\n/**\n * Heuristic to detect if an argument is likely a file path\n *\n * @param arg - The argument to check\n * @param previousArg - The previous argument (to check for file flags)\n * @returns True if argument appears to be a file path\n */ function isFilePath(arg, previousArg) {\n    // Check if previous argument was a file-related flag\n    const fileFlags = [\n        \"-i\",\n        \"-o\",\n        \"--input\",\n        \"--output\",\n        \"--file\"\n    ];\n    if (previousArg && fileFlags.includes(previousArg)) {\n        return true;\n    }\n    const hasSeparator = arg.includes(\"/\") || arg.includes(\"\\\\\");\n    const hasRelativePrefix = arg.startsWith(\"./\") || arg.startsWith(\"../\");\n    const hasExtension = Boolean((0,node_path__WEBPACK_IMPORTED_MODULE_1__.extname)(arg));\n    return hasSeparator || hasRelativePrefix || hasExtension;\n}\n// ============================================================================\n// Safe Command Execution\n// ============================================================================\n/**\n * Safely executes a shell command with comprehensive validation\n *\n * @param command - The command to execute (must be whitelisted)\n * @param args - Command arguments (will be validated)\n * @param options - Execution options\n * @returns Promise resolving to command output\n *\n * @throws Error if command is not whitelisted, arguments are invalid,\n *         or command execution fails\n *\n * @example\n * // Safe usage\n * const result = await safeSpawn(\"ffprobe\", [\"-v\", \"error\", \"audio.mp3\"]);\n *\n * // Unsafe - will throw error\n * await safeSpawn(\"rm\", [\"-rf\", \"/\"]); // Not whitelisted\n * await safeSpawn(\"ffmpeg\", [\"file.mp3; rm -rf /\"]); // Injection detected\n *\n * @security This is the primary defense against command injection.\n * Key security features:\n * - Command whitelist prevents arbitrary command execution\n * - Argument validation detects injection patterns\n * - File path validation prevents path traversal\n * - No shell interpretation (spawn vs exec)\n * - Timeout prevents resource exhaustion\n * - Buffer limits prevent memory exhaustion\n */ async function safeSpawn(command, args, options) {\n    // Normalize options\n    const baseEnv = {};\n    if (process.env) {\n        for (const [key, value] of Object.entries(process.env)){\n            if (value !== undefined) {\n                baseEnv[key] = value;\n            }\n        }\n    }\n    const opts = {\n        cwd: options?.cwd || process.cwd(),\n        env: {\n            ...baseEnv,\n            ...options?.env\n        },\n        timeout: options?.timeout ?? 300000,\n        maxBuffer: options?.maxBuffer ?? 10 * 1024 * 1024,\n        validatePaths: options?.validatePaths ?? true\n    };\n    // Validate command is whitelisted\n    validateCommand(command);\n    // Validate and sanitize arguments\n    const validatedArgs = validateArguments(args, {\n        validatePaths: opts.validatePaths\n    });\n    // Prepare spawn options\n    const spawnOptions = {\n        cwd: opts.cwd,\n        env: opts.env,\n        stdio: [\n            \"ignore\",\n            \"pipe\",\n            \"pipe\"\n        ]\n    };\n    return new Promise((resolve, reject)=>{\n        let stdout = \"\";\n        let stderr = \"\";\n        let killed = false;\n        // Start the process\n        const child = (0,node_child_process__WEBPACK_IMPORTED_MODULE_0__.spawn)(command, validatedArgs, spawnOptions);\n        // Set timeout\n        const timeoutId = setTimeout(()=>{\n            killed = true;\n            child.kill(\"SIGTERM\");\n            // Force kill after 5 seconds\n            setTimeout(()=>{\n                if (!child.killed) {\n                    child.kill(\"SIGKILL\");\n                }\n            }, 5000);\n        }, opts.timeout);\n        // Collect stdout\n        child.stdout?.on(\"data\", (chunk)=>{\n            stdout += chunk.toString();\n            // Check buffer size\n            if (stdout.length > opts.maxBuffer) {\n                killed = true;\n                child.kill(\"SIGTERM\");\n                reject(new Error(`Command output exceeded maximum buffer size (${opts.maxBuffer} bytes)`));\n            }\n        });\n        // Collect stderr\n        child.stderr?.on(\"data\", (chunk)=>{\n            stderr += chunk.toString();\n            // Check buffer size\n            if (stderr.length > opts.maxBuffer) {\n                killed = true;\n                child.kill(\"SIGTERM\");\n                reject(new Error(`Command error output exceeded maximum buffer size (${opts.maxBuffer} bytes)`));\n            }\n        });\n        // Handle process errors (e.g., command not found)\n        child.on(\"error\", (error)=>{\n            clearTimeout(timeoutId);\n            reject(new Error(`Failed to execute command \"${command}\": ${error.message}`));\n        });\n        // Handle process exit\n        child.on(\"close\", (code)=>{\n            clearTimeout(timeoutId);\n            if (killed) {\n                reject(new Error(`Command \"${command}\" was killed (timeout or buffer exceeded)`));\n                return;\n            }\n            const exitCode = code ?? -1;\n            if (exitCode === 0) {\n                // Success\n                resolve({\n                    stdout,\n                    stderr,\n                    exitCode: 0\n                });\n            } else {\n                // Non-zero exit code\n                reject(new Error(`${command} exited with code ${exitCode}: ${stderr || stdout}`));\n            }\n        });\n    });\n}\n/**\n * Wrapper for running ffmpeg commands safely\n *\n * @param args - ffmpeg arguments (without \"ffmpeg\" command)\n * @param options - Execution options\n * @returns Command result\n *\n * @example\n * await runFFmpeg([\"-i\", \"input.mp3\", \"output.wav\"]);\n */ async function runFFmpeg(args, options) {\n    return safeSpawn(\"ffmpeg\", args, options);\n}\n/**\n * Wrapper for running ffprobe commands safely\n *\n * @param args - ffprobe arguments (without \"ffprobe\" command)\n * @param options - Execution options\n * @returns Command result\n *\n * @example\n * const result = await runFFprobe([\"-v\", \"error\", \"-show_format\", \"audio.mp3\"]);\n */ async function runFFprobe(args, options) {\n    return safeSpawn(\"ffprobe\", args, options);\n}\n/**\n * Checks if a command is available in the system PATH\n *\n * @param command - The command to check\n * @returns True if command is available\n *\n * @example\n * if (await isCommandAvailable(\"ffmpeg\")) {\n *   // ffmpeg is installed\n * }\n */ async function isCommandAvailable(command) {\n    try {\n        validateCommand(command);\n        // Try to get version or help (most commands support --version or --help)\n        const result = await safeSpawn(command, [\n            \"--version\"\n        ], {\n            timeout: 5000,\n            validatePaths: false\n        });\n        return result.exitCode === 0;\n    } catch (error) {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../src/utils/shell-safe.ts\n");

/***/ }),

/***/ "(rsc)/../../src/utils/validation.ts":
/*!*************************************!*\
  !*** ../../src/utils/validation.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PathValidationError: () => (/* binding */ PathValidationError),\n/* harmony export */   isPathTraversal: () => (/* binding */ isPathTraversal),\n/* harmony export */   isSensitiveSystemPath: () => (/* binding */ isSensitiveSystemPath),\n/* harmony export */   normalizeAndValidatePath: () => (/* binding */ normalizeAndValidatePath),\n/* harmony export */   sanitizeForShellCommand: () => (/* binding */ sanitizeForShellCommand),\n/* harmony export */   validateDirectoryPath: () => (/* binding */ validateDirectoryPath),\n/* harmony export */   validateFilePath: () => (/* binding */ validateFilePath),\n/* harmony export */   validateOutputPath: () => (/* binding */ validateOutputPath),\n/* harmony export */   validateShellSafe: () => (/* binding */ validateShellSafe)\n/* harmony export */ });\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(node_fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_path__WEBPACK_IMPORTED_MODULE_1__);\n/**\n * Input Validation and Path Security Utilities\n *\n * This module provides comprehensive validation for file paths and user inputs\n * to prevent security vulnerabilities including:\n * - Path traversal attacks (../)\n * - Command injection\n * - Access to sensitive system files\n * - Malicious file extensions\n *\n * @security CRITICAL - These functions are the first line of defense against\n * path traversal and command injection attacks. Any modifications must be\n * carefully reviewed for security implications.\n */ \n\n// ============================================================================\n// Custom Error Types\n// ============================================================================\n/**\n * Error thrown when path validation fails\n * This error type allows catching and handling validation failures separately\n */ class PathValidationError extends Error {\n    constructor(message, attemptedPath, hint){\n        super(message);\n        this.name = \"PathValidationError\";\n        this.validationIssue = message;\n        this.attemptedPath = attemptedPath;\n        this.hint = hint;\n        // Maintain proper prototype chain for instanceof checks\n        Object.setPrototypeOf(this, PathValidationError.prototype);\n    }\n}\n// ============================================================================\n// Security Constants\n// ============================================================================\n/**\n * Dangerous path patterns that should be blocked\n * These patterns indicate potential path traversal or access to sensitive files\n */ const DANGEROUS_PATH_PATTERNS = [\n    /\\.\\./,\n    /\\/\\.\\./,\n    /\\.\\.\\//,\n    /\\.\\.\\\\/,\n    /~\\//,\n    /\\$\\{/,\n    /\\$\\(/,\n    /`/,\n    /\\|/,\n    /;/,\n    /&/,\n    /\\n/,\n    /\\r/,\n    /\\x00/\n];\n/**\n * File paths that should always be blocked (sensitive system files)\n */ const BLOCKED_PATHS = [\n    \"/etc/passwd\",\n    \"/etc/shadow\",\n    \"/etc/hosts\",\n    \"/.env\",\n    \"/.aws/credentials\",\n    \"/.ssh/id_rsa\",\n    \"/proc/self/environ\",\n    \"C:\\\\Windows\\\\System32\",\n    \"C:\\\\Users\\\\\"\n];\n/**\n * Shell metacharacters that need escaping\n * These characters have special meaning in shells and must be escaped\n */ const SHELL_METACHARACTERS = /[;&|`$()\\\\<>\\n\\r\\x00\"']/g;\n// ============================================================================\n// Path Validation Functions\n// ============================================================================\n/**\n * Detects potential path traversal attempts\n *\n * @param filePath - The path to check\n * @returns True if path traversal is detected\n *\n * @example\n * isPathTraversal(\"../etc/passwd\") // true\n * isPathTraversal(\"uploads/file.mp3\") // false\n */ function isPathTraversal(filePath) {\n    if (!filePath) return false;\n    // Check for .. in the path\n    if (filePath.includes(\"..\")) {\n        return true;\n    }\n    // Check for dangerous patterns\n    return DANGEROUS_PATH_PATTERNS.some((pattern)=>pattern.test(filePath));\n}\n/**\n * Checks if a path attempts to access sensitive system files\n *\n * @param filePath - The path to check\n * @returns True if path accesses sensitive files\n */ function isSensitiveSystemPath(filePath) {\n    if (!filePath) return false;\n    const normalized = node_path__WEBPACK_IMPORTED_MODULE_1__.normalize(filePath).toLowerCase();\n    return BLOCKED_PATHS.some((blocked)=>{\n        const blockedNormalized = node_path__WEBPACK_IMPORTED_MODULE_1__.normalize(blocked).toLowerCase();\n        return normalized === blockedNormalized || normalized.startsWith(blockedNormalized);\n    });\n}\n/**\n * Validates and normalizes a file path with comprehensive security checks\n *\n * @param filePath - The file path to validate\n * @param options - Validation options\n * @param options.mustExist - If true, path must exist on filesystem\n * @param options.allowAbsolute - If true, allow absolute paths\n * @param options.extensions - Allowed file extensions (e.g., [\".mp3\", \".wav\"])\n * @param options.baseDir - Base directory to resolve relative paths against\n * @param options.mustBeFile - If true, path must be a file (not directory)\n * @param options.mustBeDirectory - If true, path must be a directory\n *\n * @returns Validation result with sanitized path if valid\n *\n * @example\n * validateFilePath(\"uploads/audio.mp3\", {\n *   mustExist: true,\n *   extensions: [\".mp3\", \".wav\"]\n * })\n *\n * @security This function is critical for preventing path traversal attacks\n */ function validateFilePath(filePath, options) {\n    // Normalize options\n    const opts = {\n        mustExist: options?.mustExist ?? false,\n        allowAbsolute: options?.allowAbsolute ?? false,\n        extensions: options?.extensions ?? [],\n        baseDir: options?.baseDir ?? process.cwd(),\n        mustBeFile: options?.mustBeFile ?? false,\n        mustBeDirectory: options?.mustBeDirectory ?? false\n    };\n    // Basic validation\n    if (!filePath || typeof filePath !== \"string\") {\n        return {\n            valid: false,\n            error: \"File path must be a non-empty string\",\n            hint: \"Provide a valid file path\"\n        };\n    }\n    // Check length limits\n    if (filePath.length > 4096) {\n        return {\n            valid: false,\n            error: \"File path exceeds maximum length\",\n            hint: \"Path must be less than 4096 characters\"\n        };\n    }\n    // Check for path traversal attempts\n    if (isPathTraversal(filePath)) {\n        return {\n            valid: false,\n            error: \"Path traversal detected\",\n            hint: \"Path contains invalid characters or patterns (../, ~/, etc.)\"\n        };\n    }\n    // Check for sensitive system paths\n    if (isSensitiveSystemPath(filePath)) {\n        return {\n            valid: false,\n            error: \"Access to sensitive system files is blocked\",\n            hint: \"Cannot access system configuration or credential files\"\n        };\n    }\n    // Normalize and resolve the path\n    let normalizedPath;\n    try {\n        if (node_path__WEBPACK_IMPORTED_MODULE_1__.isAbsolute(filePath)) {\n            if (!opts.allowAbsolute) {\n                return {\n                    valid: false,\n                    error: \"Absolute paths are not allowed\",\n                    hint: \"Use relative paths only\"\n                };\n            }\n            normalizedPath = node_path__WEBPACK_IMPORTED_MODULE_1__.normalize(filePath);\n        } else {\n            normalizedPath = node_path__WEBPACK_IMPORTED_MODULE_1__.resolve(opts.baseDir, filePath);\n        }\n    } catch (error) {\n        return {\n            valid: false,\n            error: \"Failed to normalize path\",\n            hint: \"Path contains invalid characters\"\n        };\n    }\n    // Ensure normalized path is still within base directory (prevent traversal via normalization)\n    if (!opts.allowAbsolute) {\n        const normalizedBase = node_path__WEBPACK_IMPORTED_MODULE_1__.resolve(opts.baseDir);\n        const relative = node_path__WEBPACK_IMPORTED_MODULE_1__.relative(normalizedBase, normalizedPath);\n        if (relative.startsWith(\"..\") || node_path__WEBPACK_IMPORTED_MODULE_1__.isAbsolute(relative)) {\n            return {\n                valid: false,\n                error: \"Path escapes base directory\",\n                hint: \"Path must remain within the project directory\"\n            };\n        }\n    }\n    // Check if path exists (if required)\n    if (opts.mustExist) {\n        if (!node_fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(normalizedPath)) {\n            return {\n                valid: false,\n                error: `File not found: ${filePath}`,\n                hint: \"Ensure the file exists at the specified path\"\n            };\n        }\n        // Check if it's a file or directory\n        const stats = node_fs__WEBPACK_IMPORTED_MODULE_0__.statSync(normalizedPath);\n        if (opts.mustBeFile && !stats.isFile()) {\n            return {\n                valid: false,\n                error: \"Path must be a file, not a directory\",\n                hint: \"Specify a file path, not a directory\"\n            };\n        }\n        if (opts.mustBeDirectory && !stats.isDirectory()) {\n            return {\n                valid: false,\n                error: \"Path must be a directory, not a file\",\n                hint: \"Specify a directory path, not a file\"\n            };\n        }\n    }\n    // Validate file extension\n    if (opts.extensions.length > 0) {\n        const ext = node_path__WEBPACK_IMPORTED_MODULE_1__.extname(normalizedPath).toLowerCase();\n        const allowedExtensions = opts.extensions.map((e)=>e.toLowerCase());\n        if (!allowedExtensions.includes(ext)) {\n            return {\n                valid: false,\n                error: `Invalid file extension: ${ext}`,\n                hint: `Allowed extensions: ${opts.extensions.join(\", \")}`\n            };\n        }\n    }\n    // All checks passed\n    return {\n        valid: true,\n        sanitizedPath: normalizedPath\n    };\n}\n/**\n * Normalizes and validates a path against a base directory\n * Ensures the resolved path remains within the base directory\n *\n * @param filePath - The path to validate\n * @param baseDir - The base directory to resolve against\n * @returns Normalized absolute path\n * @throws PathValidationError if validation fails\n *\n * @example\n * normalizeAndValidatePath(\"uploads/file.mp3\", \"/app\")\n * // Returns: \"/app/uploads/file.mp3\"\n *\n * normalizeAndValidatePath(\"../etc/passwd\", \"/app\")\n * // Throws: PathValidationError\n */ function normalizeAndValidatePath(filePath, baseDir) {\n    const result = validateFilePath(filePath, {\n        baseDir,\n        allowAbsolute: false\n    });\n    if (!result.valid) {\n        throw new PathValidationError(result.error || \"Path validation failed\", filePath, result.hint);\n    }\n    return result.sanitizedPath;\n}\n/**\n * Validates that a directory path exists or can be created\n * If mustExist is false, validates that parent directory exists\n *\n * @param dirPath - Directory path to validate\n * @param options - Validation options\n * @returns Validation result\n */ function validateDirectoryPath(dirPath, options) {\n    const opts = {\n        mustExist: options?.mustExist ?? false,\n        allowCreate: options?.allowCreate ?? true\n    };\n    // First validate as a general path\n    const baseValidation = validateFilePath(dirPath, {\n        mustExist: opts.mustExist,\n        mustBeDirectory: opts.mustExist\n    });\n    if (!baseValidation.valid) {\n        return baseValidation;\n    }\n    // If directory doesn't need to exist, check parent directory\n    if (!opts.mustExist && opts.allowCreate) {\n        const parentDir = node_path__WEBPACK_IMPORTED_MODULE_1__.dirname(baseValidation.sanitizedPath);\n        if (!node_fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(parentDir)) {\n            return {\n                valid: false,\n                error: \"Parent directory does not exist\",\n                hint: `Create parent directory first: ${parentDir}`\n            };\n        }\n        const parentStats = node_fs__WEBPACK_IMPORTED_MODULE_0__.statSync(parentDir);\n        if (!parentStats.isDirectory()) {\n            return {\n                valid: false,\n                error: \"Parent path is not a directory\",\n                hint: \"Parent must be a directory\"\n            };\n        }\n    }\n    return baseValidation;\n}\n// ============================================================================\n// Shell Command Sanitization\n// ============================================================================\n/**\n * Sanitizes a string for safe use in shell commands\n * Escapes shell metacharacters and dangerous patterns\n *\n * @param arg - The argument to sanitize\n * @returns Sanitized argument safe for shell execution\n *\n * @warning This function should be used with caution. Prefer using\n * argument arrays with spawn() over shell string concatenation.\n *\n * @example\n * sanitizeForShellCommand(\"file.mp3\") // \"file.mp3\"\n * sanitizeForShellCommand(\"file; rm -rf /\") // \"file\\\\; rm -rf /\"\n */ function sanitizeForShellCommand(arg) {\n    if (!arg || typeof arg !== \"string\") {\n        return \"\";\n    }\n    // Remove null bytes\n    let sanitized = arg.replace(/\\x00/g, \"\");\n    // Escape shell metacharacters\n    sanitized = sanitized.replace(SHELL_METACHARACTERS, (char)=>{\n        // For backtick, quote, and dollar sign, use backslash escape\n        if (char === \"`\" || char === \"$\" || char === '\"' || char === \"'\") {\n            return \"\\\\\" + char;\n        }\n        // For other dangerous characters, replace with underscore\n        return \"_\";\n    });\n    return sanitized;\n}\n/**\n * Validates that a string does not contain shell injection patterns\n *\n * @param input - The input to validate\n * @returns Validation result\n */ function validateShellSafe(input) {\n    if (!input || typeof input !== \"string\") {\n        return {\n            valid: false,\n            error: \"Input must be a non-empty string\"\n        };\n    }\n    // Check for shell metacharacters\n    if (SHELL_METACHARACTERS.test(input)) {\n        return {\n            valid: false,\n            error: \"Input contains shell metacharacters\",\n            hint: \"Remove special characters like ;, &, |, $, `, etc.\"\n        };\n    }\n    // Check for command substitution patterns\n    if (input.includes(\"$(\") || input.includes(\"`\")) {\n        return {\n            valid: false,\n            error: \"Command substitution detected\",\n            hint: \"Remove $() or backtick command substitution\"\n        };\n    }\n    return {\n        valid: true,\n        sanitizedPath: input\n    };\n}\n/**\n * Validates output path for writing files\n * Ensures parent directory exists and path is safe\n *\n * @param outputPath - The output file path\n * @param options - Validation options\n * @returns Validation result\n */ function validateOutputPath(outputPath, options) {\n    const opts = {\n        extensions: options?.extensions ?? [],\n        allowOverwrite: options?.allowOverwrite ?? true\n    };\n    // Validate basic path security\n    const pathValidation = validateFilePath(outputPath, {\n        mustExist: false,\n        extensions: opts.extensions,\n        mustBeFile: false,\n        allowAbsolute: true\n    });\n    if (!pathValidation.valid) {\n        return pathValidation;\n    }\n    const sanitizedPath = pathValidation.sanitizedPath;\n    // Check if file already exists\n    if (!opts.allowOverwrite && node_fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(sanitizedPath)) {\n        return {\n            valid: false,\n            error: \"Output file already exists\",\n            hint: \"Choose a different output path or enable overwrite\"\n        };\n    }\n    // Validate parent directory\n    const parentDir = node_path__WEBPACK_IMPORTED_MODULE_1__.dirname(sanitizedPath);\n    if (!node_fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(parentDir)) {\n        return {\n            valid: false,\n            error: \"Output directory does not exist\",\n            hint: `Create directory first: ${parentDir}`\n        };\n    }\n    const parentStats = node_fs__WEBPACK_IMPORTED_MODULE_0__.statSync(parentDir);\n    if (!parentStats.isDirectory()) {\n        return {\n            valid: false,\n            error: \"Parent path is not a directory\",\n            hint: \"Output path parent must be a directory\"\n        };\n    }\n    // Check write permissions by testing if directory is writable\n    try {\n        node_fs__WEBPACK_IMPORTED_MODULE_0__.accessSync(parentDir, node_fs__WEBPACK_IMPORTED_MODULE_0__.constants.W_OK);\n    } catch (error) {\n        return {\n            valid: false,\n            error: \"No write permission for output directory\",\n            hint: \"Ensure you have write permissions for the output directory\"\n        };\n    }\n    return {\n        valid: true,\n        sanitizedPath\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../src/utils/validation.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@anthropic-ai","vendor-chunks/docxtemplater","vendor-chunks/pizzip","vendor-chunks/pino","vendor-chunks/@xmldom","vendor-chunks/zod","vendor-chunks/pino-std-serializers","vendor-chunks/dotenv","vendor-chunks/mime","vendor-chunks/thread-stream","vendor-chunks/sonic-boom","vendor-chunks/slow-redact","vendor-chunks/safe-stable-stringify","vendor-chunks/quick-format-unescaped","vendor-chunks/on-exit-leak-free","vendor-chunks/atomic-sleep"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frun%2Froute&page=%2Fapi%2Frun%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frun%2Froute.ts&appDir=%2FUsers%2Fbc%2FDesktop%2Fpip-agent-autonomous%2Fapps%2Fui%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fbc%2FDesktop%2Fpip-agent-autonomous%2Fapps%2Fui&isDev=true&tsconfigPath=.%2Ftsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();